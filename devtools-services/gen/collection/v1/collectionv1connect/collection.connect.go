// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: collection/v1/collection.proto

package collectionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "devtools-services/gen/collection/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectionServiceName is the fully-qualified name of the CollectionService service.
	CollectionServiceName = "collection.v1.CollectionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectionServiceListCollectionsProcedure is the fully-qualified name of the CollectionService's
	// ListCollections RPC.
	CollectionServiceListCollectionsProcedure = "/collection.v1.CollectionService/ListCollections"
	// CollectionServiceCreateCollectionProcedure is the fully-qualified name of the CollectionService's
	// CreateCollection RPC.
	CollectionServiceCreateCollectionProcedure = "/collection.v1.CollectionService/CreateCollection"
	// CollectionServiceGetCollectionProcedure is the fully-qualified name of the CollectionService's
	// GetCollection RPC.
	CollectionServiceGetCollectionProcedure = "/collection.v1.CollectionService/GetCollection"
	// CollectionServiceUpdateCollectionProcedure is the fully-qualified name of the CollectionService's
	// UpdateCollection RPC.
	CollectionServiceUpdateCollectionProcedure = "/collection.v1.CollectionService/UpdateCollection"
	// CollectionServiceDeleteCollectionProcedure is the fully-qualified name of the CollectionService's
	// DeleteCollection RPC.
	CollectionServiceDeleteCollectionProcedure = "/collection.v1.CollectionService/DeleteCollection"
	// CollectionServiceImportPostmanProcedure is the fully-qualified name of the CollectionService's
	// ImportPostman RPC.
	CollectionServiceImportPostmanProcedure = "/collection.v1.CollectionService/ImportPostman"
	// CollectionServiceListNodesProcedure is the fully-qualified name of the CollectionService's
	// ListNodes RPC.
	CollectionServiceListNodesProcedure = "/collection.v1.CollectionService/ListNodes"
	// CollectionServiceCreateNodeProcedure is the fully-qualified name of the CollectionService's
	// CreateNode RPC.
	CollectionServiceCreateNodeProcedure = "/collection.v1.CollectionService/CreateNode"
	// CollectionServiceGetNodeProcedure is the fully-qualified name of the CollectionService's GetNode
	// RPC.
	CollectionServiceGetNodeProcedure = "/collection.v1.CollectionService/GetNode"
	// CollectionServiceGetNodeBulkProcedure is the fully-qualified name of the CollectionService's
	// GetNodeBulk RPC.
	CollectionServiceGetNodeBulkProcedure = "/collection.v1.CollectionService/GetNodeBulk"
	// CollectionServiceUpdateNodeProcedure is the fully-qualified name of the CollectionService's
	// UpdateNode RPC.
	CollectionServiceUpdateNodeProcedure = "/collection.v1.CollectionService/UpdateNode"
	// CollectionServiceDeleteNodeProcedure is the fully-qualified name of the CollectionService's
	// DeleteNode RPC.
	CollectionServiceDeleteNodeProcedure = "/collection.v1.CollectionService/DeleteNode"
	// CollectionServiceMoveNodeProcedure is the fully-qualified name of the CollectionService's
	// MoveNode RPC.
	CollectionServiceMoveNodeProcedure = "/collection.v1.CollectionService/MoveNode"
	// CollectionServiceRunNodeProcedure is the fully-qualified name of the CollectionService's RunNode
	// RPC.
	CollectionServiceRunNodeProcedure = "/collection.v1.CollectionService/RunNode"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	collectionServiceServiceDescriptor                = v1.File_collection_v1_collection_proto.Services().ByName("CollectionService")
	collectionServiceListCollectionsMethodDescriptor  = collectionServiceServiceDescriptor.Methods().ByName("ListCollections")
	collectionServiceCreateCollectionMethodDescriptor = collectionServiceServiceDescriptor.Methods().ByName("CreateCollection")
	collectionServiceGetCollectionMethodDescriptor    = collectionServiceServiceDescriptor.Methods().ByName("GetCollection")
	collectionServiceUpdateCollectionMethodDescriptor = collectionServiceServiceDescriptor.Methods().ByName("UpdateCollection")
	collectionServiceDeleteCollectionMethodDescriptor = collectionServiceServiceDescriptor.Methods().ByName("DeleteCollection")
	collectionServiceImportPostmanMethodDescriptor    = collectionServiceServiceDescriptor.Methods().ByName("ImportPostman")
	collectionServiceListNodesMethodDescriptor        = collectionServiceServiceDescriptor.Methods().ByName("ListNodes")
	collectionServiceCreateNodeMethodDescriptor       = collectionServiceServiceDescriptor.Methods().ByName("CreateNode")
	collectionServiceGetNodeMethodDescriptor          = collectionServiceServiceDescriptor.Methods().ByName("GetNode")
	collectionServiceGetNodeBulkMethodDescriptor      = collectionServiceServiceDescriptor.Methods().ByName("GetNodeBulk")
	collectionServiceUpdateNodeMethodDescriptor       = collectionServiceServiceDescriptor.Methods().ByName("UpdateNode")
	collectionServiceDeleteNodeMethodDescriptor       = collectionServiceServiceDescriptor.Methods().ByName("DeleteNode")
	collectionServiceMoveNodeMethodDescriptor         = collectionServiceServiceDescriptor.Methods().ByName("MoveNode")
	collectionServiceRunNodeMethodDescriptor          = collectionServiceServiceDescriptor.Methods().ByName("RunNode")
)

// CollectionServiceClient is a client for the collection.v1.CollectionService service.
type CollectionServiceClient interface {
	// Collection operations
	ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error)
	CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error)
	GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error)
	UpdateCollection(context.Context, *connect.Request[v1.UpdateCollectionRequest]) (*connect.Response[v1.UpdateCollectionResponse], error)
	DeleteCollection(context.Context, *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error)
	// Helper rpcs
	// // // postman
	ImportPostman(context.Context, *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error)
	// Node operations
	ListNodes(context.Context, *connect.Request[v1.ListNodesRequest]) (*connect.Response[v1.ListNodesResponse], error)
	CreateNode(context.Context, *connect.Request[v1.CreateNodeRequest]) (*connect.Response[v1.CreateNodeResponse], error)
	GetNode(context.Context, *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error)
	GetNodeBulk(context.Context, *connect.Request[v1.GetNodeBulkRequest]) (*connect.Response[v1.GetNodeBulkResponse], error)
	UpdateNode(context.Context, *connect.Request[v1.UpdateNodeRequest]) (*connect.Response[v1.UpdateNodeResponse], error)
	DeleteNode(context.Context, *connect.Request[v1.DeleteNodeRequest]) (*connect.Response[v1.DeleteNodeResponse], error)
	// Helper rpcs
	// // Move node to another parent or collection
	MoveNode(context.Context, *connect.Request[v1.MoveNodeRequest]) (*connect.Response[v1.MoveNodeResponse], error)
	RunNode(context.Context, *connect.Request[v1.RunNodeRequest]) (*connect.Response[v1.RunNodeResponse], error)
}

// NewCollectionServiceClient constructs a client for the collection.v1.CollectionService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &collectionServiceClient{
		listCollections: connect.NewClient[v1.ListCollectionsRequest, v1.ListCollectionsResponse](
			httpClient,
			baseURL+CollectionServiceListCollectionsProcedure,
			connect.WithSchema(collectionServiceListCollectionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCollection: connect.NewClient[v1.CreateCollectionRequest, v1.CreateCollectionResponse](
			httpClient,
			baseURL+CollectionServiceCreateCollectionProcedure,
			connect.WithSchema(collectionServiceCreateCollectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCollection: connect.NewClient[v1.GetCollectionRequest, v1.GetCollectionResponse](
			httpClient,
			baseURL+CollectionServiceGetCollectionProcedure,
			connect.WithSchema(collectionServiceGetCollectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCollection: connect.NewClient[v1.UpdateCollectionRequest, v1.UpdateCollectionResponse](
			httpClient,
			baseURL+CollectionServiceUpdateCollectionProcedure,
			connect.WithSchema(collectionServiceUpdateCollectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCollection: connect.NewClient[v1.DeleteCollectionRequest, v1.DeleteCollectionResponse](
			httpClient,
			baseURL+CollectionServiceDeleteCollectionProcedure,
			connect.WithSchema(collectionServiceDeleteCollectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		importPostman: connect.NewClient[v1.ImportPostmanRequest, v1.ImportPostmanResponse](
			httpClient,
			baseURL+CollectionServiceImportPostmanProcedure,
			connect.WithSchema(collectionServiceImportPostmanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listNodes: connect.NewClient[v1.ListNodesRequest, v1.ListNodesResponse](
			httpClient,
			baseURL+CollectionServiceListNodesProcedure,
			connect.WithSchema(collectionServiceListNodesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createNode: connect.NewClient[v1.CreateNodeRequest, v1.CreateNodeResponse](
			httpClient,
			baseURL+CollectionServiceCreateNodeProcedure,
			connect.WithSchema(collectionServiceCreateNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNode: connect.NewClient[v1.GetNodeRequest, v1.GetNodeResponse](
			httpClient,
			baseURL+CollectionServiceGetNodeProcedure,
			connect.WithSchema(collectionServiceGetNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNodeBulk: connect.NewClient[v1.GetNodeBulkRequest, v1.GetNodeBulkResponse](
			httpClient,
			baseURL+CollectionServiceGetNodeBulkProcedure,
			connect.WithSchema(collectionServiceGetNodeBulkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateNode: connect.NewClient[v1.UpdateNodeRequest, v1.UpdateNodeResponse](
			httpClient,
			baseURL+CollectionServiceUpdateNodeProcedure,
			connect.WithSchema(collectionServiceUpdateNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNode: connect.NewClient[v1.DeleteNodeRequest, v1.DeleteNodeResponse](
			httpClient,
			baseURL+CollectionServiceDeleteNodeProcedure,
			connect.WithSchema(collectionServiceDeleteNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		moveNode: connect.NewClient[v1.MoveNodeRequest, v1.MoveNodeResponse](
			httpClient,
			baseURL+CollectionServiceMoveNodeProcedure,
			connect.WithSchema(collectionServiceMoveNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		runNode: connect.NewClient[v1.RunNodeRequest, v1.RunNodeResponse](
			httpClient,
			baseURL+CollectionServiceRunNodeProcedure,
			connect.WithSchema(collectionServiceRunNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectionServiceClient implements CollectionServiceClient.
type collectionServiceClient struct {
	listCollections  *connect.Client[v1.ListCollectionsRequest, v1.ListCollectionsResponse]
	createCollection *connect.Client[v1.CreateCollectionRequest, v1.CreateCollectionResponse]
	getCollection    *connect.Client[v1.GetCollectionRequest, v1.GetCollectionResponse]
	updateCollection *connect.Client[v1.UpdateCollectionRequest, v1.UpdateCollectionResponse]
	deleteCollection *connect.Client[v1.DeleteCollectionRequest, v1.DeleteCollectionResponse]
	importPostman    *connect.Client[v1.ImportPostmanRequest, v1.ImportPostmanResponse]
	listNodes        *connect.Client[v1.ListNodesRequest, v1.ListNodesResponse]
	createNode       *connect.Client[v1.CreateNodeRequest, v1.CreateNodeResponse]
	getNode          *connect.Client[v1.GetNodeRequest, v1.GetNodeResponse]
	getNodeBulk      *connect.Client[v1.GetNodeBulkRequest, v1.GetNodeBulkResponse]
	updateNode       *connect.Client[v1.UpdateNodeRequest, v1.UpdateNodeResponse]
	deleteNode       *connect.Client[v1.DeleteNodeRequest, v1.DeleteNodeResponse]
	moveNode         *connect.Client[v1.MoveNodeRequest, v1.MoveNodeResponse]
	runNode          *connect.Client[v1.RunNodeRequest, v1.RunNodeResponse]
}

// ListCollections calls collection.v1.CollectionService.ListCollections.
func (c *collectionServiceClient) ListCollections(ctx context.Context, req *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error) {
	return c.listCollections.CallUnary(ctx, req)
}

// CreateCollection calls collection.v1.CollectionService.CreateCollection.
func (c *collectionServiceClient) CreateCollection(ctx context.Context, req *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error) {
	return c.createCollection.CallUnary(ctx, req)
}

// GetCollection calls collection.v1.CollectionService.GetCollection.
func (c *collectionServiceClient) GetCollection(ctx context.Context, req *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error) {
	return c.getCollection.CallUnary(ctx, req)
}

// UpdateCollection calls collection.v1.CollectionService.UpdateCollection.
func (c *collectionServiceClient) UpdateCollection(ctx context.Context, req *connect.Request[v1.UpdateCollectionRequest]) (*connect.Response[v1.UpdateCollectionResponse], error) {
	return c.updateCollection.CallUnary(ctx, req)
}

// DeleteCollection calls collection.v1.CollectionService.DeleteCollection.
func (c *collectionServiceClient) DeleteCollection(ctx context.Context, req *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error) {
	return c.deleteCollection.CallUnary(ctx, req)
}

// ImportPostman calls collection.v1.CollectionService.ImportPostman.
func (c *collectionServiceClient) ImportPostman(ctx context.Context, req *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error) {
	return c.importPostman.CallUnary(ctx, req)
}

// ListNodes calls collection.v1.CollectionService.ListNodes.
func (c *collectionServiceClient) ListNodes(ctx context.Context, req *connect.Request[v1.ListNodesRequest]) (*connect.Response[v1.ListNodesResponse], error) {
	return c.listNodes.CallUnary(ctx, req)
}

// CreateNode calls collection.v1.CollectionService.CreateNode.
func (c *collectionServiceClient) CreateNode(ctx context.Context, req *connect.Request[v1.CreateNodeRequest]) (*connect.Response[v1.CreateNodeResponse], error) {
	return c.createNode.CallUnary(ctx, req)
}

// GetNode calls collection.v1.CollectionService.GetNode.
func (c *collectionServiceClient) GetNode(ctx context.Context, req *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error) {
	return c.getNode.CallUnary(ctx, req)
}

// GetNodeBulk calls collection.v1.CollectionService.GetNodeBulk.
func (c *collectionServiceClient) GetNodeBulk(ctx context.Context, req *connect.Request[v1.GetNodeBulkRequest]) (*connect.Response[v1.GetNodeBulkResponse], error) {
	return c.getNodeBulk.CallUnary(ctx, req)
}

// UpdateNode calls collection.v1.CollectionService.UpdateNode.
func (c *collectionServiceClient) UpdateNode(ctx context.Context, req *connect.Request[v1.UpdateNodeRequest]) (*connect.Response[v1.UpdateNodeResponse], error) {
	return c.updateNode.CallUnary(ctx, req)
}

// DeleteNode calls collection.v1.CollectionService.DeleteNode.
func (c *collectionServiceClient) DeleteNode(ctx context.Context, req *connect.Request[v1.DeleteNodeRequest]) (*connect.Response[v1.DeleteNodeResponse], error) {
	return c.deleteNode.CallUnary(ctx, req)
}

// MoveNode calls collection.v1.CollectionService.MoveNode.
func (c *collectionServiceClient) MoveNode(ctx context.Context, req *connect.Request[v1.MoveNodeRequest]) (*connect.Response[v1.MoveNodeResponse], error) {
	return c.moveNode.CallUnary(ctx, req)
}

// RunNode calls collection.v1.CollectionService.RunNode.
func (c *collectionServiceClient) RunNode(ctx context.Context, req *connect.Request[v1.RunNodeRequest]) (*connect.Response[v1.RunNodeResponse], error) {
	return c.runNode.CallUnary(ctx, req)
}

// CollectionServiceHandler is an implementation of the collection.v1.CollectionService service.
type CollectionServiceHandler interface {
	// Collection operations
	ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error)
	CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error)
	GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error)
	UpdateCollection(context.Context, *connect.Request[v1.UpdateCollectionRequest]) (*connect.Response[v1.UpdateCollectionResponse], error)
	DeleteCollection(context.Context, *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error)
	// Helper rpcs
	// // // postman
	ImportPostman(context.Context, *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error)
	// Node operations
	ListNodes(context.Context, *connect.Request[v1.ListNodesRequest]) (*connect.Response[v1.ListNodesResponse], error)
	CreateNode(context.Context, *connect.Request[v1.CreateNodeRequest]) (*connect.Response[v1.CreateNodeResponse], error)
	GetNode(context.Context, *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error)
	GetNodeBulk(context.Context, *connect.Request[v1.GetNodeBulkRequest]) (*connect.Response[v1.GetNodeBulkResponse], error)
	UpdateNode(context.Context, *connect.Request[v1.UpdateNodeRequest]) (*connect.Response[v1.UpdateNodeResponse], error)
	DeleteNode(context.Context, *connect.Request[v1.DeleteNodeRequest]) (*connect.Response[v1.DeleteNodeResponse], error)
	// Helper rpcs
	// // Move node to another parent or collection
	MoveNode(context.Context, *connect.Request[v1.MoveNodeRequest]) (*connect.Response[v1.MoveNodeResponse], error)
	RunNode(context.Context, *connect.Request[v1.RunNodeRequest]) (*connect.Response[v1.RunNodeResponse], error)
}

// NewCollectionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectionServiceHandler(svc CollectionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectionServiceListCollectionsHandler := connect.NewUnaryHandler(
		CollectionServiceListCollectionsProcedure,
		svc.ListCollections,
		connect.WithSchema(collectionServiceListCollectionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCreateCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceCreateCollectionProcedure,
		svc.CreateCollection,
		connect.WithSchema(collectionServiceCreateCollectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceGetCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceGetCollectionProcedure,
		svc.GetCollection,
		connect.WithSchema(collectionServiceGetCollectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceUpdateCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceUpdateCollectionProcedure,
		svc.UpdateCollection,
		connect.WithSchema(collectionServiceUpdateCollectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceDeleteCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceDeleteCollectionProcedure,
		svc.DeleteCollection,
		connect.WithSchema(collectionServiceDeleteCollectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceImportPostmanHandler := connect.NewUnaryHandler(
		CollectionServiceImportPostmanProcedure,
		svc.ImportPostman,
		connect.WithSchema(collectionServiceImportPostmanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceListNodesHandler := connect.NewUnaryHandler(
		CollectionServiceListNodesProcedure,
		svc.ListNodes,
		connect.WithSchema(collectionServiceListNodesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCreateNodeHandler := connect.NewUnaryHandler(
		CollectionServiceCreateNodeProcedure,
		svc.CreateNode,
		connect.WithSchema(collectionServiceCreateNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceGetNodeHandler := connect.NewUnaryHandler(
		CollectionServiceGetNodeProcedure,
		svc.GetNode,
		connect.WithSchema(collectionServiceGetNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceGetNodeBulkHandler := connect.NewUnaryHandler(
		CollectionServiceGetNodeBulkProcedure,
		svc.GetNodeBulk,
		connect.WithSchema(collectionServiceGetNodeBulkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceUpdateNodeHandler := connect.NewUnaryHandler(
		CollectionServiceUpdateNodeProcedure,
		svc.UpdateNode,
		connect.WithSchema(collectionServiceUpdateNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceDeleteNodeHandler := connect.NewUnaryHandler(
		CollectionServiceDeleteNodeProcedure,
		svc.DeleteNode,
		connect.WithSchema(collectionServiceDeleteNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceMoveNodeHandler := connect.NewUnaryHandler(
		CollectionServiceMoveNodeProcedure,
		svc.MoveNode,
		connect.WithSchema(collectionServiceMoveNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceRunNodeHandler := connect.NewUnaryHandler(
		CollectionServiceRunNodeProcedure,
		svc.RunNode,
		connect.WithSchema(collectionServiceRunNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/collection.v1.CollectionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectionServiceListCollectionsProcedure:
			collectionServiceListCollectionsHandler.ServeHTTP(w, r)
		case CollectionServiceCreateCollectionProcedure:
			collectionServiceCreateCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceGetCollectionProcedure:
			collectionServiceGetCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceUpdateCollectionProcedure:
			collectionServiceUpdateCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceDeleteCollectionProcedure:
			collectionServiceDeleteCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceImportPostmanProcedure:
			collectionServiceImportPostmanHandler.ServeHTTP(w, r)
		case CollectionServiceListNodesProcedure:
			collectionServiceListNodesHandler.ServeHTTP(w, r)
		case CollectionServiceCreateNodeProcedure:
			collectionServiceCreateNodeHandler.ServeHTTP(w, r)
		case CollectionServiceGetNodeProcedure:
			collectionServiceGetNodeHandler.ServeHTTP(w, r)
		case CollectionServiceGetNodeBulkProcedure:
			collectionServiceGetNodeBulkHandler.ServeHTTP(w, r)
		case CollectionServiceUpdateNodeProcedure:
			collectionServiceUpdateNodeHandler.ServeHTTP(w, r)
		case CollectionServiceDeleteNodeProcedure:
			collectionServiceDeleteNodeHandler.ServeHTTP(w, r)
		case CollectionServiceMoveNodeProcedure:
			collectionServiceMoveNodeHandler.ServeHTTP(w, r)
		case CollectionServiceRunNodeProcedure:
			collectionServiceRunNodeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectionServiceHandler struct{}

func (UnimplementedCollectionServiceHandler) ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.ListCollections is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CreateCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.GetCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) UpdateCollection(context.Context, *connect.Request[v1.UpdateCollectionRequest]) (*connect.Response[v1.UpdateCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.UpdateCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) DeleteCollection(context.Context, *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.DeleteCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) ImportPostman(context.Context, *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.ImportPostman is not implemented"))
}

func (UnimplementedCollectionServiceHandler) ListNodes(context.Context, *connect.Request[v1.ListNodesRequest]) (*connect.Response[v1.ListNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.ListNodes is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CreateNode(context.Context, *connect.Request[v1.CreateNodeRequest]) (*connect.Response[v1.CreateNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CreateNode is not implemented"))
}

func (UnimplementedCollectionServiceHandler) GetNode(context.Context, *connect.Request[v1.GetNodeRequest]) (*connect.Response[v1.GetNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.GetNode is not implemented"))
}

func (UnimplementedCollectionServiceHandler) GetNodeBulk(context.Context, *connect.Request[v1.GetNodeBulkRequest]) (*connect.Response[v1.GetNodeBulkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.GetNodeBulk is not implemented"))
}

func (UnimplementedCollectionServiceHandler) UpdateNode(context.Context, *connect.Request[v1.UpdateNodeRequest]) (*connect.Response[v1.UpdateNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.UpdateNode is not implemented"))
}

func (UnimplementedCollectionServiceHandler) DeleteNode(context.Context, *connect.Request[v1.DeleteNodeRequest]) (*connect.Response[v1.DeleteNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.DeleteNode is not implemented"))
}

func (UnimplementedCollectionServiceHandler) MoveNode(context.Context, *connect.Request[v1.MoveNodeRequest]) (*connect.Response[v1.MoveNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.MoveNode is not implemented"))
}

func (UnimplementedCollectionServiceHandler) RunNode(context.Context, *connect.Request[v1.RunNodeRequest]) (*connect.Response[v1.RunNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.RunNode is not implemented"))
}
