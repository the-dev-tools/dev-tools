// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: apiresult/v1/apiresult.proto

package apiresultv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "devtools-services/gen/apiresult/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApiResultServiceName is the fully-qualified name of the ApiResultService service.
	ApiResultServiceName = "apiresult.v1.ApiResultService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiResultServiceGetProcedure is the fully-qualified name of the ApiResultService's Get RPC.
	ApiResultServiceGetProcedure = "/apiresult.v1.ApiResultService/Get"
	// ApiResultServiceGetResultsProcedure is the fully-qualified name of the ApiResultService's
	// GetResults RPC.
	ApiResultServiceGetResultsProcedure = "/apiresult.v1.ApiResultService/GetResults"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	apiResultServiceServiceDescriptor          = v1.File_apiresult_v1_apiresult_proto.Services().ByName("ApiResultService")
	apiResultServiceGetMethodDescriptor        = apiResultServiceServiceDescriptor.Methods().ByName("Get")
	apiResultServiceGetResultsMethodDescriptor = apiResultServiceServiceDescriptor.Methods().ByName("GetResults")
)

// ApiResultServiceClient is a client for the apiresult.v1.ApiResultService service.
type ApiResultServiceClient interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	GetResults(context.Context, *connect.Request[v1.GetResultsRequest]) (*connect.Response[v1.GetResultsResponse], error)
}

// NewApiResultServiceClient constructs a client for the apiresult.v1.ApiResultService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiResultServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApiResultServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &apiResultServiceClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+ApiResultServiceGetProcedure,
			connect.WithSchema(apiResultServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getResults: connect.NewClient[v1.GetResultsRequest, v1.GetResultsResponse](
			httpClient,
			baseURL+ApiResultServiceGetResultsProcedure,
			connect.WithSchema(apiResultServiceGetResultsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// apiResultServiceClient implements ApiResultServiceClient.
type apiResultServiceClient struct {
	get        *connect.Client[v1.GetRequest, v1.GetResponse]
	getResults *connect.Client[v1.GetResultsRequest, v1.GetResultsResponse]
}

// Get calls apiresult.v1.ApiResultService.Get.
func (c *apiResultServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetResults calls apiresult.v1.ApiResultService.GetResults.
func (c *apiResultServiceClient) GetResults(ctx context.Context, req *connect.Request[v1.GetResultsRequest]) (*connect.Response[v1.GetResultsResponse], error) {
	return c.getResults.CallUnary(ctx, req)
}

// ApiResultServiceHandler is an implementation of the apiresult.v1.ApiResultService service.
type ApiResultServiceHandler interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	GetResults(context.Context, *connect.Request[v1.GetResultsRequest]) (*connect.Response[v1.GetResultsResponse], error)
}

// NewApiResultServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiResultServiceHandler(svc ApiResultServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	apiResultServiceGetHandler := connect.NewUnaryHandler(
		ApiResultServiceGetProcedure,
		svc.Get,
		connect.WithSchema(apiResultServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiResultServiceGetResultsHandler := connect.NewUnaryHandler(
		ApiResultServiceGetResultsProcedure,
		svc.GetResults,
		connect.WithSchema(apiResultServiceGetResultsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/apiresult.v1.ApiResultService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiResultServiceGetProcedure:
			apiResultServiceGetHandler.ServeHTTP(w, r)
		case ApiResultServiceGetResultsProcedure:
			apiResultServiceGetResultsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiResultServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiResultServiceHandler struct{}

func (UnimplementedApiResultServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("apiresult.v1.ApiResultService.Get is not implemented"))
}

func (UnimplementedApiResultServiceHandler) GetResults(context.Context, *connect.Request[v1.GetResultsRequest]) (*connect.Response[v1.GetResultsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("apiresult.v1.ApiResultService.GetResults is not implemented"))
}
