syntax = "proto3";

package collection.v1;
option go_package = "dev-tools-services/gen/collection/v1;collectionv1";

import "itemapi/v1/itemapi.proto";
import "itemfolder/v1/itemfolder.proto";


import "apiresult/v1/apiresult.proto";
import "google/protobuf/timestamp.proto";

service CollectionService {
  // Collection operations
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse);
  rpc CreateCollection(CreateCollectionRequest)
      returns (CreateCollectionResponse);
  rpc GetCollection(GetCollectionRequest) returns (GetCollectionResponse);

  rpc UpdateCollection(UpdateCollectionRequest)
      returns (UpdateCollectionResponse);
  rpc DeleteCollection(DeleteCollectionRequest)
      returns (DeleteCollectionResponse);

  // Helper rpcs
  // // Postman
  rpc ImportPostman(ImportPostmanRequest) returns (ImportPostmanResponse);
  rpc RunApiCall(RunApiCallRequest) returns (RunApiCallResponse);
}

// Collection Operations Request and Response
// // List
message ListCollectionsRequest {
    string workspace_id = 1;
}

message ListCollectionsResponse {
  repeated CollectionMeta meta_collections = 1;
}

// // Create
message CreateCollectionRequest {
  string workspace_id = 1;
  string name = 2;
}

message CreateCollectionResponse {
  string id = 1;
  string name = 2;
  repeated itemfolder.v1.Item items = 3; // Optional: items can be added while creating
}

// // Get
message GetCollectionRequest { string id = 1; }

message GetCollectionResponse {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp created = 3;
  google.protobuf.Timestamp updated = 4;
  repeated itemfolder.v1.Item items = 5;
}

// // Update
message UpdateCollectionRequest {
  string id = 1;
  string name = 2;
}

message UpdateCollectionResponse {}

// // Delete
message DeleteCollectionRequest { string id = 1; }

message DeleteCollectionResponse {}

// Helper Requests
// // Postman
message ImportPostmanRequest {
  string name = 1; // collection name
  bytes data = 2;  // collection data (json)
  string workspace_id = 3; // workspace id that owns the collection
}

message ImportPostmanResponse { string id = 1; }

// //  Item Operations Request and Response

message ListItemsRequest {
  string collection_id = 1; // collection id
}

message CreateItemRequest {
  // node id will be generated by the server
  itemfolder.v1.Item item = 1;
}

message CreateItemResponse { string id = 1; }

message RunApiCallRequest { string id = 1; }

message RunApiCallResponse {
  apiresult.v1.Result result = 1;
}

message CollectionMeta {
  string id = 1;
  string name = 2;
}

// Collection Item Meta
message ItemMeta {
  oneof meta {
    itemfolder.v1.FolderMeta folder_meta = 1;
    itemapi.v1.ApiCallMeta api_call_meta = 2;
  }
}

