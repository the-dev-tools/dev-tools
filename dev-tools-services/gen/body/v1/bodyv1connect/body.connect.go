// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: body/v1/body.proto

package bodyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-services/gen/body/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BodyServiceName is the fully-qualified name of the BodyService service.
	BodyServiceName = "body.v1.BodyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BodyServiceCreateBodyFormProcedure is the fully-qualified name of the BodyService's
	// CreateBodyForm RPC.
	BodyServiceCreateBodyFormProcedure = "/body.v1.BodyService/CreateBodyForm"
	// BodyServiceUpdateBodyFormProcedure is the fully-qualified name of the BodyService's
	// UpdateBodyForm RPC.
	BodyServiceUpdateBodyFormProcedure = "/body.v1.BodyService/UpdateBodyForm"
	// BodyServiceDeleteBodyFormProcedure is the fully-qualified name of the BodyService's
	// DeleteBodyForm RPC.
	BodyServiceDeleteBodyFormProcedure = "/body.v1.BodyService/DeleteBodyForm"
	// BodyServiceCreateBodyUrlEncodedProcedure is the fully-qualified name of the BodyService's
	// CreateBodyUrlEncoded RPC.
	BodyServiceCreateBodyUrlEncodedProcedure = "/body.v1.BodyService/CreateBodyUrlEncoded"
	// BodyServiceUpdateBodyUrlEncodedProcedure is the fully-qualified name of the BodyService's
	// UpdateBodyUrlEncoded RPC.
	BodyServiceUpdateBodyUrlEncodedProcedure = "/body.v1.BodyService/UpdateBodyUrlEncoded"
	// BodyServiceDeleteBodyUrlEncodedProcedure is the fully-qualified name of the BodyService's
	// DeleteBodyUrlEncoded RPC.
	BodyServiceDeleteBodyUrlEncodedProcedure = "/body.v1.BodyService/DeleteBodyUrlEncoded"
	// BodyServiceUpdateBodyRawProcedure is the fully-qualified name of the BodyService's UpdateBodyRaw
	// RPC.
	BodyServiceUpdateBodyRawProcedure = "/body.v1.BodyService/UpdateBodyRaw"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	bodyServiceServiceDescriptor                    = v1.File_body_v1_body_proto.Services().ByName("BodyService")
	bodyServiceCreateBodyFormMethodDescriptor       = bodyServiceServiceDescriptor.Methods().ByName("CreateBodyForm")
	bodyServiceUpdateBodyFormMethodDescriptor       = bodyServiceServiceDescriptor.Methods().ByName("UpdateBodyForm")
	bodyServiceDeleteBodyFormMethodDescriptor       = bodyServiceServiceDescriptor.Methods().ByName("DeleteBodyForm")
	bodyServiceCreateBodyUrlEncodedMethodDescriptor = bodyServiceServiceDescriptor.Methods().ByName("CreateBodyUrlEncoded")
	bodyServiceUpdateBodyUrlEncodedMethodDescriptor = bodyServiceServiceDescriptor.Methods().ByName("UpdateBodyUrlEncoded")
	bodyServiceDeleteBodyUrlEncodedMethodDescriptor = bodyServiceServiceDescriptor.Methods().ByName("DeleteBodyUrlEncoded")
	bodyServiceUpdateBodyRawMethodDescriptor        = bodyServiceServiceDescriptor.Methods().ByName("UpdateBodyRaw")
)

// BodyServiceClient is a client for the body.v1.BodyService service.
type BodyServiceClient interface {
	// Body Form
	CreateBodyForm(context.Context, *connect.Request[v1.CreateBodyFormRequest]) (*connect.Response[v1.CreateBodyFormResponse], error)
	UpdateBodyForm(context.Context, *connect.Request[v1.UpdateBodyFormRequest]) (*connect.Response[v1.UpdateBodyFormResponse], error)
	DeleteBodyForm(context.Context, *connect.Request[v1.DeleteBodyFormRequest]) (*connect.Response[v1.DeleteBodyFormResponse], error)
	// Body URL Encoded
	CreateBodyUrlEncoded(context.Context, *connect.Request[v1.CreateBodyUrlEncodedRequest]) (*connect.Response[v1.CreateBodyUrlEncodedResponse], error)
	UpdateBodyUrlEncoded(context.Context, *connect.Request[v1.UpdateBodyUrlEncodedRequest]) (*connect.Response[v1.UpdateBodyUrlEncodedResponse], error)
	DeleteBodyUrlEncoded(context.Context, *connect.Request[v1.DeleteBodyUrlEncodedRequest]) (*connect.Response[v1.DeleteBodyUrlEncodedResponse], error)
	// Body Raw
	UpdateBodyRaw(context.Context, *connect.Request[v1.UpdateBodyRawRequest]) (*connect.Response[v1.UpdateBodyRawResponse], error)
}

// NewBodyServiceClient constructs a client for the body.v1.BodyService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBodyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BodyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bodyServiceClient{
		createBodyForm: connect.NewClient[v1.CreateBodyFormRequest, v1.CreateBodyFormResponse](
			httpClient,
			baseURL+BodyServiceCreateBodyFormProcedure,
			connect.WithSchema(bodyServiceCreateBodyFormMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateBodyForm: connect.NewClient[v1.UpdateBodyFormRequest, v1.UpdateBodyFormResponse](
			httpClient,
			baseURL+BodyServiceUpdateBodyFormProcedure,
			connect.WithSchema(bodyServiceUpdateBodyFormMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteBodyForm: connect.NewClient[v1.DeleteBodyFormRequest, v1.DeleteBodyFormResponse](
			httpClient,
			baseURL+BodyServiceDeleteBodyFormProcedure,
			connect.WithSchema(bodyServiceDeleteBodyFormMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createBodyUrlEncoded: connect.NewClient[v1.CreateBodyUrlEncodedRequest, v1.CreateBodyUrlEncodedResponse](
			httpClient,
			baseURL+BodyServiceCreateBodyUrlEncodedProcedure,
			connect.WithSchema(bodyServiceCreateBodyUrlEncodedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateBodyUrlEncoded: connect.NewClient[v1.UpdateBodyUrlEncodedRequest, v1.UpdateBodyUrlEncodedResponse](
			httpClient,
			baseURL+BodyServiceUpdateBodyUrlEncodedProcedure,
			connect.WithSchema(bodyServiceUpdateBodyUrlEncodedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteBodyUrlEncoded: connect.NewClient[v1.DeleteBodyUrlEncodedRequest, v1.DeleteBodyUrlEncodedResponse](
			httpClient,
			baseURL+BodyServiceDeleteBodyUrlEncodedProcedure,
			connect.WithSchema(bodyServiceDeleteBodyUrlEncodedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateBodyRaw: connect.NewClient[v1.UpdateBodyRawRequest, v1.UpdateBodyRawResponse](
			httpClient,
			baseURL+BodyServiceUpdateBodyRawProcedure,
			connect.WithSchema(bodyServiceUpdateBodyRawMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// bodyServiceClient implements BodyServiceClient.
type bodyServiceClient struct {
	createBodyForm       *connect.Client[v1.CreateBodyFormRequest, v1.CreateBodyFormResponse]
	updateBodyForm       *connect.Client[v1.UpdateBodyFormRequest, v1.UpdateBodyFormResponse]
	deleteBodyForm       *connect.Client[v1.DeleteBodyFormRequest, v1.DeleteBodyFormResponse]
	createBodyUrlEncoded *connect.Client[v1.CreateBodyUrlEncodedRequest, v1.CreateBodyUrlEncodedResponse]
	updateBodyUrlEncoded *connect.Client[v1.UpdateBodyUrlEncodedRequest, v1.UpdateBodyUrlEncodedResponse]
	deleteBodyUrlEncoded *connect.Client[v1.DeleteBodyUrlEncodedRequest, v1.DeleteBodyUrlEncodedResponse]
	updateBodyRaw        *connect.Client[v1.UpdateBodyRawRequest, v1.UpdateBodyRawResponse]
}

// CreateBodyForm calls body.v1.BodyService.CreateBodyForm.
func (c *bodyServiceClient) CreateBodyForm(ctx context.Context, req *connect.Request[v1.CreateBodyFormRequest]) (*connect.Response[v1.CreateBodyFormResponse], error) {
	return c.createBodyForm.CallUnary(ctx, req)
}

// UpdateBodyForm calls body.v1.BodyService.UpdateBodyForm.
func (c *bodyServiceClient) UpdateBodyForm(ctx context.Context, req *connect.Request[v1.UpdateBodyFormRequest]) (*connect.Response[v1.UpdateBodyFormResponse], error) {
	return c.updateBodyForm.CallUnary(ctx, req)
}

// DeleteBodyForm calls body.v1.BodyService.DeleteBodyForm.
func (c *bodyServiceClient) DeleteBodyForm(ctx context.Context, req *connect.Request[v1.DeleteBodyFormRequest]) (*connect.Response[v1.DeleteBodyFormResponse], error) {
	return c.deleteBodyForm.CallUnary(ctx, req)
}

// CreateBodyUrlEncoded calls body.v1.BodyService.CreateBodyUrlEncoded.
func (c *bodyServiceClient) CreateBodyUrlEncoded(ctx context.Context, req *connect.Request[v1.CreateBodyUrlEncodedRequest]) (*connect.Response[v1.CreateBodyUrlEncodedResponse], error) {
	return c.createBodyUrlEncoded.CallUnary(ctx, req)
}

// UpdateBodyUrlEncoded calls body.v1.BodyService.UpdateBodyUrlEncoded.
func (c *bodyServiceClient) UpdateBodyUrlEncoded(ctx context.Context, req *connect.Request[v1.UpdateBodyUrlEncodedRequest]) (*connect.Response[v1.UpdateBodyUrlEncodedResponse], error) {
	return c.updateBodyUrlEncoded.CallUnary(ctx, req)
}

// DeleteBodyUrlEncoded calls body.v1.BodyService.DeleteBodyUrlEncoded.
func (c *bodyServiceClient) DeleteBodyUrlEncoded(ctx context.Context, req *connect.Request[v1.DeleteBodyUrlEncodedRequest]) (*connect.Response[v1.DeleteBodyUrlEncodedResponse], error) {
	return c.deleteBodyUrlEncoded.CallUnary(ctx, req)
}

// UpdateBodyRaw calls body.v1.BodyService.UpdateBodyRaw.
func (c *bodyServiceClient) UpdateBodyRaw(ctx context.Context, req *connect.Request[v1.UpdateBodyRawRequest]) (*connect.Response[v1.UpdateBodyRawResponse], error) {
	return c.updateBodyRaw.CallUnary(ctx, req)
}

// BodyServiceHandler is an implementation of the body.v1.BodyService service.
type BodyServiceHandler interface {
	// Body Form
	CreateBodyForm(context.Context, *connect.Request[v1.CreateBodyFormRequest]) (*connect.Response[v1.CreateBodyFormResponse], error)
	UpdateBodyForm(context.Context, *connect.Request[v1.UpdateBodyFormRequest]) (*connect.Response[v1.UpdateBodyFormResponse], error)
	DeleteBodyForm(context.Context, *connect.Request[v1.DeleteBodyFormRequest]) (*connect.Response[v1.DeleteBodyFormResponse], error)
	// Body URL Encoded
	CreateBodyUrlEncoded(context.Context, *connect.Request[v1.CreateBodyUrlEncodedRequest]) (*connect.Response[v1.CreateBodyUrlEncodedResponse], error)
	UpdateBodyUrlEncoded(context.Context, *connect.Request[v1.UpdateBodyUrlEncodedRequest]) (*connect.Response[v1.UpdateBodyUrlEncodedResponse], error)
	DeleteBodyUrlEncoded(context.Context, *connect.Request[v1.DeleteBodyUrlEncodedRequest]) (*connect.Response[v1.DeleteBodyUrlEncodedResponse], error)
	// Body Raw
	UpdateBodyRaw(context.Context, *connect.Request[v1.UpdateBodyRawRequest]) (*connect.Response[v1.UpdateBodyRawResponse], error)
}

// NewBodyServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBodyServiceHandler(svc BodyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bodyServiceCreateBodyFormHandler := connect.NewUnaryHandler(
		BodyServiceCreateBodyFormProcedure,
		svc.CreateBodyForm,
		connect.WithSchema(bodyServiceCreateBodyFormMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	bodyServiceUpdateBodyFormHandler := connect.NewUnaryHandler(
		BodyServiceUpdateBodyFormProcedure,
		svc.UpdateBodyForm,
		connect.WithSchema(bodyServiceUpdateBodyFormMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	bodyServiceDeleteBodyFormHandler := connect.NewUnaryHandler(
		BodyServiceDeleteBodyFormProcedure,
		svc.DeleteBodyForm,
		connect.WithSchema(bodyServiceDeleteBodyFormMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	bodyServiceCreateBodyUrlEncodedHandler := connect.NewUnaryHandler(
		BodyServiceCreateBodyUrlEncodedProcedure,
		svc.CreateBodyUrlEncoded,
		connect.WithSchema(bodyServiceCreateBodyUrlEncodedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	bodyServiceUpdateBodyUrlEncodedHandler := connect.NewUnaryHandler(
		BodyServiceUpdateBodyUrlEncodedProcedure,
		svc.UpdateBodyUrlEncoded,
		connect.WithSchema(bodyServiceUpdateBodyUrlEncodedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	bodyServiceDeleteBodyUrlEncodedHandler := connect.NewUnaryHandler(
		BodyServiceDeleteBodyUrlEncodedProcedure,
		svc.DeleteBodyUrlEncoded,
		connect.WithSchema(bodyServiceDeleteBodyUrlEncodedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	bodyServiceUpdateBodyRawHandler := connect.NewUnaryHandler(
		BodyServiceUpdateBodyRawProcedure,
		svc.UpdateBodyRaw,
		connect.WithSchema(bodyServiceUpdateBodyRawMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/body.v1.BodyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BodyServiceCreateBodyFormProcedure:
			bodyServiceCreateBodyFormHandler.ServeHTTP(w, r)
		case BodyServiceUpdateBodyFormProcedure:
			bodyServiceUpdateBodyFormHandler.ServeHTTP(w, r)
		case BodyServiceDeleteBodyFormProcedure:
			bodyServiceDeleteBodyFormHandler.ServeHTTP(w, r)
		case BodyServiceCreateBodyUrlEncodedProcedure:
			bodyServiceCreateBodyUrlEncodedHandler.ServeHTTP(w, r)
		case BodyServiceUpdateBodyUrlEncodedProcedure:
			bodyServiceUpdateBodyUrlEncodedHandler.ServeHTTP(w, r)
		case BodyServiceDeleteBodyUrlEncodedProcedure:
			bodyServiceDeleteBodyUrlEncodedHandler.ServeHTTP(w, r)
		case BodyServiceUpdateBodyRawProcedure:
			bodyServiceUpdateBodyRawHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBodyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBodyServiceHandler struct{}

func (UnimplementedBodyServiceHandler) CreateBodyForm(context.Context, *connect.Request[v1.CreateBodyFormRequest]) (*connect.Response[v1.CreateBodyFormResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("body.v1.BodyService.CreateBodyForm is not implemented"))
}

func (UnimplementedBodyServiceHandler) UpdateBodyForm(context.Context, *connect.Request[v1.UpdateBodyFormRequest]) (*connect.Response[v1.UpdateBodyFormResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("body.v1.BodyService.UpdateBodyForm is not implemented"))
}

func (UnimplementedBodyServiceHandler) DeleteBodyForm(context.Context, *connect.Request[v1.DeleteBodyFormRequest]) (*connect.Response[v1.DeleteBodyFormResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("body.v1.BodyService.DeleteBodyForm is not implemented"))
}

func (UnimplementedBodyServiceHandler) CreateBodyUrlEncoded(context.Context, *connect.Request[v1.CreateBodyUrlEncodedRequest]) (*connect.Response[v1.CreateBodyUrlEncodedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("body.v1.BodyService.CreateBodyUrlEncoded is not implemented"))
}

func (UnimplementedBodyServiceHandler) UpdateBodyUrlEncoded(context.Context, *connect.Request[v1.UpdateBodyUrlEncodedRequest]) (*connect.Response[v1.UpdateBodyUrlEncodedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("body.v1.BodyService.UpdateBodyUrlEncoded is not implemented"))
}

func (UnimplementedBodyServiceHandler) DeleteBodyUrlEncoded(context.Context, *connect.Request[v1.DeleteBodyUrlEncodedRequest]) (*connect.Response[v1.DeleteBodyUrlEncodedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("body.v1.BodyService.DeleteBodyUrlEncoded is not implemented"))
}

func (UnimplementedBodyServiceHandler) UpdateBodyRaw(context.Context, *connect.Request[v1.UpdateBodyRawRequest]) (*connect.Response[v1.UpdateBodyRawResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("body.v1.BodyService.UpdateBodyRaw is not implemented"))
}
