name: MovableRepository Migration Validation

on:
  pull_request:
    paths:
      - 'packages/server/pkg/movable/**'
      - 'packages/server/pkg/service/**/repository.go'
      - 'packages/server/internal/api/**/move*'
      - '.github/workflows/movable-repository-validation.yml'
  push:
    branches:
      - main
      - develop
    paths:
      - 'packages/server/pkg/movable/**'
  schedule:
    # Run comprehensive regression tests nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: false
        default: 'full'
        type: choice
        options:
          - 'quick'
          - 'full'
          - 'regression'
          - 'benchmark'
      baseline_update:
        description: 'Update performance baseline'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.54'
  TEST_DATABASE_URL: 'file:test.db?cache=shared&mode=memory'

jobs:
  # Fast validation for pull requests
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.inputs.test_scope != 'full'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: packages/server/go.sum
          
      - name: Setup Nix
        uses: DeterminateSystems/nix-installer-action@v7
        
      - name: Setup Nix Cache  
        uses: DeterminateSystems/magic-nix-cache-action@v2
        
      - name: Run compilation tests
        working-directory: packages/server
        run: |
          nix develop -c go test -run TestCompilation ./pkg/movable/
          
      - name: Run basic functional tests
        working-directory: packages/server
        run: |
          nix develop -c go test -run TestFunctionalEquivalence -short ./pkg/movable/
          
      - name: Run edge case smoke tests
        working-directory: packages/server
        run: |
          nix develop -c go test -run TestEdgeCase -short ./pkg/movable/

  # Comprehensive validation for main branch and full runs
  comprehensive-validation:
    name: Comprehensive Validation
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      github.event_name == 'schedule' ||
      github.event.inputs.test_scope == 'full'
    timeout-minutes: 45
    
    strategy:
      matrix:
        test_category:
          - 'functional_equivalence'
          - 'performance_benchmarks'
          - 'edge_cases'
          - 'integration_tests'
          - 'regression_detection'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for regression analysis
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: packages/server/go.sum
          
      - name: Setup Nix
        uses: DeterminateSystems/nix-installer-action@v7
        
      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v2
        
      - name: Setup test database
        working-directory: packages/server
        run: |
          nix develop -c go run cmd/server/server.go migrate --database-url "${{ env.TEST_DATABASE_URL }}"
          
      - name: Run functional equivalence tests
        if: matrix.test_category == 'functional_equivalence'
        working-directory: packages/server
        run: |
          nix develop -c go test -v -run TestFunctionalEquivalence ./pkg/movable/ \
            -coverprofile=coverage-functional.out \
            -coverpkg=./pkg/movable/... \
            -timeout=15m
            
      - name: Run performance benchmarks
        if: matrix.test_category == 'performance_benchmarks'
        working-directory: packages/server
        run: |
          # Run benchmarks with memory profiling
          nix develop -c go test -bench=BenchmarkComparative -benchmem \
            -benchtime=10s -count=5 ./pkg/movable/ \
            -cpuprofile=cpu.prof -memprofile=mem.prof \
            -timeout=20m > benchmark_results.txt
            
      - name: Run edge case validation
        if: matrix.test_category == 'edge_cases'
        working-directory: packages/server
        run: |
          nix develop -c go test -v -run TestEdgeCase ./pkg/movable/ \
            -coverprofile=coverage-edges.out \
            -timeout=20m
            
      - name: Run integration tests
        if: matrix.test_category == 'integration_tests'
        working-directory: packages/server
        run: |
          nix develop -c go test -v -run TestIntegration ./pkg/movable/ \
            -coverprofile=coverage-integration.out \
            -timeout=25m
            
      - name: Run regression detection
        if: matrix.test_category == 'regression_detection'
        working-directory: packages/server
        run: |
          nix develop -c go test -v -run TestRegression ./pkg/movable/ \
            -timeout=10m
            
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: contains(matrix.test_category, 'tests')
        with:
          name: coverage-${{ matrix.test_category }}
          path: packages/server/coverage-*.out
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        if: matrix.test_category == 'performance_benchmarks'
        with:
          name: benchmark-results
          path: |
            packages/server/benchmark_results.txt
            packages/server/*.prof
            
      - name: Store regression data
        if: matrix.test_category == 'regression_detection'
        working-directory: packages/server
        run: |
          # Store regression results for trend analysis
          mkdir -p .regression-data
          cp testdata/regression/*.json .regression-data/ 2>/dev/null || true
          
      - name: Upload regression data
        uses: actions/upload-artifact@v3
        if: matrix.test_category == 'regression_detection'
        with:
          name: regression-data
          path: packages/server/.regression-data/

  # Regression analysis job
  regression-analysis:
    name: Regression Analysis
    runs-on: ubuntu-latest
    needs: comprehensive-validation
    if: |
      github.event_name == 'push' || 
      github.event_name == 'schedule' ||
      github.event.inputs.test_scope == 'regression'
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Download regression data
        uses: actions/download-artifact@v3
        with:
          name: regression-data
          path: packages/server/.regression-data/
          
      - name: Download benchmark results
        uses: actions/download-artifact@v3
        with:
          name: benchmark-results
          path: packages/server/
          
      - name: Setup Nix
        uses: DeterminateSystems/nix-installer-action@v7
        
      - name: Analyze regression trends
        working-directory: packages/server
        run: |
          nix develop -c go run scripts/analyze_regression_trends.go \
            -data-dir=.regression-data \
            -benchmark-file=benchmark_results.txt \
            -output=regression_analysis.json
            
      - name: Generate regression report
        working-directory: packages/server
        run: |
          nix develop -c go run scripts/generate_regression_report.go \
            -analysis-file=regression_analysis.json \
            -output=regression_report.md
            
      - name: Check for critical regressions
        working-directory: packages/server
        run: |
          # Fail the build if critical regressions are found
          if grep -q "BLOCKING\|CRITICAL" regression_report.md; then
            echo "::error::Critical regressions detected"
            cat regression_report.md
            exit 1
          fi
          
      - name: Comment regression report on PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('packages/server/regression_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“Š MovableRepository Regression Analysis\n\n${report}`
            });
            
      - name: Upload regression report
        uses: actions/upload-artifact@v3
        with:
          name: regression-report
          path: packages/server/regression_report.md

  # Performance baseline update
  baseline-update:
    name: Update Performance Baseline
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      github.event.inputs.baseline_update == 'true'
    needs: comprehensive-validation
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Setup Nix
        uses: DeterminateSystems/nix-installer-action@v7
        
      - name: Download benchmark results
        uses: actions/download-artifact@v3
        with:
          name: benchmark-results
          path: packages/server/
          
      - name: Update performance baseline
        working-directory: packages/server
        run: |
          nix develop -c go run scripts/update_baseline.go \
            -benchmark-file=benchmark_results.txt \
            -baseline-dir=testdata/regression \
            -commit-hash=${{ github.sha }}
            
      - name: Commit updated baseline
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: update MovableRepository performance baseline"
          file_pattern: packages/server/testdata/regression/baseline_*.json

  # Quality gate check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [comprehensive-validation, regression-analysis]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Check quality criteria
        run: |
          # Initialize quality gate status
          QUALITY_PASSED=true
          
          # Check if comprehensive validation passed
          if [ "${{ needs.comprehensive-validation.result }}" != "success" ]; then
            echo "::error::Comprehensive validation failed"
            QUALITY_PASSED=false
          fi
          
          # Check if regression analysis passed  
          if [ "${{ needs.regression-analysis.result }}" != "success" ] && [ "${{ needs.regression-analysis.result }}" != "skipped" ]; then
            echo "::error::Regression analysis failed"
            QUALITY_PASSED=false
          fi
          
          # Check coverage requirements
          if [ -f coverage-functional/coverage-functional.out ]; then
            COVERAGE=$(go tool cover -func=coverage-functional/coverage-functional.out | grep total | awk '{print $3}' | sed 's/%//')
            if (( $(echo "$COVERAGE < 95" | bc -l) )); then
              echo "::error::Functional test coverage $COVERAGE% below 95% requirement"
              QUALITY_PASSED=false
            fi
          fi
          
          # Final quality gate decision
          if [ "$QUALITY_PASSED" = "false" ]; then
            echo "::error::Quality gate failed"
            exit 1
          else
            echo "::notice::Quality gate passed"
          fi
          
      - name: Set deployment readiness
        if: github.ref == 'refs/heads/main'
        run: |
          echo "DEPLOYMENT_READY=true" >> $GITHUB_OUTPUT
          echo "::notice::MovableRepository migration is deployment ready"

  # Notification job for important events
  notify:
    name: Notify Stakeholders
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: |
      always() && 
      (needs.quality-gate.result == 'failure' || 
       (github.ref == 'refs/heads/main' && needs.quality-gate.result == 'success'))
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: needs.quality-gate.result == 'failure'
        with:
          status: failure
          text: |
            ðŸš¨ MovableRepository validation failed!
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Send success notification
        uses: 8398a7/action-slack@v3
        if: needs.quality-gate.result == 'success' && github.ref == 'refs/heads/main'
        with:
          status: success
          text: |
            âœ… MovableRepository validation passed!
            All tests passed and ready for deployment.
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# Reusable workflow for emergency validation
  emergency-validation:
    name: Emergency Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope == 'emergency'
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Setup Nix
        uses: DeterminateSystems/nix-installer-action@v7
        
      - name: Run critical path tests only
        working-directory: packages/server
        run: |
          # Run only the most critical tests for emergency validation
          nix develop -c go test -run "TestCritical|TestUpdatePosition|TestUpdatePositions" \
            -short -timeout=3m ./pkg/movable/
            
      - name: Validate core functionality
        working-directory: packages/server
        run: |
          # Quick smoke test of core MovableRepository methods
          nix develop -c go test -run TestBasicOperations -timeout=2m ./pkg/movable/