// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: nodemaster/v1/nodemaster.proto

package nodemasterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "devtools-services/gen/nodemaster/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeMasterServiceName is the fully-qualified name of the NodeMasterService service.
	NodeMasterServiceName = "nodemaster.v1.NodeMasterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeMasterServiceRunProcedure is the fully-qualified name of the NodeMasterService's Run RPC.
	NodeMasterServiceRunProcedure = "/nodemaster.v1.NodeMasterService/Run"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	nodeMasterServiceServiceDescriptor   = v1.File_nodemaster_v1_nodemaster_proto.Services().ByName("NodeMasterService")
	nodeMasterServiceRunMethodDescriptor = nodeMasterServiceServiceDescriptor.Methods().ByName("Run")
)

// NodeMasterServiceClient is a client for the nodemaster.v1.NodeMasterService service.
type NodeMasterServiceClient interface {
	Run(context.Context, *connect.Request[v1.NodeMasterServiceRunRequest]) (*connect.Response[v1.NodeMasterServiceRunResponse], error)
}

// NewNodeMasterServiceClient constructs a client for the nodemaster.v1.NodeMasterService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeMasterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeMasterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &nodeMasterServiceClient{
		run: connect.NewClient[v1.NodeMasterServiceRunRequest, v1.NodeMasterServiceRunResponse](
			httpClient,
			baseURL+NodeMasterServiceRunProcedure,
			connect.WithSchema(nodeMasterServiceRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeMasterServiceClient implements NodeMasterServiceClient.
type nodeMasterServiceClient struct {
	run *connect.Client[v1.NodeMasterServiceRunRequest, v1.NodeMasterServiceRunResponse]
}

// Run calls nodemaster.v1.NodeMasterService.Run.
func (c *nodeMasterServiceClient) Run(ctx context.Context, req *connect.Request[v1.NodeMasterServiceRunRequest]) (*connect.Response[v1.NodeMasterServiceRunResponse], error) {
	return c.run.CallUnary(ctx, req)
}

// NodeMasterServiceHandler is an implementation of the nodemaster.v1.NodeMasterService service.
type NodeMasterServiceHandler interface {
	Run(context.Context, *connect.Request[v1.NodeMasterServiceRunRequest]) (*connect.Response[v1.NodeMasterServiceRunResponse], error)
}

// NewNodeMasterServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeMasterServiceHandler(svc NodeMasterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeMasterServiceRunHandler := connect.NewUnaryHandler(
		NodeMasterServiceRunProcedure,
		svc.Run,
		connect.WithSchema(nodeMasterServiceRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nodemaster.v1.NodeMasterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeMasterServiceRunProcedure:
			nodeMasterServiceRunHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeMasterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeMasterServiceHandler struct{}

func (UnimplementedNodeMasterServiceHandler) Run(context.Context, *connect.Request[v1.NodeMasterServiceRunRequest]) (*connect.Response[v1.NodeMasterServiceRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nodemaster.v1.NodeMasterService.Run is not implemented"))
}
