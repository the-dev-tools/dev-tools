// Generated by Microsoft TypeSpec

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: collection/item/example/v1/examplev1.proto

package examplev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-spec/dist/buf/go/collection/item/example/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExampleServiceName is the fully-qualified name of the ExampleService service.
	ExampleServiceName = "collection.item.example.v1.examplev1.ExampleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExampleServiceExampleListProcedure is the fully-qualified name of the ExampleService's
	// ExampleList RPC.
	ExampleServiceExampleListProcedure = "/collection.item.example.v1.examplev1.ExampleService/ExampleList"
	// ExampleServiceExampleGetProcedure is the fully-qualified name of the ExampleService's ExampleGet
	// RPC.
	ExampleServiceExampleGetProcedure = "/collection.item.example.v1.examplev1.ExampleService/ExampleGet"
	// ExampleServiceExampleCreateProcedure is the fully-qualified name of the ExampleService's
	// ExampleCreate RPC.
	ExampleServiceExampleCreateProcedure = "/collection.item.example.v1.examplev1.ExampleService/ExampleCreate"
	// ExampleServiceExampleUpdateProcedure is the fully-qualified name of the ExampleService's
	// ExampleUpdate RPC.
	ExampleServiceExampleUpdateProcedure = "/collection.item.example.v1.examplev1.ExampleService/ExampleUpdate"
	// ExampleServiceExampleDeleteProcedure is the fully-qualified name of the ExampleService's
	// ExampleDelete RPC.
	ExampleServiceExampleDeleteProcedure = "/collection.item.example.v1.examplev1.ExampleService/ExampleDelete"
	// ExampleServiceExampleDuplicateProcedure is the fully-qualified name of the ExampleService's
	// ExampleDuplicate RPC.
	ExampleServiceExampleDuplicateProcedure = "/collection.item.example.v1.examplev1.ExampleService/ExampleDuplicate"
	// ExampleServiceExampleRunProcedure is the fully-qualified name of the ExampleService's ExampleRun
	// RPC.
	ExampleServiceExampleRunProcedure = "/collection.item.example.v1.examplev1.ExampleService/ExampleRun"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	exampleServiceServiceDescriptor                = v1.File_collection_item_example_v1_examplev1_proto.Services().ByName("ExampleService")
	exampleServiceExampleListMethodDescriptor      = exampleServiceServiceDescriptor.Methods().ByName("ExampleList")
	exampleServiceExampleGetMethodDescriptor       = exampleServiceServiceDescriptor.Methods().ByName("ExampleGet")
	exampleServiceExampleCreateMethodDescriptor    = exampleServiceServiceDescriptor.Methods().ByName("ExampleCreate")
	exampleServiceExampleUpdateMethodDescriptor    = exampleServiceServiceDescriptor.Methods().ByName("ExampleUpdate")
	exampleServiceExampleDeleteMethodDescriptor    = exampleServiceServiceDescriptor.Methods().ByName("ExampleDelete")
	exampleServiceExampleDuplicateMethodDescriptor = exampleServiceServiceDescriptor.Methods().ByName("ExampleDuplicate")
	exampleServiceExampleRunMethodDescriptor       = exampleServiceServiceDescriptor.Methods().ByName("ExampleRun")
)

// ExampleServiceClient is a client for the collection.item.example.v1.examplev1.ExampleService
// service.
type ExampleServiceClient interface {
	ExampleList(context.Context, *connect.Request[v1.ExampleListRequest]) (*connect.Response[v1.ExampleListResponse], error)
	ExampleGet(context.Context, *connect.Request[v1.ExampleGetRequest]) (*connect.Response[v1.ExampleGetResponse], error)
	ExampleCreate(context.Context, *connect.Request[v1.ExampleCreateRequest]) (*connect.Response[v1.ExampleCreateResponse], error)
	ExampleUpdate(context.Context, *connect.Request[v1.ExampleUpdateRequest]) (*connect.Response[v1.ExampleUpdateResponse], error)
	ExampleDelete(context.Context, *connect.Request[v1.ExampleDeleteRequest]) (*connect.Response[v1.ExampleDeleteResponse], error)
	ExampleDuplicate(context.Context, *connect.Request[v1.ExampleDuplicateRequest]) (*connect.Response[v1.ExampleDuplicateResponse], error)
	ExampleRun(context.Context, *connect.Request[v1.ExampleRunRequest]) (*connect.Response[v1.ExampleRunResponse], error)
}

// NewExampleServiceClient constructs a client for the
// collection.item.example.v1.examplev1.ExampleService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExampleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &exampleServiceClient{
		exampleList: connect.NewClient[v1.ExampleListRequest, v1.ExampleListResponse](
			httpClient,
			baseURL+ExampleServiceExampleListProcedure,
			connect.WithSchema(exampleServiceExampleListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exampleGet: connect.NewClient[v1.ExampleGetRequest, v1.ExampleGetResponse](
			httpClient,
			baseURL+ExampleServiceExampleGetProcedure,
			connect.WithSchema(exampleServiceExampleGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exampleCreate: connect.NewClient[v1.ExampleCreateRequest, v1.ExampleCreateResponse](
			httpClient,
			baseURL+ExampleServiceExampleCreateProcedure,
			connect.WithSchema(exampleServiceExampleCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exampleUpdate: connect.NewClient[v1.ExampleUpdateRequest, v1.ExampleUpdateResponse](
			httpClient,
			baseURL+ExampleServiceExampleUpdateProcedure,
			connect.WithSchema(exampleServiceExampleUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exampleDelete: connect.NewClient[v1.ExampleDeleteRequest, v1.ExampleDeleteResponse](
			httpClient,
			baseURL+ExampleServiceExampleDeleteProcedure,
			connect.WithSchema(exampleServiceExampleDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exampleDuplicate: connect.NewClient[v1.ExampleDuplicateRequest, v1.ExampleDuplicateResponse](
			httpClient,
			baseURL+ExampleServiceExampleDuplicateProcedure,
			connect.WithSchema(exampleServiceExampleDuplicateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exampleRun: connect.NewClient[v1.ExampleRunRequest, v1.ExampleRunResponse](
			httpClient,
			baseURL+ExampleServiceExampleRunProcedure,
			connect.WithSchema(exampleServiceExampleRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// exampleServiceClient implements ExampleServiceClient.
type exampleServiceClient struct {
	exampleList      *connect.Client[v1.ExampleListRequest, v1.ExampleListResponse]
	exampleGet       *connect.Client[v1.ExampleGetRequest, v1.ExampleGetResponse]
	exampleCreate    *connect.Client[v1.ExampleCreateRequest, v1.ExampleCreateResponse]
	exampleUpdate    *connect.Client[v1.ExampleUpdateRequest, v1.ExampleUpdateResponse]
	exampleDelete    *connect.Client[v1.ExampleDeleteRequest, v1.ExampleDeleteResponse]
	exampleDuplicate *connect.Client[v1.ExampleDuplicateRequest, v1.ExampleDuplicateResponse]
	exampleRun       *connect.Client[v1.ExampleRunRequest, v1.ExampleRunResponse]
}

// ExampleList calls collection.item.example.v1.examplev1.ExampleService.ExampleList.
func (c *exampleServiceClient) ExampleList(ctx context.Context, req *connect.Request[v1.ExampleListRequest]) (*connect.Response[v1.ExampleListResponse], error) {
	return c.exampleList.CallUnary(ctx, req)
}

// ExampleGet calls collection.item.example.v1.examplev1.ExampleService.ExampleGet.
func (c *exampleServiceClient) ExampleGet(ctx context.Context, req *connect.Request[v1.ExampleGetRequest]) (*connect.Response[v1.ExampleGetResponse], error) {
	return c.exampleGet.CallUnary(ctx, req)
}

// ExampleCreate calls collection.item.example.v1.examplev1.ExampleService.ExampleCreate.
func (c *exampleServiceClient) ExampleCreate(ctx context.Context, req *connect.Request[v1.ExampleCreateRequest]) (*connect.Response[v1.ExampleCreateResponse], error) {
	return c.exampleCreate.CallUnary(ctx, req)
}

// ExampleUpdate calls collection.item.example.v1.examplev1.ExampleService.ExampleUpdate.
func (c *exampleServiceClient) ExampleUpdate(ctx context.Context, req *connect.Request[v1.ExampleUpdateRequest]) (*connect.Response[v1.ExampleUpdateResponse], error) {
	return c.exampleUpdate.CallUnary(ctx, req)
}

// ExampleDelete calls collection.item.example.v1.examplev1.ExampleService.ExampleDelete.
func (c *exampleServiceClient) ExampleDelete(ctx context.Context, req *connect.Request[v1.ExampleDeleteRequest]) (*connect.Response[v1.ExampleDeleteResponse], error) {
	return c.exampleDelete.CallUnary(ctx, req)
}

// ExampleDuplicate calls collection.item.example.v1.examplev1.ExampleService.ExampleDuplicate.
func (c *exampleServiceClient) ExampleDuplicate(ctx context.Context, req *connect.Request[v1.ExampleDuplicateRequest]) (*connect.Response[v1.ExampleDuplicateResponse], error) {
	return c.exampleDuplicate.CallUnary(ctx, req)
}

// ExampleRun calls collection.item.example.v1.examplev1.ExampleService.ExampleRun.
func (c *exampleServiceClient) ExampleRun(ctx context.Context, req *connect.Request[v1.ExampleRunRequest]) (*connect.Response[v1.ExampleRunResponse], error) {
	return c.exampleRun.CallUnary(ctx, req)
}

// ExampleServiceHandler is an implementation of the
// collection.item.example.v1.examplev1.ExampleService service.
type ExampleServiceHandler interface {
	ExampleList(context.Context, *connect.Request[v1.ExampleListRequest]) (*connect.Response[v1.ExampleListResponse], error)
	ExampleGet(context.Context, *connect.Request[v1.ExampleGetRequest]) (*connect.Response[v1.ExampleGetResponse], error)
	ExampleCreate(context.Context, *connect.Request[v1.ExampleCreateRequest]) (*connect.Response[v1.ExampleCreateResponse], error)
	ExampleUpdate(context.Context, *connect.Request[v1.ExampleUpdateRequest]) (*connect.Response[v1.ExampleUpdateResponse], error)
	ExampleDelete(context.Context, *connect.Request[v1.ExampleDeleteRequest]) (*connect.Response[v1.ExampleDeleteResponse], error)
	ExampleDuplicate(context.Context, *connect.Request[v1.ExampleDuplicateRequest]) (*connect.Response[v1.ExampleDuplicateResponse], error)
	ExampleRun(context.Context, *connect.Request[v1.ExampleRunRequest]) (*connect.Response[v1.ExampleRunResponse], error)
}

// NewExampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExampleServiceHandler(svc ExampleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	exampleServiceExampleListHandler := connect.NewUnaryHandler(
		ExampleServiceExampleListProcedure,
		svc.ExampleList,
		connect.WithSchema(exampleServiceExampleListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceExampleGetHandler := connect.NewUnaryHandler(
		ExampleServiceExampleGetProcedure,
		svc.ExampleGet,
		connect.WithSchema(exampleServiceExampleGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceExampleCreateHandler := connect.NewUnaryHandler(
		ExampleServiceExampleCreateProcedure,
		svc.ExampleCreate,
		connect.WithSchema(exampleServiceExampleCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceExampleUpdateHandler := connect.NewUnaryHandler(
		ExampleServiceExampleUpdateProcedure,
		svc.ExampleUpdate,
		connect.WithSchema(exampleServiceExampleUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceExampleDeleteHandler := connect.NewUnaryHandler(
		ExampleServiceExampleDeleteProcedure,
		svc.ExampleDelete,
		connect.WithSchema(exampleServiceExampleDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceExampleDuplicateHandler := connect.NewUnaryHandler(
		ExampleServiceExampleDuplicateProcedure,
		svc.ExampleDuplicate,
		connect.WithSchema(exampleServiceExampleDuplicateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceExampleRunHandler := connect.NewUnaryHandler(
		ExampleServiceExampleRunProcedure,
		svc.ExampleRun,
		connect.WithSchema(exampleServiceExampleRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/collection.item.example.v1.examplev1.ExampleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExampleServiceExampleListProcedure:
			exampleServiceExampleListHandler.ServeHTTP(w, r)
		case ExampleServiceExampleGetProcedure:
			exampleServiceExampleGetHandler.ServeHTTP(w, r)
		case ExampleServiceExampleCreateProcedure:
			exampleServiceExampleCreateHandler.ServeHTTP(w, r)
		case ExampleServiceExampleUpdateProcedure:
			exampleServiceExampleUpdateHandler.ServeHTTP(w, r)
		case ExampleServiceExampleDeleteProcedure:
			exampleServiceExampleDeleteHandler.ServeHTTP(w, r)
		case ExampleServiceExampleDuplicateProcedure:
			exampleServiceExampleDuplicateHandler.ServeHTTP(w, r)
		case ExampleServiceExampleRunProcedure:
			exampleServiceExampleRunHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExampleServiceHandler struct{}

func (UnimplementedExampleServiceHandler) ExampleList(context.Context, *connect.Request[v1.ExampleListRequest]) (*connect.Response[v1.ExampleListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.example.v1.examplev1.ExampleService.ExampleList is not implemented"))
}

func (UnimplementedExampleServiceHandler) ExampleGet(context.Context, *connect.Request[v1.ExampleGetRequest]) (*connect.Response[v1.ExampleGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.example.v1.examplev1.ExampleService.ExampleGet is not implemented"))
}

func (UnimplementedExampleServiceHandler) ExampleCreate(context.Context, *connect.Request[v1.ExampleCreateRequest]) (*connect.Response[v1.ExampleCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.example.v1.examplev1.ExampleService.ExampleCreate is not implemented"))
}

func (UnimplementedExampleServiceHandler) ExampleUpdate(context.Context, *connect.Request[v1.ExampleUpdateRequest]) (*connect.Response[v1.ExampleUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.example.v1.examplev1.ExampleService.ExampleUpdate is not implemented"))
}

func (UnimplementedExampleServiceHandler) ExampleDelete(context.Context, *connect.Request[v1.ExampleDeleteRequest]) (*connect.Response[v1.ExampleDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.example.v1.examplev1.ExampleService.ExampleDelete is not implemented"))
}

func (UnimplementedExampleServiceHandler) ExampleDuplicate(context.Context, *connect.Request[v1.ExampleDuplicateRequest]) (*connect.Response[v1.ExampleDuplicateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.example.v1.examplev1.ExampleService.ExampleDuplicate is not implemented"))
}

func (UnimplementedExampleServiceHandler) ExampleRun(context.Context, *connect.Request[v1.ExampleRunRequest]) (*connect.Response[v1.ExampleRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.example.v1.examplev1.ExampleService.ExampleRun is not implemented"))
}
