// Generated by Microsoft TypeSpec

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: variable/v1/variable.proto

package variablev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-spec/dist/buf/go/variable/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VariableServiceName is the fully-qualified name of the VariableService service.
	VariableServiceName = "variable.v1.VariableService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VariableServiceVariableListProcedure is the fully-qualified name of the VariableService's
	// VariableList RPC.
	VariableServiceVariableListProcedure = "/variable.v1.VariableService/VariableList"
	// VariableServiceVariableGetProcedure is the fully-qualified name of the VariableService's
	// VariableGet RPC.
	VariableServiceVariableGetProcedure = "/variable.v1.VariableService/VariableGet"
	// VariableServiceVariableCreateProcedure is the fully-qualified name of the VariableService's
	// VariableCreate RPC.
	VariableServiceVariableCreateProcedure = "/variable.v1.VariableService/VariableCreate"
	// VariableServiceVariableUpdateProcedure is the fully-qualified name of the VariableService's
	// VariableUpdate RPC.
	VariableServiceVariableUpdateProcedure = "/variable.v1.VariableService/VariableUpdate"
	// VariableServiceVariableDeleteProcedure is the fully-qualified name of the VariableService's
	// VariableDelete RPC.
	VariableServiceVariableDeleteProcedure = "/variable.v1.VariableService/VariableDelete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	variableServiceServiceDescriptor              = v1.File_variable_v1_variable_proto.Services().ByName("VariableService")
	variableServiceVariableListMethodDescriptor   = variableServiceServiceDescriptor.Methods().ByName("VariableList")
	variableServiceVariableGetMethodDescriptor    = variableServiceServiceDescriptor.Methods().ByName("VariableGet")
	variableServiceVariableCreateMethodDescriptor = variableServiceServiceDescriptor.Methods().ByName("VariableCreate")
	variableServiceVariableUpdateMethodDescriptor = variableServiceServiceDescriptor.Methods().ByName("VariableUpdate")
	variableServiceVariableDeleteMethodDescriptor = variableServiceServiceDescriptor.Methods().ByName("VariableDelete")
)

// VariableServiceClient is a client for the variable.v1.VariableService service.
type VariableServiceClient interface {
	VariableList(context.Context, *connect.Request[v1.VariableListRequest]) (*connect.Response[v1.VariableListResponse], error)
	VariableGet(context.Context, *connect.Request[v1.VariableGetRequest]) (*connect.Response[v1.VariableGetResponse], error)
	VariableCreate(context.Context, *connect.Request[v1.VariableCreateRequest]) (*connect.Response[v1.VariableCreateResponse], error)
	VariableUpdate(context.Context, *connect.Request[v1.VariableUpdateRequest]) (*connect.Response[v1.VariableUpdateResponse], error)
	VariableDelete(context.Context, *connect.Request[v1.VariableDeleteRequest]) (*connect.Response[v1.VariableDeleteResponse], error)
}

// NewVariableServiceClient constructs a client for the variable.v1.VariableService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVariableServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VariableServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &variableServiceClient{
		variableList: connect.NewClient[v1.VariableListRequest, v1.VariableListResponse](
			httpClient,
			baseURL+VariableServiceVariableListProcedure,
			connect.WithSchema(variableServiceVariableListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		variableGet: connect.NewClient[v1.VariableGetRequest, v1.VariableGetResponse](
			httpClient,
			baseURL+VariableServiceVariableGetProcedure,
			connect.WithSchema(variableServiceVariableGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		variableCreate: connect.NewClient[v1.VariableCreateRequest, v1.VariableCreateResponse](
			httpClient,
			baseURL+VariableServiceVariableCreateProcedure,
			connect.WithSchema(variableServiceVariableCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		variableUpdate: connect.NewClient[v1.VariableUpdateRequest, v1.VariableUpdateResponse](
			httpClient,
			baseURL+VariableServiceVariableUpdateProcedure,
			connect.WithSchema(variableServiceVariableUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		variableDelete: connect.NewClient[v1.VariableDeleteRequest, v1.VariableDeleteResponse](
			httpClient,
			baseURL+VariableServiceVariableDeleteProcedure,
			connect.WithSchema(variableServiceVariableDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// variableServiceClient implements VariableServiceClient.
type variableServiceClient struct {
	variableList   *connect.Client[v1.VariableListRequest, v1.VariableListResponse]
	variableGet    *connect.Client[v1.VariableGetRequest, v1.VariableGetResponse]
	variableCreate *connect.Client[v1.VariableCreateRequest, v1.VariableCreateResponse]
	variableUpdate *connect.Client[v1.VariableUpdateRequest, v1.VariableUpdateResponse]
	variableDelete *connect.Client[v1.VariableDeleteRequest, v1.VariableDeleteResponse]
}

// VariableList calls variable.v1.VariableService.VariableList.
func (c *variableServiceClient) VariableList(ctx context.Context, req *connect.Request[v1.VariableListRequest]) (*connect.Response[v1.VariableListResponse], error) {
	return c.variableList.CallUnary(ctx, req)
}

// VariableGet calls variable.v1.VariableService.VariableGet.
func (c *variableServiceClient) VariableGet(ctx context.Context, req *connect.Request[v1.VariableGetRequest]) (*connect.Response[v1.VariableGetResponse], error) {
	return c.variableGet.CallUnary(ctx, req)
}

// VariableCreate calls variable.v1.VariableService.VariableCreate.
func (c *variableServiceClient) VariableCreate(ctx context.Context, req *connect.Request[v1.VariableCreateRequest]) (*connect.Response[v1.VariableCreateResponse], error) {
	return c.variableCreate.CallUnary(ctx, req)
}

// VariableUpdate calls variable.v1.VariableService.VariableUpdate.
func (c *variableServiceClient) VariableUpdate(ctx context.Context, req *connect.Request[v1.VariableUpdateRequest]) (*connect.Response[v1.VariableUpdateResponse], error) {
	return c.variableUpdate.CallUnary(ctx, req)
}

// VariableDelete calls variable.v1.VariableService.VariableDelete.
func (c *variableServiceClient) VariableDelete(ctx context.Context, req *connect.Request[v1.VariableDeleteRequest]) (*connect.Response[v1.VariableDeleteResponse], error) {
	return c.variableDelete.CallUnary(ctx, req)
}

// VariableServiceHandler is an implementation of the variable.v1.VariableService service.
type VariableServiceHandler interface {
	VariableList(context.Context, *connect.Request[v1.VariableListRequest]) (*connect.Response[v1.VariableListResponse], error)
	VariableGet(context.Context, *connect.Request[v1.VariableGetRequest]) (*connect.Response[v1.VariableGetResponse], error)
	VariableCreate(context.Context, *connect.Request[v1.VariableCreateRequest]) (*connect.Response[v1.VariableCreateResponse], error)
	VariableUpdate(context.Context, *connect.Request[v1.VariableUpdateRequest]) (*connect.Response[v1.VariableUpdateResponse], error)
	VariableDelete(context.Context, *connect.Request[v1.VariableDeleteRequest]) (*connect.Response[v1.VariableDeleteResponse], error)
}

// NewVariableServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVariableServiceHandler(svc VariableServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	variableServiceVariableListHandler := connect.NewUnaryHandler(
		VariableServiceVariableListProcedure,
		svc.VariableList,
		connect.WithSchema(variableServiceVariableListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	variableServiceVariableGetHandler := connect.NewUnaryHandler(
		VariableServiceVariableGetProcedure,
		svc.VariableGet,
		connect.WithSchema(variableServiceVariableGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	variableServiceVariableCreateHandler := connect.NewUnaryHandler(
		VariableServiceVariableCreateProcedure,
		svc.VariableCreate,
		connect.WithSchema(variableServiceVariableCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	variableServiceVariableUpdateHandler := connect.NewUnaryHandler(
		VariableServiceVariableUpdateProcedure,
		svc.VariableUpdate,
		connect.WithSchema(variableServiceVariableUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	variableServiceVariableDeleteHandler := connect.NewUnaryHandler(
		VariableServiceVariableDeleteProcedure,
		svc.VariableDelete,
		connect.WithSchema(variableServiceVariableDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/variable.v1.VariableService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VariableServiceVariableListProcedure:
			variableServiceVariableListHandler.ServeHTTP(w, r)
		case VariableServiceVariableGetProcedure:
			variableServiceVariableGetHandler.ServeHTTP(w, r)
		case VariableServiceVariableCreateProcedure:
			variableServiceVariableCreateHandler.ServeHTTP(w, r)
		case VariableServiceVariableUpdateProcedure:
			variableServiceVariableUpdateHandler.ServeHTTP(w, r)
		case VariableServiceVariableDeleteProcedure:
			variableServiceVariableDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVariableServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVariableServiceHandler struct{}

func (UnimplementedVariableServiceHandler) VariableList(context.Context, *connect.Request[v1.VariableListRequest]) (*connect.Response[v1.VariableListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("variable.v1.VariableService.VariableList is not implemented"))
}

func (UnimplementedVariableServiceHandler) VariableGet(context.Context, *connect.Request[v1.VariableGetRequest]) (*connect.Response[v1.VariableGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("variable.v1.VariableService.VariableGet is not implemented"))
}

func (UnimplementedVariableServiceHandler) VariableCreate(context.Context, *connect.Request[v1.VariableCreateRequest]) (*connect.Response[v1.VariableCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("variable.v1.VariableService.VariableCreate is not implemented"))
}

func (UnimplementedVariableServiceHandler) VariableUpdate(context.Context, *connect.Request[v1.VariableUpdateRequest]) (*connect.Response[v1.VariableUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("variable.v1.VariableService.VariableUpdate is not implemented"))
}

func (UnimplementedVariableServiceHandler) VariableDelete(context.Context, *connect.Request[v1.VariableDeleteRequest]) (*connect.Response[v1.VariableDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("variable.v1.VariableService.VariableDelete is not implemented"))
}
