syntax = "proto3";

package collection.v1;
option go_package = "devtools-services/gen/collection/v1;collectionv1";


import "nodedata/v1/nodedata.proto";


service CollectionService {
  // Collection operations
  rpc ListCollections (ListCollectionsRequest) returns (ListCollectionsResponse);
  rpc CreateCollection (CreateCollectionRequest) returns (CreateCollectionResponse);
  rpc GetCollection  (GetCollectionRequest) returns (GetCollectionResponse);
  rpc UpdateCollection (UpdateCollectionRequest) returns (UpdateCollectionResponse);
  rpc DeleteCollection (DeleteCollectionRequest) returns (DeleteCollectionResponse);


  // Helper rpcs
  // // // postman
  rpc ImportPostman (ImportPostmanRequest) returns (ImportPostmanResponse);

  // Node operations
  rpc ListNodes (ListNodesRequest) returns (ListNodesResponse);
  rpc CreateNode (CreateNodeRequest) returns (CreateNodeResponse);
  rpc GetNode  (GetNodeRequest) returns (GetNodeResponse);
  rpc GetNodeBulk  (GetNodeBulkRequest) returns (GetNodeBulkResponse);
  rpc UpdateNode (UpdateNodeRequest) returns (UpdateNodeResponse);
  rpc DeleteNode (DeleteNodeRequest) returns (DeleteNodeResponse);


  // Helper rpcs
  // // Move node to another parent or collection
  rpc MoveNode (MoveNodeRequest) returns (MoveNodeResponse);
  rpc RunNode (RunNodeRequest) returns (RunNodeResponse);
}

// Collection Operations Request and Response
// // List
message ListCollectionsRequest {
}

message ListCollectionsResponse {
  repeated SimpleCollection simple_collections = 1;
}

// // Create
message CreateCollectionRequest {
  string name = 1;
}

message CreateCollectionResponse {
  string id = 1;
  string name = 2;
}

// // Get
message GetCollectionRequest {
  string id = 1;
}

message GetCollectionResponse {
  string id = 1;
  string name = 2;
}

// // Update
message UpdateCollectionRequest {
  string id = 1;
  string name = 2;
}

message UpdateCollectionResponse {
}

// // Delete
message DeleteCollectionRequest {
  string id = 1;
}

message DeleteCollectionResponse {
}



// Helper Requests
// // Postman
message ImportPostmanRequest {
  string name = 2; // collection name
  bytes data = 3; // collection data (json)
}

message ImportPostmanResponse {
  string id = 1;
}

// //  Node Operations Request and Response

message ListNodesRequest {
  string collection_id = 1; // collection id
}

message ListNodesResponse {
  repeated string ids = 1; // node ids
}


message CreateNodeRequest {
    string id = 1; // node id
	  string collection_id = 2;
    string name = 3; // name of the node
    string type = 4; // such as "request", "folder"
    optional string parent_id = 5; // INFO: optional
    optional nodedata.v1.NodeApiCallData data = 6; // INFO: optional
}

message CreateNodeResponse {
  string id = 1;
}

message GetNodeRequest {
  string id = 1;
}

message GetNodeResponse {
  CollectionNode node = 1;
}

message GetNodeBulkRequest {
  repeated string ids = 1;
}

message GetNodeBulkResponse {
  repeated CollectionNode nodes = 1;
}

message UpdateNodeRequest {
  string id = 1;
	string collection_id = 2;
  string name = 3;
  string type = 4;
  optional string parent_id = 5; // INFO: optional
  optional nodedata.v1.NodeApiCallData data = 6; // INFO: optional
}

message UpdateNodeResponse {
}

message DeleteNodeRequest {
  string id = 1;
}

message DeleteNodeResponse {
}

message MoveNodeRequest {
  string id = 1;
  string parent_id = 2;
  string collection_id = 3; // INFO: optional
}


message MoveNodeResponse {
}

message RunNodeRequest {
  string id = 1;
}

message RunNodeResponse {
  int32 status = 1;
  bytes body = 2;
  int64 duration = 3;
}

message SimpleCollection {
  string id = 1;
  string name = 2;
}

// Collection Node
message CollectionNode {
    string id = 1;
	  string collection_id = 2;
    string name = 3;
    string type = 4; // such as "request", "folder"
    optional string parent_id = 5; // INFO: optional
    optional nodedata.v1.NodeApiCallData data = 6; // INFO: optional
}

