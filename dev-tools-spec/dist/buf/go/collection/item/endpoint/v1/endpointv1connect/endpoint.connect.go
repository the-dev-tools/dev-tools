// Generated by Microsoft TypeSpec

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: collection/item/endpoint/v1/endpoint.proto

package endpointv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-spec/dist/buf/go/collection/item/endpoint/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EndpointServiceName is the fully-qualified name of the EndpointService service.
	EndpointServiceName = "collection.item.endpoint.v1.EndpointService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EndpointServiceEndpointGetProcedure is the fully-qualified name of the EndpointService's
	// EndpointGet RPC.
	EndpointServiceEndpointGetProcedure = "/collection.item.endpoint.v1.EndpointService/EndpointGet"
	// EndpointServiceEndpointCreateProcedure is the fully-qualified name of the EndpointService's
	// EndpointCreate RPC.
	EndpointServiceEndpointCreateProcedure = "/collection.item.endpoint.v1.EndpointService/EndpointCreate"
	// EndpointServiceEndpointUpdateProcedure is the fully-qualified name of the EndpointService's
	// EndpointUpdate RPC.
	EndpointServiceEndpointUpdateProcedure = "/collection.item.endpoint.v1.EndpointService/EndpointUpdate"
	// EndpointServiceEndpointDeleteProcedure is the fully-qualified name of the EndpointService's
	// EndpointDelete RPC.
	EndpointServiceEndpointDeleteProcedure = "/collection.item.endpoint.v1.EndpointService/EndpointDelete"
	// EndpointServiceEndpointDuplicateProcedure is the fully-qualified name of the EndpointService's
	// EndpointDuplicate RPC.
	EndpointServiceEndpointDuplicateProcedure = "/collection.item.endpoint.v1.EndpointService/EndpointDuplicate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	endpointServiceServiceDescriptor                 = v1.File_collection_item_endpoint_v1_endpoint_proto.Services().ByName("EndpointService")
	endpointServiceEndpointGetMethodDescriptor       = endpointServiceServiceDescriptor.Methods().ByName("EndpointGet")
	endpointServiceEndpointCreateMethodDescriptor    = endpointServiceServiceDescriptor.Methods().ByName("EndpointCreate")
	endpointServiceEndpointUpdateMethodDescriptor    = endpointServiceServiceDescriptor.Methods().ByName("EndpointUpdate")
	endpointServiceEndpointDeleteMethodDescriptor    = endpointServiceServiceDescriptor.Methods().ByName("EndpointDelete")
	endpointServiceEndpointDuplicateMethodDescriptor = endpointServiceServiceDescriptor.Methods().ByName("EndpointDuplicate")
)

// EndpointServiceClient is a client for the collection.item.endpoint.v1.EndpointService service.
type EndpointServiceClient interface {
	EndpointGet(context.Context, *connect.Request[v1.EndpointGetRequest]) (*connect.Response[v1.EndpointGetResponse], error)
	EndpointCreate(context.Context, *connect.Request[v1.EndpointCreateRequest]) (*connect.Response[v1.EndpointCreateResponse], error)
	EndpointUpdate(context.Context, *connect.Request[v1.EndpointUpdateRequest]) (*connect.Response[v1.EndpointUpdateResponse], error)
	EndpointDelete(context.Context, *connect.Request[v1.EndpointDeleteRequest]) (*connect.Response[v1.EndpointDeleteResponse], error)
	EndpointDuplicate(context.Context, *connect.Request[v1.EndpointDuplicateRequest]) (*connect.Response[v1.EndpointDuplicateResponse], error)
}

// NewEndpointServiceClient constructs a client for the collection.item.endpoint.v1.EndpointService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEndpointServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EndpointServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &endpointServiceClient{
		endpointGet: connect.NewClient[v1.EndpointGetRequest, v1.EndpointGetResponse](
			httpClient,
			baseURL+EndpointServiceEndpointGetProcedure,
			connect.WithSchema(endpointServiceEndpointGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		endpointCreate: connect.NewClient[v1.EndpointCreateRequest, v1.EndpointCreateResponse](
			httpClient,
			baseURL+EndpointServiceEndpointCreateProcedure,
			connect.WithSchema(endpointServiceEndpointCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		endpointUpdate: connect.NewClient[v1.EndpointUpdateRequest, v1.EndpointUpdateResponse](
			httpClient,
			baseURL+EndpointServiceEndpointUpdateProcedure,
			connect.WithSchema(endpointServiceEndpointUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		endpointDelete: connect.NewClient[v1.EndpointDeleteRequest, v1.EndpointDeleteResponse](
			httpClient,
			baseURL+EndpointServiceEndpointDeleteProcedure,
			connect.WithSchema(endpointServiceEndpointDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		endpointDuplicate: connect.NewClient[v1.EndpointDuplicateRequest, v1.EndpointDuplicateResponse](
			httpClient,
			baseURL+EndpointServiceEndpointDuplicateProcedure,
			connect.WithSchema(endpointServiceEndpointDuplicateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// endpointServiceClient implements EndpointServiceClient.
type endpointServiceClient struct {
	endpointGet       *connect.Client[v1.EndpointGetRequest, v1.EndpointGetResponse]
	endpointCreate    *connect.Client[v1.EndpointCreateRequest, v1.EndpointCreateResponse]
	endpointUpdate    *connect.Client[v1.EndpointUpdateRequest, v1.EndpointUpdateResponse]
	endpointDelete    *connect.Client[v1.EndpointDeleteRequest, v1.EndpointDeleteResponse]
	endpointDuplicate *connect.Client[v1.EndpointDuplicateRequest, v1.EndpointDuplicateResponse]
}

// EndpointGet calls collection.item.endpoint.v1.EndpointService.EndpointGet.
func (c *endpointServiceClient) EndpointGet(ctx context.Context, req *connect.Request[v1.EndpointGetRequest]) (*connect.Response[v1.EndpointGetResponse], error) {
	return c.endpointGet.CallUnary(ctx, req)
}

// EndpointCreate calls collection.item.endpoint.v1.EndpointService.EndpointCreate.
func (c *endpointServiceClient) EndpointCreate(ctx context.Context, req *connect.Request[v1.EndpointCreateRequest]) (*connect.Response[v1.EndpointCreateResponse], error) {
	return c.endpointCreate.CallUnary(ctx, req)
}

// EndpointUpdate calls collection.item.endpoint.v1.EndpointService.EndpointUpdate.
func (c *endpointServiceClient) EndpointUpdate(ctx context.Context, req *connect.Request[v1.EndpointUpdateRequest]) (*connect.Response[v1.EndpointUpdateResponse], error) {
	return c.endpointUpdate.CallUnary(ctx, req)
}

// EndpointDelete calls collection.item.endpoint.v1.EndpointService.EndpointDelete.
func (c *endpointServiceClient) EndpointDelete(ctx context.Context, req *connect.Request[v1.EndpointDeleteRequest]) (*connect.Response[v1.EndpointDeleteResponse], error) {
	return c.endpointDelete.CallUnary(ctx, req)
}

// EndpointDuplicate calls collection.item.endpoint.v1.EndpointService.EndpointDuplicate.
func (c *endpointServiceClient) EndpointDuplicate(ctx context.Context, req *connect.Request[v1.EndpointDuplicateRequest]) (*connect.Response[v1.EndpointDuplicateResponse], error) {
	return c.endpointDuplicate.CallUnary(ctx, req)
}

// EndpointServiceHandler is an implementation of the collection.item.endpoint.v1.EndpointService
// service.
type EndpointServiceHandler interface {
	EndpointGet(context.Context, *connect.Request[v1.EndpointGetRequest]) (*connect.Response[v1.EndpointGetResponse], error)
	EndpointCreate(context.Context, *connect.Request[v1.EndpointCreateRequest]) (*connect.Response[v1.EndpointCreateResponse], error)
	EndpointUpdate(context.Context, *connect.Request[v1.EndpointUpdateRequest]) (*connect.Response[v1.EndpointUpdateResponse], error)
	EndpointDelete(context.Context, *connect.Request[v1.EndpointDeleteRequest]) (*connect.Response[v1.EndpointDeleteResponse], error)
	EndpointDuplicate(context.Context, *connect.Request[v1.EndpointDuplicateRequest]) (*connect.Response[v1.EndpointDuplicateResponse], error)
}

// NewEndpointServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEndpointServiceHandler(svc EndpointServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	endpointServiceEndpointGetHandler := connect.NewUnaryHandler(
		EndpointServiceEndpointGetProcedure,
		svc.EndpointGet,
		connect.WithSchema(endpointServiceEndpointGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	endpointServiceEndpointCreateHandler := connect.NewUnaryHandler(
		EndpointServiceEndpointCreateProcedure,
		svc.EndpointCreate,
		connect.WithSchema(endpointServiceEndpointCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	endpointServiceEndpointUpdateHandler := connect.NewUnaryHandler(
		EndpointServiceEndpointUpdateProcedure,
		svc.EndpointUpdate,
		connect.WithSchema(endpointServiceEndpointUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	endpointServiceEndpointDeleteHandler := connect.NewUnaryHandler(
		EndpointServiceEndpointDeleteProcedure,
		svc.EndpointDelete,
		connect.WithSchema(endpointServiceEndpointDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	endpointServiceEndpointDuplicateHandler := connect.NewUnaryHandler(
		EndpointServiceEndpointDuplicateProcedure,
		svc.EndpointDuplicate,
		connect.WithSchema(endpointServiceEndpointDuplicateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/collection.item.endpoint.v1.EndpointService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EndpointServiceEndpointGetProcedure:
			endpointServiceEndpointGetHandler.ServeHTTP(w, r)
		case EndpointServiceEndpointCreateProcedure:
			endpointServiceEndpointCreateHandler.ServeHTTP(w, r)
		case EndpointServiceEndpointUpdateProcedure:
			endpointServiceEndpointUpdateHandler.ServeHTTP(w, r)
		case EndpointServiceEndpointDeleteProcedure:
			endpointServiceEndpointDeleteHandler.ServeHTTP(w, r)
		case EndpointServiceEndpointDuplicateProcedure:
			endpointServiceEndpointDuplicateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEndpointServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEndpointServiceHandler struct{}

func (UnimplementedEndpointServiceHandler) EndpointGet(context.Context, *connect.Request[v1.EndpointGetRequest]) (*connect.Response[v1.EndpointGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.endpoint.v1.EndpointService.EndpointGet is not implemented"))
}

func (UnimplementedEndpointServiceHandler) EndpointCreate(context.Context, *connect.Request[v1.EndpointCreateRequest]) (*connect.Response[v1.EndpointCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.endpoint.v1.EndpointService.EndpointCreate is not implemented"))
}

func (UnimplementedEndpointServiceHandler) EndpointUpdate(context.Context, *connect.Request[v1.EndpointUpdateRequest]) (*connect.Response[v1.EndpointUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.endpoint.v1.EndpointService.EndpointUpdate is not implemented"))
}

func (UnimplementedEndpointServiceHandler) EndpointDelete(context.Context, *connect.Request[v1.EndpointDeleteRequest]) (*connect.Response[v1.EndpointDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.endpoint.v1.EndpointService.EndpointDelete is not implemented"))
}

func (UnimplementedEndpointServiceHandler) EndpointDuplicate(context.Context, *connect.Request[v1.EndpointDuplicateRequest]) (*connect.Response[v1.EndpointDuplicateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.endpoint.v1.EndpointService.EndpointDuplicate is not implemented"))
}
