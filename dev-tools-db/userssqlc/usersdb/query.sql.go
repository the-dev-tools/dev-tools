// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package usersdb

import (
	"context"
	"database/sql"
)

const create = `-- name: Create :one
INSERT INTO users 
(id, email, password_hash, platform_type, platform_id)
VALUES (?, ?, ?, ?, ?)
RETURNING id, email, password_hash, platform_type, platform_id
`

type CreateParams struct {
	ID           []byte
	Email        string
	PasswordHash []byte
	PlatformType sql.NullInt64
	PlatformID   sql.NullString
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (User, error) {
	row := q.queryRow(ctx, q.createStmt, create,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.PlatformType,
		arg.PlatformID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.PlatformType,
		&i.PlatformID,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM users 
WHERE id = ?
`

func (q *Queries) Delete(ctx context.Context, id []byte) error {
	_, err := q.exec(ctx, q.deleteStmt, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT
    id,
    email,
    password_hash,
    platform_type,
    platform_id
FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id []byte) (User, error) {
	row := q.queryRow(ctx, q.getStmt, get, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.PlatformType,
		&i.PlatformID,
	)
	return i, err
}

const getByPlatformIDandType = `-- name: GetByPlatformIDandType :one
SELECT
    id,
    email,
    password_hash,
    platform_type,
    platform_id
FROM users WHERE platform_id = ? AND platform_type = ? LIMIT 1
`

type GetByPlatformIDandTypeParams struct {
	PlatformID   sql.NullString
	PlatformType sql.NullInt64
}

func (q *Queries) GetByPlatformIDandType(ctx context.Context, arg GetByPlatformIDandTypeParams) (User, error) {
	row := q.queryRow(ctx, q.getByPlatformIDandTypeStmt, getByPlatformIDandType, arg.PlatformID, arg.PlatformType)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.PlatformType,
		&i.PlatformID,
	)
	return i, err
}

const update = `-- name: Update :exec
UPDATE users 
SET email = ?,
password_hash = ?
WHERE id = ?
`

type UpdateParams struct {
	Email        string
	PasswordHash []byte
	ID           []byte
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.exec(ctx, q.updateStmt, update, arg.Email, arg.PasswordHash, arg.ID)
	return err
}
