// Generated by Microsoft TypeSpec

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/authv1.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-spec/dist/buf/go/auth/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.authv1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceAuthMagicLinkProcedure is the fully-qualified name of the AuthService's AuthMagicLink
	// RPC.
	AuthServiceAuthMagicLinkProcedure = "/auth.v1.authv1.AuthService/AuthMagicLink"
	// AuthServiceAuthRefreshProcedure is the fully-qualified name of the AuthService's AuthRefresh RPC.
	AuthServiceAuthRefreshProcedure = "/auth.v1.authv1.AuthService/AuthRefresh"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor             = v1.File_auth_v1_authv1_proto.Services().ByName("AuthService")
	authServiceAuthMagicLinkMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("AuthMagicLink")
	authServiceAuthRefreshMethodDescriptor   = authServiceServiceDescriptor.Methods().ByName("AuthRefresh")
)

// AuthServiceClient is a client for the auth.v1.authv1.AuthService service.
type AuthServiceClient interface {
	AuthMagicLink(context.Context, *connect.Request[v1.AuthMagicLinkRequest]) (*connect.Response[v1.AuthMagicLinkResponse], error)
	AuthRefresh(context.Context, *connect.Request[v1.AuthRefreshRequest]) (*connect.Response[v1.AuthRefreshResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.authv1.AuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		authMagicLink: connect.NewClient[v1.AuthMagicLinkRequest, v1.AuthMagicLinkResponse](
			httpClient,
			baseURL+AuthServiceAuthMagicLinkProcedure,
			connect.WithSchema(authServiceAuthMagicLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authRefresh: connect.NewClient[v1.AuthRefreshRequest, v1.AuthRefreshResponse](
			httpClient,
			baseURL+AuthServiceAuthRefreshProcedure,
			connect.WithSchema(authServiceAuthRefreshMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	authMagicLink *connect.Client[v1.AuthMagicLinkRequest, v1.AuthMagicLinkResponse]
	authRefresh   *connect.Client[v1.AuthRefreshRequest, v1.AuthRefreshResponse]
}

// AuthMagicLink calls auth.v1.authv1.AuthService.AuthMagicLink.
func (c *authServiceClient) AuthMagicLink(ctx context.Context, req *connect.Request[v1.AuthMagicLinkRequest]) (*connect.Response[v1.AuthMagicLinkResponse], error) {
	return c.authMagicLink.CallUnary(ctx, req)
}

// AuthRefresh calls auth.v1.authv1.AuthService.AuthRefresh.
func (c *authServiceClient) AuthRefresh(ctx context.Context, req *connect.Request[v1.AuthRefreshRequest]) (*connect.Response[v1.AuthRefreshResponse], error) {
	return c.authRefresh.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.authv1.AuthService service.
type AuthServiceHandler interface {
	AuthMagicLink(context.Context, *connect.Request[v1.AuthMagicLinkRequest]) (*connect.Response[v1.AuthMagicLinkResponse], error)
	AuthRefresh(context.Context, *connect.Request[v1.AuthRefreshRequest]) (*connect.Response[v1.AuthRefreshResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceAuthMagicLinkHandler := connect.NewUnaryHandler(
		AuthServiceAuthMagicLinkProcedure,
		svc.AuthMagicLink,
		connect.WithSchema(authServiceAuthMagicLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceAuthRefreshHandler := connect.NewUnaryHandler(
		AuthServiceAuthRefreshProcedure,
		svc.AuthRefresh,
		connect.WithSchema(authServiceAuthRefreshMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.authv1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceAuthMagicLinkProcedure:
			authServiceAuthMagicLinkHandler.ServeHTTP(w, r)
		case AuthServiceAuthRefreshProcedure:
			authServiceAuthRefreshHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) AuthMagicLink(context.Context, *connect.Request[v1.AuthMagicLinkRequest]) (*connect.Response[v1.AuthMagicLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.authv1.AuthService.AuthMagicLink is not implemented"))
}

func (UnimplementedAuthServiceHandler) AuthRefresh(context.Context, *connect.Request[v1.AuthRefreshRequest]) (*connect.Response[v1.AuthRefreshResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.authv1.AuthService.AuthRefresh is not implemented"))
}
