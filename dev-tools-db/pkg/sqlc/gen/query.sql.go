// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package gen

import (
	"context"
	"database/sql"

	idwrap "dev-tools-backend/pkg/idwrap"
	mresultapi "dev-tools-backend/pkg/model/result/mresultapi"
)

const checkIFWorkspaceUserExists = `-- name: CheckIFWorkspaceUserExists :one
SELECT
  cast(
  EXISTS (
    SELECT
      1
    FROM
      workspaces_users
    WHERE
      workspace_id = ?
      AND user_id = ?
    LIMIT
      1
) AS boolean
)
`

type CheckIFWorkspaceUserExistsParams struct {
	WorkspaceID idwrap.IDWrap
	UserID      idwrap.IDWrap
}

// WorkspaceUsers
func (q *Queries) CheckIFWorkspaceUserExists(ctx context.Context, arg CheckIFWorkspaceUserExistsParams) (bool, error) {
	row := q.queryRow(ctx, q.checkIFWorkspaceUserExistsStmt, checkIFWorkspaceUserExists, arg.WorkspaceID, arg.UserID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const createAssert = `-- name: CreateAssert :exec
INSERT INTO
  assertion (id, example_id, type, path, value, enable, prev, next)
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateAssertParams struct {
	ID        idwrap.IDWrap
	ExampleID idwrap.IDWrap
	Type      int8
	Path      string
	Value     string
	Enable    bool
	Prev      []byte
	Next      []byte
}

func (q *Queries) CreateAssert(ctx context.Context, arg CreateAssertParams) error {
	_, err := q.exec(ctx, q.createAssertStmt, createAssert,
		arg.ID,
		arg.ExampleID,
		arg.Type,
		arg.Path,
		arg.Value,
		arg.Enable,
		arg.Prev,
		arg.Next,
	)
	return err
}

const createAssertResult = `-- name: CreateAssertResult :exec
INSERT INTO
  assertion_result (id, assertion_id, result)
VALUES
  (?, ?, ?)
`

type CreateAssertResultParams struct {
	ID          idwrap.IDWrap
	AssertionID idwrap.IDWrap
	Result      bool
}

func (q *Queries) CreateAssertResult(ctx context.Context, arg CreateAssertResultParams) error {
	_, err := q.exec(ctx, q.createAssertResultStmt, createAssertResult, arg.ID, arg.AssertionID, arg.Result)
	return err
}

const createBodyForm = `-- name: CreateBodyForm :exec

INSERT INTO
  example_body_form (id, example_id, body_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateBodyFormParams struct {
	ID          idwrap.IDWrap
	ExampleID   idwrap.IDWrap
	BodyKey     string
	Enable      bool
	Description string
	Value       string
}

// BodyForm
func (q *Queries) CreateBodyForm(ctx context.Context, arg CreateBodyFormParams) error {
	_, err := q.exec(ctx, q.createBodyFormStmt, createBodyForm,
		arg.ID,
		arg.ExampleID,
		arg.BodyKey,
		arg.Enable,
		arg.Description,
		arg.Value,
	)
	return err
}

const createBodyFormBulk = `-- name: CreateBodyFormBulk :exec
INSERT INTO
  example_body_form (id, example_id, body_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?)
`

type CreateBodyFormBulkParams struct {
	ID             idwrap.IDWrap
	ExampleID      idwrap.IDWrap
	BodyKey        string
	Enable         bool
	Description    string
	Value          string
	ID_2           idwrap.IDWrap
	ExampleID_2    idwrap.IDWrap
	BodyKey_2      string
	Enable_2       bool
	Description_2  string
	Value_2        string
	ID_3           idwrap.IDWrap
	ExampleID_3    idwrap.IDWrap
	BodyKey_3      string
	Enable_3       bool
	Description_3  string
	Value_3        string
	ID_4           idwrap.IDWrap
	ExampleID_4    idwrap.IDWrap
	BodyKey_4      string
	Enable_4       bool
	Description_4  string
	Value_4        string
	ID_5           idwrap.IDWrap
	ExampleID_5    idwrap.IDWrap
	BodyKey_5      string
	Enable_5       bool
	Description_5  string
	Value_5        string
	ID_6           idwrap.IDWrap
	ExampleID_6    idwrap.IDWrap
	BodyKey_6      string
	Enable_6       bool
	Description_6  string
	Value_6        string
	ID_7           idwrap.IDWrap
	ExampleID_7    idwrap.IDWrap
	BodyKey_7      string
	Enable_7       bool
	Description_7  string
	Value_7        string
	ID_8           idwrap.IDWrap
	ExampleID_8    idwrap.IDWrap
	BodyKey_8      string
	Enable_8       bool
	Description_8  string
	Value_8        string
	ID_9           idwrap.IDWrap
	ExampleID_9    idwrap.IDWrap
	BodyKey_9      string
	Enable_9       bool
	Description_9  string
	Value_9        string
	ID_10          idwrap.IDWrap
	ExampleID_10   idwrap.IDWrap
	BodyKey_10     string
	Enable_10      bool
	Description_10 string
	Value_10       string
}

func (q *Queries) CreateBodyFormBulk(ctx context.Context, arg CreateBodyFormBulkParams) error {
	_, err := q.exec(ctx, q.createBodyFormBulkStmt, createBodyFormBulk,
		arg.ID,
		arg.ExampleID,
		arg.BodyKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID_2,
		arg.ExampleID_2,
		arg.BodyKey_2,
		arg.Enable_2,
		arg.Description_2,
		arg.Value_2,
		arg.ID_3,
		arg.ExampleID_3,
		arg.BodyKey_3,
		arg.Enable_3,
		arg.Description_3,
		arg.Value_3,
		arg.ID_4,
		arg.ExampleID_4,
		arg.BodyKey_4,
		arg.Enable_4,
		arg.Description_4,
		arg.Value_4,
		arg.ID_5,
		arg.ExampleID_5,
		arg.BodyKey_5,
		arg.Enable_5,
		arg.Description_5,
		arg.Value_5,
		arg.ID_6,
		arg.ExampleID_6,
		arg.BodyKey_6,
		arg.Enable_6,
		arg.Description_6,
		arg.Value_6,
		arg.ID_7,
		arg.ExampleID_7,
		arg.BodyKey_7,
		arg.Enable_7,
		arg.Description_7,
		arg.Value_7,
		arg.ID_8,
		arg.ExampleID_8,
		arg.BodyKey_8,
		arg.Enable_8,
		arg.Description_8,
		arg.Value_8,
		arg.ID_9,
		arg.ExampleID_9,
		arg.BodyKey_9,
		arg.Enable_9,
		arg.Description_9,
		arg.Value_9,
		arg.ID_10,
		arg.ExampleID_10,
		arg.BodyKey_10,
		arg.Enable_10,
		arg.Description_10,
		arg.Value_10,
	)
	return err
}

const createBodyRaw = `-- name: CreateBodyRaw :exec
INSERT INTO
  example_body_raw (id, example_id, visualize_mode, compress_type, data)
VALUES
  (?, ?, ?, ?, ?)
`

type CreateBodyRawParams struct {
	ID            idwrap.IDWrap
	ExampleID     idwrap.IDWrap
	VisualizeMode int8
	CompressType  int8
	Data          []byte
}

func (q *Queries) CreateBodyRaw(ctx context.Context, arg CreateBodyRawParams) error {
	_, err := q.exec(ctx, q.createBodyRawStmt, createBodyRaw,
		arg.ID,
		arg.ExampleID,
		arg.VisualizeMode,
		arg.CompressType,
		arg.Data,
	)
	return err
}

const createBodyRawBulk = `-- name: CreateBodyRawBulk :exec
INSERT INTO
  example_body_raw (id, example_id, visualize_mode, compress_type, data)
VALUES
  (?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?)
`

type CreateBodyRawBulkParams struct {
	ID              idwrap.IDWrap
	ExampleID       idwrap.IDWrap
	VisualizeMode   int8
	CompressType    int8
	Data            []byte
	ID_2            idwrap.IDWrap
	ExampleID_2     idwrap.IDWrap
	VisualizeMode_2 int8
	CompressType_2  int8
	Data_2          []byte
	ID_3            idwrap.IDWrap
	ExampleID_3     idwrap.IDWrap
	VisualizeMode_3 int8
	CompressType_3  int8
	Data_3          []byte
	ID_4            idwrap.IDWrap
	ExampleID_4     idwrap.IDWrap
	VisualizeMode_4 int8
	CompressType_4  int8
	Data_4          []byte
	ID_5            idwrap.IDWrap
	ExampleID_5     idwrap.IDWrap
	VisualizeMode_5 int8
	CompressType_5  int8
	Data_5          []byte
}

func (q *Queries) CreateBodyRawBulk(ctx context.Context, arg CreateBodyRawBulkParams) error {
	_, err := q.exec(ctx, q.createBodyRawBulkStmt, createBodyRawBulk,
		arg.ID,
		arg.ExampleID,
		arg.VisualizeMode,
		arg.CompressType,
		arg.Data,
		arg.ID_2,
		arg.ExampleID_2,
		arg.VisualizeMode_2,
		arg.CompressType_2,
		arg.Data_2,
		arg.ID_3,
		arg.ExampleID_3,
		arg.VisualizeMode_3,
		arg.CompressType_3,
		arg.Data_3,
		arg.ID_4,
		arg.ExampleID_4,
		arg.VisualizeMode_4,
		arg.CompressType_4,
		arg.Data_4,
		arg.ID_5,
		arg.ExampleID_5,
		arg.VisualizeMode_5,
		arg.CompressType_5,
		arg.Data_5,
	)
	return err
}

const createBodyUrlEncoded = `-- name: CreateBodyUrlEncoded :exec
INSERT INTO
  example_body_urlencoded (id, example_id, body_key, enable, description, value)
VALUES
    (?, ?, ?, ?, ?, ?)
`

type CreateBodyUrlEncodedParams struct {
	ID          idwrap.IDWrap
	ExampleID   idwrap.IDWrap
	BodyKey     string
	Enable      bool
	Description string
	Value       string
}

func (q *Queries) CreateBodyUrlEncoded(ctx context.Context, arg CreateBodyUrlEncodedParams) error {
	_, err := q.exec(ctx, q.createBodyUrlEncodedStmt, createBodyUrlEncoded,
		arg.ID,
		arg.ExampleID,
		arg.BodyKey,
		arg.Enable,
		arg.Description,
		arg.Value,
	)
	return err
}

const createBodyUrlEncodedBulk = `-- name: CreateBodyUrlEncodedBulk :exec
INSERT INTO
  example_body_urlencoded (id, example_id, body_key, enable, description, value)
VALUES
    (?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?)
`

type CreateBodyUrlEncodedBulkParams struct {
	ID             idwrap.IDWrap
	ExampleID      idwrap.IDWrap
	BodyKey        string
	Enable         bool
	Description    string
	Value          string
	ID_2           idwrap.IDWrap
	ExampleID_2    idwrap.IDWrap
	BodyKey_2      string
	Enable_2       bool
	Description_2  string
	Value_2        string
	ID_3           idwrap.IDWrap
	ExampleID_3    idwrap.IDWrap
	BodyKey_3      string
	Enable_3       bool
	Description_3  string
	Value_3        string
	ID_4           idwrap.IDWrap
	ExampleID_4    idwrap.IDWrap
	BodyKey_4      string
	Enable_4       bool
	Description_4  string
	Value_4        string
	ID_5           idwrap.IDWrap
	ExampleID_5    idwrap.IDWrap
	BodyKey_5      string
	Enable_5       bool
	Description_5  string
	Value_5        string
	ID_6           idwrap.IDWrap
	ExampleID_6    idwrap.IDWrap
	BodyKey_6      string
	Enable_6       bool
	Description_6  string
	Value_6        string
	ID_7           idwrap.IDWrap
	ExampleID_7    idwrap.IDWrap
	BodyKey_7      string
	Enable_7       bool
	Description_7  string
	Value_7        string
	ID_8           idwrap.IDWrap
	ExampleID_8    idwrap.IDWrap
	BodyKey_8      string
	Enable_8       bool
	Description_8  string
	Value_8        string
	ID_9           idwrap.IDWrap
	ExampleID_9    idwrap.IDWrap
	BodyKey_9      string
	Enable_9       bool
	Description_9  string
	Value_9        string
	ID_10          idwrap.IDWrap
	ExampleID_10   idwrap.IDWrap
	BodyKey_10     string
	Enable_10      bool
	Description_10 string
	Value_10       string
}

func (q *Queries) CreateBodyUrlEncodedBulk(ctx context.Context, arg CreateBodyUrlEncodedBulkParams) error {
	_, err := q.exec(ctx, q.createBodyUrlEncodedBulkStmt, createBodyUrlEncodedBulk,
		arg.ID,
		arg.ExampleID,
		arg.BodyKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID_2,
		arg.ExampleID_2,
		arg.BodyKey_2,
		arg.Enable_2,
		arg.Description_2,
		arg.Value_2,
		arg.ID_3,
		arg.ExampleID_3,
		arg.BodyKey_3,
		arg.Enable_3,
		arg.Description_3,
		arg.Value_3,
		arg.ID_4,
		arg.ExampleID_4,
		arg.BodyKey_4,
		arg.Enable_4,
		arg.Description_4,
		arg.Value_4,
		arg.ID_5,
		arg.ExampleID_5,
		arg.BodyKey_5,
		arg.Enable_5,
		arg.Description_5,
		arg.Value_5,
		arg.ID_6,
		arg.ExampleID_6,
		arg.BodyKey_6,
		arg.Enable_6,
		arg.Description_6,
		arg.Value_6,
		arg.ID_7,
		arg.ExampleID_7,
		arg.BodyKey_7,
		arg.Enable_7,
		arg.Description_7,
		arg.Value_7,
		arg.ID_8,
		arg.ExampleID_8,
		arg.BodyKey_8,
		arg.Enable_8,
		arg.Description_8,
		arg.Value_8,
		arg.ID_9,
		arg.ExampleID_9,
		arg.BodyKey_9,
		arg.Enable_9,
		arg.Description_9,
		arg.Value_9,
		arg.ID_10,
		arg.ExampleID_10,
		arg.BodyKey_10,
		arg.Enable_10,
		arg.Description_10,
		arg.Value_10,
	)
	return err
}

const createCollection = `-- name: CreateCollection :exec
INSERT INTO
  collections (id, owner_id, name)
VALUES
  (?, ?, ?)
`

type CreateCollectionParams struct {
	ID      idwrap.IDWrap
	OwnerID idwrap.IDWrap
	Name    string
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) error {
	_, err := q.exec(ctx, q.createCollectionStmt, createCollection, arg.ID, arg.OwnerID, arg.Name)
	return err
}

const createEnvironment = `-- name: CreateEnvironment :exec
INSERT INTO
  environment (id, workspace_id, active, type, name, description)
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateEnvironmentParams struct {
	ID          idwrap.IDWrap
	WorkspaceID idwrap.IDWrap
	Active      bool
	Type        int8
	Name        string
	Description string
}

func (q *Queries) CreateEnvironment(ctx context.Context, arg CreateEnvironmentParams) error {
	_, err := q.exec(ctx, q.createEnvironmentStmt, createEnvironment,
		arg.ID,
		arg.WorkspaceID,
		arg.Active,
		arg.Type,
		arg.Name,
		arg.Description,
	)
	return err
}

const createExampleResp = `-- name: CreateExampleResp :exec
INSERT INTO
  example_resp (id, example_id, status, body, body_compress_type, duration)
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateExampleRespParams struct {
	ID               idwrap.IDWrap
	ExampleID        idwrap.IDWrap
	Status           uint16
	Body             []byte
	BodyCompressType int8
	Duration         int32
}

func (q *Queries) CreateExampleResp(ctx context.Context, arg CreateExampleRespParams) error {
	_, err := q.exec(ctx, q.createExampleRespStmt, createExampleResp,
		arg.ID,
		arg.ExampleID,
		arg.Status,
		arg.Body,
		arg.BodyCompressType,
		arg.Duration,
	)
	return err
}

const createExampleRespHeader = `-- name: CreateExampleRespHeader :exec
INSERT INTO
  example_resp_header (id, example_resp_id, header_key, value)
VALUES
  (?, ?, ?, ?)
`

type CreateExampleRespHeaderParams struct {
	ID            idwrap.IDWrap
	ExampleRespID idwrap.IDWrap
	HeaderKey     string
	Value         string
}

func (q *Queries) CreateExampleRespHeader(ctx context.Context, arg CreateExampleRespHeaderParams) error {
	_, err := q.exec(ctx, q.createExampleRespHeaderStmt, createExampleRespHeader,
		arg.ID,
		arg.ExampleRespID,
		arg.HeaderKey,
		arg.Value,
	)
	return err
}

const createHeader = `-- name: CreateHeader :exec
INSERT INTO
  example_header (id, example_id, header_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateHeaderParams struct {
	ID          idwrap.IDWrap
	ExampleID   idwrap.IDWrap
	HeaderKey   string
	Enable      bool
	Description string
	Value       string
}

func (q *Queries) CreateHeader(ctx context.Context, arg CreateHeaderParams) error {
	_, err := q.exec(ctx, q.createHeaderStmt, createHeader,
		arg.ID,
		arg.ExampleID,
		arg.HeaderKey,
		arg.Enable,
		arg.Description,
		arg.Value,
	)
	return err
}

const createHeaderBulk = `-- name: CreateHeaderBulk :exec
INSERT INTO
  example_header (id, example_id, header_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?)
`

type CreateHeaderBulkParams struct {
	ID             idwrap.IDWrap
	ExampleID      idwrap.IDWrap
	HeaderKey      string
	Enable         bool
	Description    string
	Value          string
	ID_2           idwrap.IDWrap
	ExampleID_2    idwrap.IDWrap
	HeaderKey_2    string
	Enable_2       bool
	Description_2  string
	Value_2        string
	ID_3           idwrap.IDWrap
	ExampleID_3    idwrap.IDWrap
	HeaderKey_3    string
	Enable_3       bool
	Description_3  string
	Value_3        string
	ID_4           idwrap.IDWrap
	ExampleID_4    idwrap.IDWrap
	HeaderKey_4    string
	Enable_4       bool
	Description_4  string
	Value_4        string
	ID_5           idwrap.IDWrap
	ExampleID_5    idwrap.IDWrap
	HeaderKey_5    string
	Enable_5       bool
	Description_5  string
	Value_5        string
	ID_6           idwrap.IDWrap
	ExampleID_6    idwrap.IDWrap
	HeaderKey_6    string
	Enable_6       bool
	Description_6  string
	Value_6        string
	ID_7           idwrap.IDWrap
	ExampleID_7    idwrap.IDWrap
	HeaderKey_7    string
	Enable_7       bool
	Description_7  string
	Value_7        string
	ID_8           idwrap.IDWrap
	ExampleID_8    idwrap.IDWrap
	HeaderKey_8    string
	Enable_8       bool
	Description_8  string
	Value_8        string
	ID_9           idwrap.IDWrap
	ExampleID_9    idwrap.IDWrap
	HeaderKey_9    string
	Enable_9       bool
	Description_9  string
	Value_9        string
	ID_10          idwrap.IDWrap
	ExampleID_10   idwrap.IDWrap
	HeaderKey_10   string
	Enable_10      bool
	Description_10 string
	Value_10       string
	ID_11          idwrap.IDWrap
	ExampleID_11   idwrap.IDWrap
	HeaderKey_11   string
	Enable_11      bool
	Description_11 string
	Value_11       string
	ID_12          idwrap.IDWrap
	ExampleID_12   idwrap.IDWrap
	HeaderKey_12   string
	Enable_12      bool
	Description_12 string
	Value_12       string
	ID_13          idwrap.IDWrap
	ExampleID_13   idwrap.IDWrap
	HeaderKey_13   string
	Enable_13      bool
	Description_13 string
	Value_13       string
	ID_14          idwrap.IDWrap
	ExampleID_14   idwrap.IDWrap
	HeaderKey_14   string
	Enable_14      bool
	Description_14 string
	Value_14       string
	ID_15          idwrap.IDWrap
	ExampleID_15   idwrap.IDWrap
	HeaderKey_15   string
	Enable_15      bool
	Description_15 string
	Value_15       string
}

func (q *Queries) CreateHeaderBulk(ctx context.Context, arg CreateHeaderBulkParams) error {
	_, err := q.exec(ctx, q.createHeaderBulkStmt, createHeaderBulk,
		arg.ID,
		arg.ExampleID,
		arg.HeaderKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID_2,
		arg.ExampleID_2,
		arg.HeaderKey_2,
		arg.Enable_2,
		arg.Description_2,
		arg.Value_2,
		arg.ID_3,
		arg.ExampleID_3,
		arg.HeaderKey_3,
		arg.Enable_3,
		arg.Description_3,
		arg.Value_3,
		arg.ID_4,
		arg.ExampleID_4,
		arg.HeaderKey_4,
		arg.Enable_4,
		arg.Description_4,
		arg.Value_4,
		arg.ID_5,
		arg.ExampleID_5,
		arg.HeaderKey_5,
		arg.Enable_5,
		arg.Description_5,
		arg.Value_5,
		arg.ID_6,
		arg.ExampleID_6,
		arg.HeaderKey_6,
		arg.Enable_6,
		arg.Description_6,
		arg.Value_6,
		arg.ID_7,
		arg.ExampleID_7,
		arg.HeaderKey_7,
		arg.Enable_7,
		arg.Description_7,
		arg.Value_7,
		arg.ID_8,
		arg.ExampleID_8,
		arg.HeaderKey_8,
		arg.Enable_8,
		arg.Description_8,
		arg.Value_8,
		arg.ID_9,
		arg.ExampleID_9,
		arg.HeaderKey_9,
		arg.Enable_9,
		arg.Description_9,
		arg.Value_9,
		arg.ID_10,
		arg.ExampleID_10,
		arg.HeaderKey_10,
		arg.Enable_10,
		arg.Description_10,
		arg.Value_10,
		arg.ID_11,
		arg.ExampleID_11,
		arg.HeaderKey_11,
		arg.Enable_11,
		arg.Description_11,
		arg.Value_11,
		arg.ID_12,
		arg.ExampleID_12,
		arg.HeaderKey_12,
		arg.Enable_12,
		arg.Description_12,
		arg.Value_12,
		arg.ID_13,
		arg.ExampleID_13,
		arg.HeaderKey_13,
		arg.Enable_13,
		arg.Description_13,
		arg.Value_13,
		arg.ID_14,
		arg.ExampleID_14,
		arg.HeaderKey_14,
		arg.Enable_14,
		arg.Description_14,
		arg.Value_14,
		arg.ID_15,
		arg.ExampleID_15,
		arg.HeaderKey_15,
		arg.Enable_15,
		arg.Description_15,
		arg.Value_15,
	)
	return err
}

const createItemApi = `-- name: CreateItemApi :exec
INSERT INTO
  item_api (id, collection_id, parent_id, name, url, method, prev, next)
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemApiParams struct {
	ID           idwrap.IDWrap
	CollectionID idwrap.IDWrap
	ParentID     *idwrap.IDWrap
	Name         string
	Url          string
	Method       string
	Prev         *idwrap.IDWrap
	Next         *idwrap.IDWrap
}

func (q *Queries) CreateItemApi(ctx context.Context, arg CreateItemApiParams) error {
	_, err := q.exec(ctx, q.createItemApiStmt, createItemApi,
		arg.ID,
		arg.CollectionID,
		arg.ParentID,
		arg.Name,
		arg.Url,
		arg.Method,
		arg.Prev,
		arg.Next,
	)
	return err
}

const createItemApiBulk = `-- name: CreateItemApiBulk :exec
INSERT INTO
  item_api (id, collection_id, parent_id, name, url, method, prev, next)
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemApiBulkParams struct {
	ID              idwrap.IDWrap
	CollectionID    idwrap.IDWrap
	ParentID        *idwrap.IDWrap
	Name            string
	Url             string
	Method          string
	Prev            *idwrap.IDWrap
	Next            *idwrap.IDWrap
	ID_2            idwrap.IDWrap
	CollectionID_2  idwrap.IDWrap
	ParentID_2      *idwrap.IDWrap
	Name_2          string
	Url_2           string
	Method_2        string
	Prev_2          *idwrap.IDWrap
	Next_2          *idwrap.IDWrap
	ID_3            idwrap.IDWrap
	CollectionID_3  idwrap.IDWrap
	ParentID_3      *idwrap.IDWrap
	Name_3          string
	Url_3           string
	Method_3        string
	Prev_3          *idwrap.IDWrap
	Next_3          *idwrap.IDWrap
	ID_4            idwrap.IDWrap
	CollectionID_4  idwrap.IDWrap
	ParentID_4      *idwrap.IDWrap
	Name_4          string
	Url_4           string
	Method_4        string
	Prev_4          *idwrap.IDWrap
	Next_4          *idwrap.IDWrap
	ID_5            idwrap.IDWrap
	CollectionID_5  idwrap.IDWrap
	ParentID_5      *idwrap.IDWrap
	Name_5          string
	Url_5           string
	Method_5        string
	Prev_5          *idwrap.IDWrap
	Next_5          *idwrap.IDWrap
	ID_6            idwrap.IDWrap
	CollectionID_6  idwrap.IDWrap
	ParentID_6      *idwrap.IDWrap
	Name_6          string
	Url_6           string
	Method_6        string
	Prev_6          *idwrap.IDWrap
	Next_6          *idwrap.IDWrap
	ID_7            idwrap.IDWrap
	CollectionID_7  idwrap.IDWrap
	ParentID_7      *idwrap.IDWrap
	Name_7          string
	Url_7           string
	Method_7        string
	Prev_7          *idwrap.IDWrap
	Next_7          *idwrap.IDWrap
	ID_8            idwrap.IDWrap
	CollectionID_8  idwrap.IDWrap
	ParentID_8      *idwrap.IDWrap
	Name_8          string
	Url_8           string
	Method_8        string
	Prev_8          *idwrap.IDWrap
	Next_8          *idwrap.IDWrap
	ID_9            idwrap.IDWrap
	CollectionID_9  idwrap.IDWrap
	ParentID_9      *idwrap.IDWrap
	Name_9          string
	Url_9           string
	Method_9        string
	Prev_9          *idwrap.IDWrap
	Next_9          *idwrap.IDWrap
	ID_10           idwrap.IDWrap
	CollectionID_10 idwrap.IDWrap
	ParentID_10     *idwrap.IDWrap
	Name_10         string
	Url_10          string
	Method_10       string
	Prev_10         *idwrap.IDWrap
	Next_10         *idwrap.IDWrap
}

func (q *Queries) CreateItemApiBulk(ctx context.Context, arg CreateItemApiBulkParams) error {
	_, err := q.exec(ctx, q.createItemApiBulkStmt, createItemApiBulk,
		arg.ID,
		arg.CollectionID,
		arg.ParentID,
		arg.Name,
		arg.Url,
		arg.Method,
		arg.Prev,
		arg.Next,
		arg.ID_2,
		arg.CollectionID_2,
		arg.ParentID_2,
		arg.Name_2,
		arg.Url_2,
		arg.Method_2,
		arg.Prev_2,
		arg.Next_2,
		arg.ID_3,
		arg.CollectionID_3,
		arg.ParentID_3,
		arg.Name_3,
		arg.Url_3,
		arg.Method_3,
		arg.Prev_3,
		arg.Next_3,
		arg.ID_4,
		arg.CollectionID_4,
		arg.ParentID_4,
		arg.Name_4,
		arg.Url_4,
		arg.Method_4,
		arg.Prev_4,
		arg.Next_4,
		arg.ID_5,
		arg.CollectionID_5,
		arg.ParentID_5,
		arg.Name_5,
		arg.Url_5,
		arg.Method_5,
		arg.Prev_5,
		arg.Next_5,
		arg.ID_6,
		arg.CollectionID_6,
		arg.ParentID_6,
		arg.Name_6,
		arg.Url_6,
		arg.Method_6,
		arg.Prev_6,
		arg.Next_6,
		arg.ID_7,
		arg.CollectionID_7,
		arg.ParentID_7,
		arg.Name_7,
		arg.Url_7,
		arg.Method_7,
		arg.Prev_7,
		arg.Next_7,
		arg.ID_8,
		arg.CollectionID_8,
		arg.ParentID_8,
		arg.Name_8,
		arg.Url_8,
		arg.Method_8,
		arg.Prev_8,
		arg.Next_8,
		arg.ID_9,
		arg.CollectionID_9,
		arg.ParentID_9,
		arg.Name_9,
		arg.Url_9,
		arg.Method_9,
		arg.Prev_9,
		arg.Next_9,
		arg.ID_10,
		arg.CollectionID_10,
		arg.ParentID_10,
		arg.Name_10,
		arg.Url_10,
		arg.Method_10,
		arg.Prev_10,
		arg.Next_10,
	)
	return err
}

const createItemApiExample = `-- name: CreateItemApiExample :exec
INSERT INTO
  item_api_example (
    id,
    item_api_id,
    collection_id,
    is_default,
    body_type,
    name,
    prev,
    next
  )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemApiExampleParams struct {
	ID           idwrap.IDWrap
	ItemApiID    idwrap.IDWrap
	CollectionID idwrap.IDWrap
	IsDefault    bool
	BodyType     int8
	Name         string
	Prev         *idwrap.IDWrap
	Next         *idwrap.IDWrap
}

func (q *Queries) CreateItemApiExample(ctx context.Context, arg CreateItemApiExampleParams) error {
	_, err := q.exec(ctx, q.createItemApiExampleStmt, createItemApiExample,
		arg.ID,
		arg.ItemApiID,
		arg.CollectionID,
		arg.IsDefault,
		arg.BodyType,
		arg.Name,
		arg.Prev,
		arg.Next,
	)
	return err
}

const createItemApiExampleBulk = `-- name: CreateItemApiExampleBulk :exec
INSERT INTO
  item_api_example (
    id,
    item_api_id,
    collection_id,
    is_default,
    body_type,
    name,
    prev,
    next
  )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?, ?, ?),
    (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemApiExampleBulkParams struct {
	ID              idwrap.IDWrap
	ItemApiID       idwrap.IDWrap
	CollectionID    idwrap.IDWrap
	IsDefault       bool
	BodyType        int8
	Name            string
	Prev            *idwrap.IDWrap
	Next            *idwrap.IDWrap
	ID_2            idwrap.IDWrap
	ItemApiID_2     idwrap.IDWrap
	CollectionID_2  idwrap.IDWrap
	IsDefault_2     bool
	BodyType_2      int8
	Name_2          string
	Prev_2          *idwrap.IDWrap
	Next_2          *idwrap.IDWrap
	ID_3            idwrap.IDWrap
	ItemApiID_3     idwrap.IDWrap
	CollectionID_3  idwrap.IDWrap
	IsDefault_3     bool
	BodyType_3      int8
	Name_3          string
	Prev_3          *idwrap.IDWrap
	Next_3          *idwrap.IDWrap
	ID_4            idwrap.IDWrap
	ItemApiID_4     idwrap.IDWrap
	CollectionID_4  idwrap.IDWrap
	IsDefault_4     bool
	BodyType_4      int8
	Name_4          string
	Prev_4          *idwrap.IDWrap
	Next_4          *idwrap.IDWrap
	ID_5            idwrap.IDWrap
	ItemApiID_5     idwrap.IDWrap
	CollectionID_5  idwrap.IDWrap
	IsDefault_5     bool
	BodyType_5      int8
	Name_5          string
	Prev_5          *idwrap.IDWrap
	Next_5          *idwrap.IDWrap
	ID_6            idwrap.IDWrap
	ItemApiID_6     idwrap.IDWrap
	CollectionID_6  idwrap.IDWrap
	IsDefault_6     bool
	BodyType_6      int8
	Name_6          string
	Prev_6          *idwrap.IDWrap
	Next_6          *idwrap.IDWrap
	ID_7            idwrap.IDWrap
	ItemApiID_7     idwrap.IDWrap
	CollectionID_7  idwrap.IDWrap
	IsDefault_7     bool
	BodyType_7      int8
	Name_7          string
	Prev_7          *idwrap.IDWrap
	Next_7          *idwrap.IDWrap
	ID_8            idwrap.IDWrap
	ItemApiID_8     idwrap.IDWrap
	CollectionID_8  idwrap.IDWrap
	IsDefault_8     bool
	BodyType_8      int8
	Name_8          string
	Prev_8          *idwrap.IDWrap
	Next_8          *idwrap.IDWrap
	ID_9            idwrap.IDWrap
	ItemApiID_9     idwrap.IDWrap
	CollectionID_9  idwrap.IDWrap
	IsDefault_9     bool
	BodyType_9      int8
	Name_9          string
	Prev_9          *idwrap.IDWrap
	Next_9          *idwrap.IDWrap
	ID_10           idwrap.IDWrap
	ItemApiID_10    idwrap.IDWrap
	CollectionID_10 idwrap.IDWrap
	IsDefault_10    bool
	BodyType_10     int8
	Name_10         string
	Prev_10         *idwrap.IDWrap
	Next_10         *idwrap.IDWrap
}

func (q *Queries) CreateItemApiExampleBulk(ctx context.Context, arg CreateItemApiExampleBulkParams) error {
	_, err := q.exec(ctx, q.createItemApiExampleBulkStmt, createItemApiExampleBulk,
		arg.ID,
		arg.ItemApiID,
		arg.CollectionID,
		arg.IsDefault,
		arg.BodyType,
		arg.Name,
		arg.Prev,
		arg.Next,
		arg.ID_2,
		arg.ItemApiID_2,
		arg.CollectionID_2,
		arg.IsDefault_2,
		arg.BodyType_2,
		arg.Name_2,
		arg.Prev_2,
		arg.Next_2,
		arg.ID_3,
		arg.ItemApiID_3,
		arg.CollectionID_3,
		arg.IsDefault_3,
		arg.BodyType_3,
		arg.Name_3,
		arg.Prev_3,
		arg.Next_3,
		arg.ID_4,
		arg.ItemApiID_4,
		arg.CollectionID_4,
		arg.IsDefault_4,
		arg.BodyType_4,
		arg.Name_4,
		arg.Prev_4,
		arg.Next_4,
		arg.ID_5,
		arg.ItemApiID_5,
		arg.CollectionID_5,
		arg.IsDefault_5,
		arg.BodyType_5,
		arg.Name_5,
		arg.Prev_5,
		arg.Next_5,
		arg.ID_6,
		arg.ItemApiID_6,
		arg.CollectionID_6,
		arg.IsDefault_6,
		arg.BodyType_6,
		arg.Name_6,
		arg.Prev_6,
		arg.Next_6,
		arg.ID_7,
		arg.ItemApiID_7,
		arg.CollectionID_7,
		arg.IsDefault_7,
		arg.BodyType_7,
		arg.Name_7,
		arg.Prev_7,
		arg.Next_7,
		arg.ID_8,
		arg.ItemApiID_8,
		arg.CollectionID_8,
		arg.IsDefault_8,
		arg.BodyType_8,
		arg.Name_8,
		arg.Prev_8,
		arg.Next_8,
		arg.ID_9,
		arg.ItemApiID_9,
		arg.CollectionID_9,
		arg.IsDefault_9,
		arg.BodyType_9,
		arg.Name_9,
		arg.Prev_9,
		arg.Next_9,
		arg.ID_10,
		arg.ItemApiID_10,
		arg.CollectionID_10,
		arg.IsDefault_10,
		arg.BodyType_10,
		arg.Name_10,
		arg.Prev_10,
		arg.Next_10,
	)
	return err
}

const createItemFolder = `-- name: CreateItemFolder :exec
INSERT INTO
    item_folder (id, name, parent_id, collection_id, prev, next)
VALUES
    (?, ?, ?, ?, ?, ?)
`

type CreateItemFolderParams struct {
	ID           idwrap.IDWrap
	Name         string
	ParentID     *idwrap.IDWrap
	CollectionID idwrap.IDWrap
	Prev         *idwrap.IDWrap
	Next         *idwrap.IDWrap
}

func (q *Queries) CreateItemFolder(ctx context.Context, arg CreateItemFolderParams) error {
	_, err := q.exec(ctx, q.createItemFolderStmt, createItemFolder,
		arg.ID,
		arg.Name,
		arg.ParentID,
		arg.CollectionID,
		arg.Prev,
		arg.Next,
	)
	return err
}

const createItemFolderBulk = `-- name: CreateItemFolderBulk :exec
INSERT INTO
    item_folder (id, name, parent_id, collection_id, prev, next)
VALUES
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?)
`

type CreateItemFolderBulkParams struct {
	ID              idwrap.IDWrap
	Name            string
	ParentID        *idwrap.IDWrap
	CollectionID    idwrap.IDWrap
	Prev            *idwrap.IDWrap
	Next            *idwrap.IDWrap
	ID_2            idwrap.IDWrap
	Name_2          string
	ParentID_2      *idwrap.IDWrap
	CollectionID_2  idwrap.IDWrap
	Prev_2          *idwrap.IDWrap
	Next_2          *idwrap.IDWrap
	ID_3            idwrap.IDWrap
	Name_3          string
	ParentID_3      *idwrap.IDWrap
	CollectionID_3  idwrap.IDWrap
	Prev_3          *idwrap.IDWrap
	Next_3          *idwrap.IDWrap
	ID_4            idwrap.IDWrap
	Name_4          string
	ParentID_4      *idwrap.IDWrap
	CollectionID_4  idwrap.IDWrap
	Prev_4          *idwrap.IDWrap
	Next_4          *idwrap.IDWrap
	ID_5            idwrap.IDWrap
	Name_5          string
	ParentID_5      *idwrap.IDWrap
	CollectionID_5  idwrap.IDWrap
	Prev_5          *idwrap.IDWrap
	Next_5          *idwrap.IDWrap
	ID_6            idwrap.IDWrap
	Name_6          string
	ParentID_6      *idwrap.IDWrap
	CollectionID_6  idwrap.IDWrap
	Prev_6          *idwrap.IDWrap
	Next_6          *idwrap.IDWrap
	ID_7            idwrap.IDWrap
	Name_7          string
	ParentID_7      *idwrap.IDWrap
	CollectionID_7  idwrap.IDWrap
	Prev_7          *idwrap.IDWrap
	Next_7          *idwrap.IDWrap
	ID_8            idwrap.IDWrap
	Name_8          string
	ParentID_8      *idwrap.IDWrap
	CollectionID_8  idwrap.IDWrap
	Prev_8          *idwrap.IDWrap
	Next_8          *idwrap.IDWrap
	ID_9            idwrap.IDWrap
	Name_9          string
	ParentID_9      *idwrap.IDWrap
	CollectionID_9  idwrap.IDWrap
	Prev_9          *idwrap.IDWrap
	Next_9          *idwrap.IDWrap
	ID_10           idwrap.IDWrap
	Name_10         string
	ParentID_10     *idwrap.IDWrap
	CollectionID_10 idwrap.IDWrap
	Prev_10         *idwrap.IDWrap
	Next_10         *idwrap.IDWrap
}

func (q *Queries) CreateItemFolderBulk(ctx context.Context, arg CreateItemFolderBulkParams) error {
	_, err := q.exec(ctx, q.createItemFolderBulkStmt, createItemFolderBulk,
		arg.ID,
		arg.Name,
		arg.ParentID,
		arg.CollectionID,
		arg.Prev,
		arg.Next,
		arg.ID_2,
		arg.Name_2,
		arg.ParentID_2,
		arg.CollectionID_2,
		arg.Prev_2,
		arg.Next_2,
		arg.ID_3,
		arg.Name_3,
		arg.ParentID_3,
		arg.CollectionID_3,
		arg.Prev_3,
		arg.Next_3,
		arg.ID_4,
		arg.Name_4,
		arg.ParentID_4,
		arg.CollectionID_4,
		arg.Prev_4,
		arg.Next_4,
		arg.ID_5,
		arg.Name_5,
		arg.ParentID_5,
		arg.CollectionID_5,
		arg.Prev_5,
		arg.Next_5,
		arg.ID_6,
		arg.Name_6,
		arg.ParentID_6,
		arg.CollectionID_6,
		arg.Prev_6,
		arg.Next_6,
		arg.ID_7,
		arg.Name_7,
		arg.ParentID_7,
		arg.CollectionID_7,
		arg.Prev_7,
		arg.Next_7,
		arg.ID_8,
		arg.Name_8,
		arg.ParentID_8,
		arg.CollectionID_8,
		arg.Prev_8,
		arg.Next_8,
		arg.ID_9,
		arg.Name_9,
		arg.ParentID_9,
		arg.CollectionID_9,
		arg.Prev_9,
		arg.Next_9,
		arg.ID_10,
		arg.Name_10,
		arg.ParentID_10,
		arg.CollectionID_10,
		arg.Prev_10,
		arg.Next_10,
	)
	return err
}

const createQuery = `-- name: CreateQuery :exec
INSERT INTO
  example_query (id, example_id, query_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateQueryParams struct {
	ID          idwrap.IDWrap
	ExampleID   idwrap.IDWrap
	QueryKey    string
	Enable      bool
	Description string
	Value       string
}

func (q *Queries) CreateQuery(ctx context.Context, arg CreateQueryParams) error {
	_, err := q.exec(ctx, q.createQueryStmt, createQuery,
		arg.ID,
		arg.ExampleID,
		arg.QueryKey,
		arg.Enable,
		arg.Description,
		arg.Value,
	)
	return err
}

const createQueryBulk = `-- name: CreateQueryBulk :exec
INSERT INTO
  example_query (id, example_id, query_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?)
`

type CreateQueryBulkParams struct {
	ID             idwrap.IDWrap
	ExampleID      idwrap.IDWrap
	QueryKey       string
	Enable         bool
	Description    string
	Value          string
	ID_2           idwrap.IDWrap
	ExampleID_2    idwrap.IDWrap
	QueryKey_2     string
	Enable_2       bool
	Description_2  string
	Value_2        string
	ID_3           idwrap.IDWrap
	ExampleID_3    idwrap.IDWrap
	QueryKey_3     string
	Enable_3       bool
	Description_3  string
	Value_3        string
	ID_4           idwrap.IDWrap
	ExampleID_4    idwrap.IDWrap
	QueryKey_4     string
	Enable_4       bool
	Description_4  string
	Value_4        string
	ID_5           idwrap.IDWrap
	ExampleID_5    idwrap.IDWrap
	QueryKey_5     string
	Enable_5       bool
	Description_5  string
	Value_5        string
	ID_6           idwrap.IDWrap
	ExampleID_6    idwrap.IDWrap
	QueryKey_6     string
	Enable_6       bool
	Description_6  string
	Value_6        string
	ID_7           idwrap.IDWrap
	ExampleID_7    idwrap.IDWrap
	QueryKey_7     string
	Enable_7       bool
	Description_7  string
	Value_7        string
	ID_8           idwrap.IDWrap
	ExampleID_8    idwrap.IDWrap
	QueryKey_8     string
	Enable_8       bool
	Description_8  string
	Value_8        string
	ID_9           idwrap.IDWrap
	ExampleID_9    idwrap.IDWrap
	QueryKey_9     string
	Enable_9       bool
	Description_9  string
	Value_9        string
	ID_10          idwrap.IDWrap
	ExampleID_10   idwrap.IDWrap
	QueryKey_10    string
	Enable_10      bool
	Description_10 string
	Value_10       string
}

func (q *Queries) CreateQueryBulk(ctx context.Context, arg CreateQueryBulkParams) error {
	_, err := q.exec(ctx, q.createQueryBulkStmt, createQueryBulk,
		arg.ID,
		arg.ExampleID,
		arg.QueryKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID_2,
		arg.ExampleID_2,
		arg.QueryKey_2,
		arg.Enable_2,
		arg.Description_2,
		arg.Value_2,
		arg.ID_3,
		arg.ExampleID_3,
		arg.QueryKey_3,
		arg.Enable_3,
		arg.Description_3,
		arg.Value_3,
		arg.ID_4,
		arg.ExampleID_4,
		arg.QueryKey_4,
		arg.Enable_4,
		arg.Description_4,
		arg.Value_4,
		arg.ID_5,
		arg.ExampleID_5,
		arg.QueryKey_5,
		arg.Enable_5,
		arg.Description_5,
		arg.Value_5,
		arg.ID_6,
		arg.ExampleID_6,
		arg.QueryKey_6,
		arg.Enable_6,
		arg.Description_6,
		arg.Value_6,
		arg.ID_7,
		arg.ExampleID_7,
		arg.QueryKey_7,
		arg.Enable_7,
		arg.Description_7,
		arg.Value_7,
		arg.ID_8,
		arg.ExampleID_8,
		arg.QueryKey_8,
		arg.Enable_8,
		arg.Description_8,
		arg.Value_8,
		arg.ID_9,
		arg.ExampleID_9,
		arg.QueryKey_9,
		arg.Enable_9,
		arg.Description_9,
		arg.Value_9,
		arg.ID_10,
		arg.ExampleID_10,
		arg.QueryKey_10,
		arg.Enable_10,
		arg.Description_10,
		arg.Value_10,
	)
	return err
}

const createResultApi = `-- name: CreateResultApi :exec
INSERT INTO
  result_api (
    id,
    trigger_type,
    trigger_by,
    name,
    status,
    time,
    duration,
    http_resp
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateResultApiParams struct {
	ID          idwrap.IDWrap
	TriggerType mresultapi.TriggerType
	TriggerBy   idwrap.IDWrap
	Name        string
	Status      string
	Time        int64
	Duration    int64
	HttpResp    mresultapi.HttpResp
}

func (q *Queries) CreateResultApi(ctx context.Context, arg CreateResultApiParams) error {
	_, err := q.exec(ctx, q.createResultApiStmt, createResultApi,
		arg.ID,
		arg.TriggerType,
		arg.TriggerBy,
		arg.Name,
		arg.Status,
		arg.Time,
		arg.Duration,
		arg.HttpResp,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
  users (
    id,
    email,
    password_hash,
    provider_type,
    provider_id
  )
VALUES
  (?, ?, ?, ?, ?) RETURNING id, email, password_hash, provider_type, provider_id, status
`

type CreateUserParams struct {
	ID           idwrap.IDWrap
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.ProviderType,
		arg.ProviderID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
		&i.Status,
	)
	return i, err
}

const createVariable = `-- name: CreateVariable :exec
INSERT INTO
  variable (id, env_id, var_key, value, enabled, description)
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateVariableParams struct {
	ID          idwrap.IDWrap
	EnvID       idwrap.IDWrap
	VarKey      string
	Value       string
	Enabled     bool
	Description string
}

func (q *Queries) CreateVariable(ctx context.Context, arg CreateVariableParams) error {
	_, err := q.exec(ctx, q.createVariableStmt, createVariable,
		arg.ID,
		arg.EnvID,
		arg.VarKey,
		arg.Value,
		arg.Enabled,
		arg.Description,
	)
	return err
}

const createVariableBulk = `-- name: CreateVariableBulk :exec
INSERT INTO
  variable (id, env_id, var_key, value, enabled, description)
VALUES
  (?, ?, ?, ?),
  (?, ?, ?, ?),
  (?, ?, ?, ?),
  (?, ?, ?, ?),
  (?, ?, ?, ?)
`

type CreateVariableBulkParams struct {
	ID       idwrap.IDWrap
	EnvID    idwrap.IDWrap
	VarKey   string
	Value    string
	ID_2     idwrap.IDWrap
	EnvID_2  idwrap.IDWrap
	VarKey_2 string
	Value_2  string
	ID_3     idwrap.IDWrap
	EnvID_3  idwrap.IDWrap
	VarKey_3 string
	Value_3  string
	ID_4     idwrap.IDWrap
	EnvID_4  idwrap.IDWrap
	VarKey_4 string
	Value_4  string
	ID_5     idwrap.IDWrap
	EnvID_5  idwrap.IDWrap
	VarKey_5 string
	Value_5  string
}

func (q *Queries) CreateVariableBulk(ctx context.Context, arg CreateVariableBulkParams) error {
	_, err := q.exec(ctx, q.createVariableBulkStmt, createVariableBulk,
		arg.ID,
		arg.EnvID,
		arg.VarKey,
		arg.Value,
		arg.ID_2,
		arg.EnvID_2,
		arg.VarKey_2,
		arg.Value_2,
		arg.ID_3,
		arg.EnvID_3,
		arg.VarKey_3,
		arg.Value_3,
		arg.ID_4,
		arg.EnvID_4,
		arg.VarKey_4,
		arg.Value_4,
		arg.ID_5,
		arg.EnvID_5,
		arg.VarKey_5,
		arg.Value_5,
	)
	return err
}

const createWorkspace = `-- name: CreateWorkspace :exec
INSERT INTO
  workspaces (id, name, updated)
VALUES
  (?, ?, ?)
`

type CreateWorkspaceParams struct {
	ID      idwrap.IDWrap
	Name    string
	Updated int64
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) error {
	_, err := q.exec(ctx, q.createWorkspaceStmt, createWorkspace, arg.ID, arg.Name, arg.Updated)
	return err
}

const createWorkspaceUser = `-- name: CreateWorkspaceUser :exec
INSERT INTO
  workspaces_users (id, workspace_id, user_id, role)
VALUES
  (?, ?, ?, ?)
`

type CreateWorkspaceUserParams struct {
	ID          idwrap.IDWrap
	WorkspaceID idwrap.IDWrap
	UserID      idwrap.IDWrap
	Role        int8
}

func (q *Queries) CreateWorkspaceUser(ctx context.Context, arg CreateWorkspaceUserParams) error {
	_, err := q.exec(ctx, q.createWorkspaceUserStmt, createWorkspaceUser,
		arg.ID,
		arg.WorkspaceID,
		arg.UserID,
		arg.Role,
	)
	return err
}

const deleteAssert = `-- name: DeleteAssert :exec
DELETE FROM assertion
WHERE
  id = ?
`

func (q *Queries) DeleteAssert(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteAssertStmt, deleteAssert, id)
	return err
}

const deleteAssertResult = `-- name: DeleteAssertResult :exec
DELETE FROM assertion_result
WHERE
  id = ?
`

func (q *Queries) DeleteAssertResult(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteAssertResultStmt, deleteAssertResult, id)
	return err
}

const deleteBodyForm = `-- name: DeleteBodyForm :exec
DELETE FROM example_body_form
WHERE
  id = ?
`

func (q *Queries) DeleteBodyForm(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteBodyFormStmt, deleteBodyForm, id)
	return err
}

const deleteBodyRaw = `-- name: DeleteBodyRaw :exec
DELETE FROM example_body_raw
WHERE
  id = ?
`

func (q *Queries) DeleteBodyRaw(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteBodyRawStmt, deleteBodyRaw, id)
	return err
}

const deleteBodyURLEncoded = `-- name: DeleteBodyURLEncoded :exec
DELETE FROM example_body_urlencoded
WHERE
  id = ?
`

func (q *Queries) DeleteBodyURLEncoded(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteBodyURLEncodedStmt, deleteBodyURLEncoded, id)
	return err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections
WHERE
  id = ?
`

func (q *Queries) DeleteCollection(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteCollectionStmt, deleteCollection, id)
	return err
}

const deleteEnvironment = `-- name: DeleteEnvironment :exec
DELETE FROM environment
WHERE
  id = ?
`

func (q *Queries) DeleteEnvironment(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteEnvironmentStmt, deleteEnvironment, id)
	return err
}

const deleteExampleResp = `-- name: DeleteExampleResp :exec
DELETE FROM example_resp
WHERE
  id = ?
`

func (q *Queries) DeleteExampleResp(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteExampleRespStmt, deleteExampleResp, id)
	return err
}

const deleteExampleRespHeader = `-- name: DeleteExampleRespHeader :exec
DELETE FROM example_resp_header
WHERE
  id = ?
`

func (q *Queries) DeleteExampleRespHeader(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteExampleRespHeaderStmt, deleteExampleRespHeader, id)
	return err
}

const deleteHeader = `-- name: DeleteHeader :exec
DELETE FROM example_header
WHERE
  id = ?
`

func (q *Queries) DeleteHeader(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteHeaderStmt, deleteHeader, id)
	return err
}

const deleteItemApi = `-- name: DeleteItemApi :exec
DELETE FROM item_api
WHERE
  id = ?
`

func (q *Queries) DeleteItemApi(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteItemApiStmt, deleteItemApi, id)
	return err
}

const deleteItemApiExample = `-- name: DeleteItemApiExample :exec
DELETE FROM item_api_example
WHERE
  id = ?
`

func (q *Queries) DeleteItemApiExample(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteItemApiExampleStmt, deleteItemApiExample, id)
	return err
}

const deleteItemFolder = `-- name: DeleteItemFolder :exec
DELETE FROM item_folder
WHERE
  id = ?
`

func (q *Queries) DeleteItemFolder(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteItemFolderStmt, deleteItemFolder, id)
	return err
}

const deleteQuery = `-- name: DeleteQuery :exec
DELETE FROM example_query
WHERE
  id = ?
`

func (q *Queries) DeleteQuery(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteQueryStmt, deleteQuery, id)
	return err
}

const deleteResultApi = `-- name: DeleteResultApi :exec
DELETE FROM result_api
WHERE
  id = ?
`

func (q *Queries) DeleteResultApi(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteResultApiStmt, deleteResultApi, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE
  id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const deleteVariable = `-- name: DeleteVariable :exec
DELETE FROM variable
WHERE
  id = ?
`

func (q *Queries) DeleteVariable(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteVariableStmt, deleteVariable, id)
	return err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM workspaces
WHERE
  id = ?
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteWorkspaceStmt, deleteWorkspace, id)
	return err
}

const deleteWorkspaceUser = `-- name: DeleteWorkspaceUser :exec
DELETE FROM workspaces_users
WHERE
  id = ?
`

func (q *Queries) DeleteWorkspaceUser(ctx context.Context, id idwrap.IDWrap) error {
	_, err := q.exec(ctx, q.deleteWorkspaceUserStmt, deleteWorkspaceUser, id)
	return err
}

const getActiveEnvironmentsByWorkspaceID = `-- name: GetActiveEnvironmentsByWorkspaceID :one
SELECT
  id,
  workspace_id,
  active,
  type,
  name,
  description
FROM 
  environment
WHERE
  workspace_id = ? AND active = true
LIMIT 1
`

func (q *Queries) GetActiveEnvironmentsByWorkspaceID(ctx context.Context, workspaceID idwrap.IDWrap) (Environment, error) {
	row := q.queryRow(ctx, q.getActiveEnvironmentsByWorkspaceIDStmt, getActiveEnvironmentsByWorkspaceID, workspaceID)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Active,
		&i.Type,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getAssert = `-- name: GetAssert :one
/*
* INFO: Asserts
*/

SELECT 
  id,
  example_id,
  type,
  path,
  value,
  enable,
  prev,
  next
FROM 
  assertion
WHERE
  id = ?
LIMIT 1
`

func (q *Queries) GetAssert(ctx context.Context, id idwrap.IDWrap) (Assertion, error) {
	row := q.queryRow(ctx, q.getAssertStmt, getAssert, id)
	var i Assertion
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.Type,
		&i.Path,
		&i.Value,
		&i.Enable,
		&i.Prev,
		&i.Next,
	)
	return i, err
}

const getAssertResult = `-- name: GetAssertResult :one
/*
* INFO: assert_result
*/

SELECT 
  id,
  assertion_id,
  result
FROM 
  assertion_result
WHERE
  id = ?
LIMIT 1
`

func (q *Queries) GetAssertResult(ctx context.Context, id idwrap.IDWrap) (AssertionResult, error) {
	row := q.queryRow(ctx, q.getAssertResultStmt, getAssertResult, id)
	var i AssertionResult
	err := row.Scan(&i.ID, &i.AssertionID, &i.Result)
	return i, err
}

const getAssertResultsByAssertID = `-- name: GetAssertResultsByAssertID :many
SELECT 
  id,
  assertion_id,
  result
FROM 
  assertion_result
WHERE
  assertion_id = ?
`

func (q *Queries) GetAssertResultsByAssertID(ctx context.Context, assertionID idwrap.IDWrap) ([]AssertionResult, error) {
	rows, err := q.query(ctx, q.getAssertResultsByAssertIDStmt, getAssertResultsByAssertID, assertionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssertionResult{}
	for rows.Next() {
		var i AssertionResult
		if err := rows.Scan(&i.ID, &i.AssertionID, &i.Result); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssertsByExampleID = `-- name: GetAssertsByExampleID :many
SELECT 
  id,
  example_id,
  type,
  path,
  value,
  enable,
  prev,
  next
FROM 
  assertion
WHERE
  example_id = ?
`

func (q *Queries) GetAssertsByExampleID(ctx context.Context, exampleID idwrap.IDWrap) ([]Assertion, error) {
	rows, err := q.query(ctx, q.getAssertsByExampleIDStmt, getAssertsByExampleID, exampleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Assertion{}
	for rows.Next() {
		var i Assertion
		if err := rows.Scan(
			&i.ID,
			&i.ExampleID,
			&i.Type,
			&i.Path,
			&i.Value,
			&i.Enable,
			&i.Prev,
			&i.Next,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBodyForm = `-- name: GetBodyForm :one
/*
*
* body_form
*
*/

SELECT 
  id,
  example_id,
  body_key,
  enable,
  description,
  value
FROM 
    example_body_form 
WHERE 
    id = ?
LIMIT 1
`

func (q *Queries) GetBodyForm(ctx context.Context, id idwrap.IDWrap) (ExampleBodyForm, error) {
	row := q.queryRow(ctx, q.getBodyFormStmt, getBodyForm, id)
	var i ExampleBodyForm
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.BodyKey,
		&i.Enable,
		&i.Description,
		&i.Value,
	)
	return i, err
}

const getBodyFormsByExampleID = `-- name: GetBodyFormsByExampleID :many
SELECT
  id,
  example_id,
  body_key,
  enable,
  description,
  value
FROM 
    example_body_form 
WHERE 
    example_id = ?
`

func (q *Queries) GetBodyFormsByExampleID(ctx context.Context, exampleID idwrap.IDWrap) ([]ExampleBodyForm, error) {
	rows, err := q.query(ctx, q.getBodyFormsByExampleIDStmt, getBodyFormsByExampleID, exampleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExampleBodyForm{}
	for rows.Next() {
		var i ExampleBodyForm
		if err := rows.Scan(
			&i.ID,
			&i.ExampleID,
			&i.BodyKey,
			&i.Enable,
			&i.Description,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBodyRaw = `-- name: GetBodyRaw :one
/*
* Body Raw
*/

SELECT 
  id,
  example_id,
  visualize_mode,
  compress_type,
  data
FROM 
  example_body_raw
WHERE
  id = ?
LIMIT 1
`

func (q *Queries) GetBodyRaw(ctx context.Context, id idwrap.IDWrap) (ExampleBodyRaw, error) {
	row := q.queryRow(ctx, q.getBodyRawStmt, getBodyRaw, id)
	var i ExampleBodyRaw
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.VisualizeMode,
		&i.CompressType,
		&i.Data,
	)
	return i, err
}

const getBodyRawsByExampleID = `-- name: GetBodyRawsByExampleID :one
SELECT 
  id,
  example_id,
  visualize_mode,
  compress_type,
  data
FROM 
  example_body_raw
WHERE
  example_id = ?
LIMIT 1
`

func (q *Queries) GetBodyRawsByExampleID(ctx context.Context, exampleID idwrap.IDWrap) (ExampleBodyRaw, error) {
	row := q.queryRow(ctx, q.getBodyRawsByExampleIDStmt, getBodyRawsByExampleID, exampleID)
	var i ExampleBodyRaw
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.VisualizeMode,
		&i.CompressType,
		&i.Data,
	)
	return i, err
}

const getBodyUrlEncoded = `-- name: GetBodyUrlEncoded :one

SELECT 
  id,
  example_id,
  body_key,
  enable,
  description,
  value
FROM 
  example_body_urlencoded
WHERE
  id = ?
LIMIT 1
`

// Body Url Encoded
func (q *Queries) GetBodyUrlEncoded(ctx context.Context, id idwrap.IDWrap) (ExampleBodyUrlencoded, error) {
	row := q.queryRow(ctx, q.getBodyUrlEncodedStmt, getBodyUrlEncoded, id)
	var i ExampleBodyUrlencoded
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.BodyKey,
		&i.Enable,
		&i.Description,
		&i.Value,
	)
	return i, err
}

const getBodyUrlEncodedsByExampleID = `-- name: GetBodyUrlEncodedsByExampleID :many
SELECT 
  id,
  example_id,
  body_key,
  enable,
  description,
  value
FROM 
  example_body_urlencoded
WHERE
  example_id = ?
`

func (q *Queries) GetBodyUrlEncodedsByExampleID(ctx context.Context, exampleID idwrap.IDWrap) ([]ExampleBodyUrlencoded, error) {
	rows, err := q.query(ctx, q.getBodyUrlEncodedsByExampleIDStmt, getBodyUrlEncodedsByExampleID, exampleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExampleBodyUrlencoded{}
	for rows.Next() {
		var i ExampleBodyUrlencoded
		if err := rows.Scan(
			&i.ID,
			&i.ExampleID,
			&i.BodyKey,
			&i.Enable,
			&i.Description,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollection = `-- name: GetCollection :one
SELECT
  id,
  owner_id,
  name
FROM
  collections
WHERE
  id = ?
LIMIT
  1
`

// Collections
func (q *Queries) GetCollection(ctx context.Context, id idwrap.IDWrap) (Collection, error) {
	row := q.queryRow(ctx, q.getCollectionStmt, getCollection, id)
	var i Collection
	err := row.Scan(&i.ID, &i.OwnerID, &i.Name)
	return i, err
}

const getCollectionByOwnerID = `-- name: GetCollectionByOwnerID :many
SELECT
  id,
  owner_id,
  name
FROM
  collections
WHERE
  owner_id = ?
`

func (q *Queries) GetCollectionByOwnerID(ctx context.Context, ownerID idwrap.IDWrap) ([]Collection, error) {
	rows, err := q.query(ctx, q.getCollectionByOwnerIDStmt, getCollectionByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.OwnerID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionByPlatformIDandType = `-- name: GetCollectionByPlatformIDandType :many
SELECT
  id,
  owner_id,
  name
FROM
  collections
WHERE
  id = ?
`

func (q *Queries) GetCollectionByPlatformIDandType(ctx context.Context, id idwrap.IDWrap) ([]Collection, error) {
	rows, err := q.query(ctx, q.getCollectionByPlatformIDandTypeStmt, getCollectionByPlatformIDandType, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.OwnerID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionOwnerID = `-- name: GetCollectionOwnerID :one
SELECT
  owner_id
FROM
  collections
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetCollectionOwnerID(ctx context.Context, id idwrap.IDWrap) (idwrap.IDWrap, error) {
	row := q.queryRow(ctx, q.getCollectionOwnerIDStmt, getCollectionOwnerID, id)
	var owner_id idwrap.IDWrap
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getEnvironment = `-- name: GetEnvironment :one
/*
* Environment
*/

SELECT
  id,
  workspace_id,
  active,
  type,
  name,
  description
FROM 
  environment
WHERE
  id = ?
LIMIT 1
`

func (q *Queries) GetEnvironment(ctx context.Context, id idwrap.IDWrap) (Environment, error) {
	row := q.queryRow(ctx, q.getEnvironmentStmt, getEnvironment, id)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Active,
		&i.Type,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getEnvironmentsByWorkspaceID = `-- name: GetEnvironmentsByWorkspaceID :many
SELECT
  id,
  workspace_id,
  active,
  type,
  name,
  description
FROM 
  environment
WHERE
  workspace_id = ?
`

func (q *Queries) GetEnvironmentsByWorkspaceID(ctx context.Context, workspaceID idwrap.IDWrap) ([]Environment, error) {
	rows, err := q.query(ctx, q.getEnvironmentsByWorkspaceIDStmt, getEnvironmentsByWorkspaceID, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Environment{}
	for rows.Next() {
		var i Environment
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Active,
			&i.Type,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExampleResp = `-- name: GetExampleResp :one
SELECT
    id, example_id, status, body, body_compress_type, duration
FROM 
  example_resp
WHERE
  id = ?
LIMIT 1
`

func (q *Queries) GetExampleResp(ctx context.Context, id idwrap.IDWrap) (ExampleResp, error) {
	row := q.queryRow(ctx, q.getExampleRespStmt, getExampleResp, id)
	var i ExampleResp
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.Status,
		&i.Body,
		&i.BodyCompressType,
		&i.Duration,
	)
	return i, err
}

const getExampleRespHeader = `-- name: GetExampleRespHeader :one
/*
* example_resp_header
*/

SELECT 
  id,
  example_resp_id,
  header_key,
  value
FROM 
  example_resp_header
WHERE
  id = ?
LIMIT 1
`

func (q *Queries) GetExampleRespHeader(ctx context.Context, id idwrap.IDWrap) (ExampleRespHeader, error) {
	row := q.queryRow(ctx, q.getExampleRespHeaderStmt, getExampleRespHeader, id)
	var i ExampleRespHeader
	err := row.Scan(
		&i.ID,
		&i.ExampleRespID,
		&i.HeaderKey,
		&i.Value,
	)
	return i, err
}

const getExampleRespHeadersByRespID = `-- name: GetExampleRespHeadersByRespID :many
SELECT 
  id,
  example_resp_id,
  header_key,
  value
FROM 
  example_resp_header
WHERE
  example_resp_id = ?
`

func (q *Queries) GetExampleRespHeadersByRespID(ctx context.Context, exampleRespID idwrap.IDWrap) ([]ExampleRespHeader, error) {
	rows, err := q.query(ctx, q.getExampleRespHeadersByRespIDStmt, getExampleRespHeadersByRespID, exampleRespID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExampleRespHeader{}
	for rows.Next() {
		var i ExampleRespHeader
		if err := rows.Scan(
			&i.ID,
			&i.ExampleRespID,
			&i.HeaderKey,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExampleRespsByExampleID = `-- name: GetExampleRespsByExampleID :one
SELECT
    id, example_id, status, body, body_compress_type, duration
FROM
  example_resp
WHERE
  example_id = ?
LIMIT 1
`

func (q *Queries) GetExampleRespsByExampleID(ctx context.Context, exampleID idwrap.IDWrap) (ExampleResp, error) {
	row := q.queryRow(ctx, q.getExampleRespsByExampleIDStmt, getExampleRespsByExampleID, exampleID)
	var i ExampleResp
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.Status,
		&i.Body,
		&i.BodyCompressType,
		&i.Duration,
	)
	return i, err
}

const getHeader = `-- name: GetHeader :one
/*
*
* Header 
*
*/

SELECT 
  id,
  example_id,
  header_key,
  enable,
  description,
  value
FROM 
  example_header
WHERE
  id = ?
LIMIT 1
`

func (q *Queries) GetHeader(ctx context.Context, id idwrap.IDWrap) (ExampleHeader, error) {
	row := q.queryRow(ctx, q.getHeaderStmt, getHeader, id)
	var i ExampleHeader
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.HeaderKey,
		&i.Enable,
		&i.Description,
		&i.Value,
	)
	return i, err
}

const getHeadersByExampleID = `-- name: GetHeadersByExampleID :many
SELECT
  id,
  example_id,
  header_key,
  enable,
  description,
  value
FROM 
  example_header
WHERE
  example_id = ?
`

func (q *Queries) GetHeadersByExampleID(ctx context.Context, exampleID idwrap.IDWrap) ([]ExampleHeader, error) {
	rows, err := q.query(ctx, q.getHeadersByExampleIDStmt, getHeadersByExampleID, exampleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExampleHeader{}
	for rows.Next() {
		var i ExampleHeader
		if err := rows.Scan(
			&i.ID,
			&i.ExampleID,
			&i.HeaderKey,
			&i.Enable,
			&i.Description,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemApi = `-- name: GetItemApi :one
SELECT
  id,
  collection_id,
  parent_id,
  name,
  url,
  method,
  prev,
  next
FROM
  item_api
WHERE
  id = ?
LIMIT
  1
`

// This file is the source of truth for saas application's schema
//
// ItemApi
func (q *Queries) GetItemApi(ctx context.Context, id idwrap.IDWrap) (ItemApi, error) {
	row := q.queryRow(ctx, q.getItemApiStmt, getItemApi, id)
	var i ItemApi
	err := row.Scan(
		&i.ID,
		&i.CollectionID,
		&i.ParentID,
		&i.Name,
		&i.Url,
		&i.Method,
		&i.Prev,
		&i.Next,
	)
	return i, err
}

const getItemApiExample = `-- name: GetItemApiExample :one
SELECT
    id,
    item_api_id,
    collection_id,
    is_default,
    body_type,
    name,
    prev,
    next
FROM
  item_api_example
WHERE
  id = ?
LIMIT
  1
`

// Item Api Example
func (q *Queries) GetItemApiExample(ctx context.Context, id idwrap.IDWrap) (ItemApiExample, error) {
	row := q.queryRow(ctx, q.getItemApiExampleStmt, getItemApiExample, id)
	var i ItemApiExample
	err := row.Scan(
		&i.ID,
		&i.ItemApiID,
		&i.CollectionID,
		&i.IsDefault,
		&i.BodyType,
		&i.Name,
		&i.Prev,
		&i.Next,
	)
	return i, err
}

const getItemApiExampleByCollectionID = `-- name: GetItemApiExampleByCollectionID :many
SELECT
    id,
    item_api_id,
    collection_id,
    is_default,
    body_type,
    name,
    prev,
    next
FROM
  item_api_example
WHERE
  collection_id = ?
`

func (q *Queries) GetItemApiExampleByCollectionID(ctx context.Context, collectionID idwrap.IDWrap) ([]ItemApiExample, error) {
	rows, err := q.query(ctx, q.getItemApiExampleByCollectionIDStmt, getItemApiExampleByCollectionID, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemApiExample{}
	for rows.Next() {
		var i ItemApiExample
		if err := rows.Scan(
			&i.ID,
			&i.ItemApiID,
			&i.CollectionID,
			&i.IsDefault,
			&i.BodyType,
			&i.Name,
			&i.Prev,
			&i.Next,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemApiExampleDefault = `-- name: GetItemApiExampleDefault :one
SELECT
    id,
    item_api_id,
    collection_id,
    is_default,
    body_type,
    name,
    prev,
    next
FROM
  item_api_example
WHERE
  item_api_id = ?
  AND is_default = true
LIMIT
  1
`

func (q *Queries) GetItemApiExampleDefault(ctx context.Context, itemApiID idwrap.IDWrap) (ItemApiExample, error) {
	row := q.queryRow(ctx, q.getItemApiExampleDefaultStmt, getItemApiExampleDefault, itemApiID)
	var i ItemApiExample
	err := row.Scan(
		&i.ID,
		&i.ItemApiID,
		&i.CollectionID,
		&i.IsDefault,
		&i.BodyType,
		&i.Name,
		&i.Prev,
		&i.Next,
	)
	return i, err
}

const getItemApiExamples = `-- name: GetItemApiExamples :many
SELECT
    id,
    item_api_id,
    collection_id,
    is_default,
    body_type,
    name,
    prev,
    next
FROM
  item_api_example
WHERE
  item_api_id = ?
  AND is_default = false
`

func (q *Queries) GetItemApiExamples(ctx context.Context, itemApiID idwrap.IDWrap) ([]ItemApiExample, error) {
	rows, err := q.query(ctx, q.getItemApiExamplesStmt, getItemApiExamples, itemApiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemApiExample{}
	for rows.Next() {
		var i ItemApiExample
		if err := rows.Scan(
			&i.ID,
			&i.ItemApiID,
			&i.CollectionID,
			&i.IsDefault,
			&i.BodyType,
			&i.Name,
			&i.Prev,
			&i.Next,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemApiOwnerID = `-- name: GetItemApiOwnerID :one
SELECT
  c.owner_id
FROM
  collections c
  INNER JOIN item_api i ON c.id = i.collection_id
WHERE
  i.id = ?
LIMIT
  1
`

func (q *Queries) GetItemApiOwnerID(ctx context.Context, id idwrap.IDWrap) (idwrap.IDWrap, error) {
	row := q.queryRow(ctx, q.getItemApiOwnerIDStmt, getItemApiOwnerID, id)
	var owner_id idwrap.IDWrap
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getItemFolder = `-- name: GetItemFolder :one


SELECT
    id, collection_id, parent_id, name, prev, next
FROM
  item_folder
WHERE
  id = ?
LIMIT
  1
`

// ItemFolder
func (q *Queries) GetItemFolder(ctx context.Context, id idwrap.IDWrap) (ItemFolder, error) {
	row := q.queryRow(ctx, q.getItemFolderStmt, getItemFolder, id)
	var i ItemFolder
	err := row.Scan(
		&i.ID,
		&i.CollectionID,
		&i.ParentID,
		&i.Name,
		&i.Prev,
		&i.Next,
	)
	return i, err
}

const getItemFolderOwnerID = `-- name: GetItemFolderOwnerID :one
SELECT
  c.owner_id
FROM
  collections c
  INNER JOIN item_folder i ON c.id = i.collection_id
WHERE
  i.id = ?
LIMIT
  1
`

func (q *Queries) GetItemFolderOwnerID(ctx context.Context, id idwrap.IDWrap) (idwrap.IDWrap, error) {
	row := q.queryRow(ctx, q.getItemFolderOwnerIDStmt, getItemFolderOwnerID, id)
	var owner_id idwrap.IDWrap
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getItemFoldersByCollectionID = `-- name: GetItemFoldersByCollectionID :many
SELECT
    id, collection_id, parent_id, name, prev, next
FROM
  item_folder
WHERE
  collection_id = ?
`

func (q *Queries) GetItemFoldersByCollectionID(ctx context.Context, collectionID idwrap.IDWrap) ([]ItemFolder, error) {
	rows, err := q.query(ctx, q.getItemFoldersByCollectionIDStmt, getItemFoldersByCollectionID, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemFolder{}
	for rows.Next() {
		var i ItemFolder
		if err := rows.Scan(
			&i.ID,
			&i.CollectionID,
			&i.ParentID,
			&i.Name,
			&i.Prev,
			&i.Next,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsApiByCollectionID = `-- name: GetItemsApiByCollectionID :many
SELECT
  id,
  collection_id,
  parent_id,
  name,
  url,
  method,
  prev,
  next
FROM
  item_api
WHERE
  collection_id = ?
`

func (q *Queries) GetItemsApiByCollectionID(ctx context.Context, collectionID idwrap.IDWrap) ([]ItemApi, error) {
	rows, err := q.query(ctx, q.getItemsApiByCollectionIDStmt, getItemsApiByCollectionID, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemApi{}
	for rows.Next() {
		var i ItemApi
		if err := rows.Scan(
			&i.ID,
			&i.CollectionID,
			&i.ParentID,
			&i.Name,
			&i.Url,
			&i.Method,
			&i.Prev,
			&i.Next,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQueriesByExampleID = `-- name: GetQueriesByExampleID :many
SELECT
  id,
  example_id,
  query_key,
  enable,
  description,
  value
FROM 
  example_query
WHERE
  example_id = ?
`

func (q *Queries) GetQueriesByExampleID(ctx context.Context, exampleID idwrap.IDWrap) ([]ExampleQuery, error) {
	rows, err := q.query(ctx, q.getQueriesByExampleIDStmt, getQueriesByExampleID, exampleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExampleQuery{}
	for rows.Next() {
		var i ExampleQuery
		if err := rows.Scan(
			&i.ID,
			&i.ExampleID,
			&i.QueryKey,
			&i.Enable,
			&i.Description,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuery = `-- name: GetQuery :one
/*
*
* Query
*
*/

SELECT 
  id,
  example_id,
  query_key,
  enable,
  description,
  value
FROM 
  example_query
WHERE
  id = ?
LIMIT 1
`

func (q *Queries) GetQuery(ctx context.Context, id idwrap.IDWrap) (ExampleQuery, error) {
	row := q.queryRow(ctx, q.getQueryStmt, getQuery, id)
	var i ExampleQuery
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.QueryKey,
		&i.Enable,
		&i.Description,
		&i.Value,
	)
	return i, err
}

const getResultApi = `-- name: GetResultApi :one
SELECT
  id, trigger_type, trigger_by, name, status, time, duration, http_resp
FROM
  result_api
WHERE
  id = ?
LIMIT
  1
`

// ResultAPI
func (q *Queries) GetResultApi(ctx context.Context, id idwrap.IDWrap) (ResultApi, error) {
	row := q.queryRow(ctx, q.getResultApiStmt, getResultApi, id)
	var i ResultApi
	err := row.Scan(
		&i.ID,
		&i.TriggerType,
		&i.TriggerBy,
		&i.Name,
		&i.Status,
		&i.Time,
		&i.Duration,
		&i.HttpResp,
	)
	return i, err
}

const getResultApiByTriggerBy = `-- name: GetResultApiByTriggerBy :many
SELECT
  id, trigger_type, trigger_by, name, status, time, duration, http_resp
FROM
  result_api
WHERE
  trigger_by = ?
`

func (q *Queries) GetResultApiByTriggerBy(ctx context.Context, triggerBy idwrap.IDWrap) ([]ResultApi, error) {
	rows, err := q.query(ctx, q.getResultApiByTriggerByStmt, getResultApiByTriggerBy, triggerBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResultApi{}
	for rows.Next() {
		var i ResultApi
		if err := rows.Scan(
			&i.ID,
			&i.TriggerType,
			&i.TriggerBy,
			&i.Name,
			&i.Status,
			&i.Time,
			&i.Duration,
			&i.HttpResp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultApiByTriggerByAndTriggerType = `-- name: GetResultApiByTriggerByAndTriggerType :many
SELECT
  id, trigger_type, trigger_by, name, status, time, duration, http_resp
FROM
  result_api
WHERE
  trigger_by = ?
  AND trigger_type = ?
`

type GetResultApiByTriggerByAndTriggerTypeParams struct {
	TriggerBy   idwrap.IDWrap
	TriggerType mresultapi.TriggerType
}

func (q *Queries) GetResultApiByTriggerByAndTriggerType(ctx context.Context, arg GetResultApiByTriggerByAndTriggerTypeParams) ([]ResultApi, error) {
	rows, err := q.query(ctx, q.getResultApiByTriggerByAndTriggerTypeStmt, getResultApiByTriggerByAndTriggerType, arg.TriggerBy, arg.TriggerType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResultApi{}
	for rows.Next() {
		var i ResultApi
		if err := rows.Scan(
			&i.ID,
			&i.TriggerType,
			&i.TriggerBy,
			&i.Name,
			&i.Status,
			&i.Time,
			&i.Duration,
			&i.HttpResp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
  id,
  email,
  password_hash,
  provider_type,
  provider_id
FROM
  users
WHERE
  id = ?
LIMIT
  1
`

type GetUserRow struct {
	ID           idwrap.IDWrap
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

// Users
func (q *Queries) GetUser(ctx context.Context, id idwrap.IDWrap) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  id,
  email,
  password_hash,
  provider_type,
  provider_id
FROM
  users
WHERE
  email = ?
LIMIT
  1
`

type GetUserByEmailRow struct {
	ID           idwrap.IDWrap
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getUserByEmailAndProviderType = `-- name: GetUserByEmailAndProviderType :one
SELECT
  id,
  email,
  password_hash,
  provider_type,
  provider_id
FROM
  users
WHERE
  email = ?
  AND provider_type = ?
LIMIT
  1
`

type GetUserByEmailAndProviderTypeParams struct {
	Email        string
	ProviderType int8
}

type GetUserByEmailAndProviderTypeRow struct {
	ID           idwrap.IDWrap
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) GetUserByEmailAndProviderType(ctx context.Context, arg GetUserByEmailAndProviderTypeParams) (GetUserByEmailAndProviderTypeRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailAndProviderTypeStmt, getUserByEmailAndProviderType, arg.Email, arg.ProviderType)
	var i GetUserByEmailAndProviderTypeRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getUserByProviderIDandType = `-- name: GetUserByProviderIDandType :one
SELECT
  id,
  email,
  password_hash,
  provider_type,
  provider_id
FROM
  users
WHERE
  provider_id = ?
  AND provider_type = ?
LIMIT
  1
`

type GetUserByProviderIDandTypeParams struct {
	ProviderID   sql.NullString
	ProviderType int8
}

type GetUserByProviderIDandTypeRow struct {
	ID           idwrap.IDWrap
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) GetUserByProviderIDandType(ctx context.Context, arg GetUserByProviderIDandTypeParams) (GetUserByProviderIDandTypeRow, error) {
	row := q.queryRow(ctx, q.getUserByProviderIDandTypeStmt, getUserByProviderIDandType, arg.ProviderID, arg.ProviderType)
	var i GetUserByProviderIDandTypeRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getVariable = `-- name: GetVariable :one
/*
* Variables
*/

SELECT
  id,
  env_id,
  var_key,
  value,
  enabled,
  description
FROM 
  variable
WHERE
  id = ?
LIMIT 1
`

func (q *Queries) GetVariable(ctx context.Context, id idwrap.IDWrap) (Variable, error) {
	row := q.queryRow(ctx, q.getVariableStmt, getVariable, id)
	var i Variable
	err := row.Scan(
		&i.ID,
		&i.EnvID,
		&i.VarKey,
		&i.Value,
		&i.Enabled,
		&i.Description,
	)
	return i, err
}

const getVariablesByEnvironmentID = `-- name: GetVariablesByEnvironmentID :many
SELECT
  id,
  env_id,
  var_key,
  value,
  enabled,
  description
FROM
  variable
WHERE
  env_id = ?
`

func (q *Queries) GetVariablesByEnvironmentID(ctx context.Context, envID idwrap.IDWrap) ([]Variable, error) {
	rows, err := q.query(ctx, q.getVariablesByEnvironmentIDStmt, getVariablesByEnvironmentID, envID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Variable{}
	for rows.Next() {
		var i Variable
		if err := rows.Scan(
			&i.ID,
			&i.EnvID,
			&i.VarKey,
			&i.Value,
			&i.Enabled,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT
  id,
  name,
  updated
FROM
  workspaces
WHERE
  id = ?
LIMIT
  1
`

// Workspaces
func (q *Queries) GetWorkspace(ctx context.Context, id idwrap.IDWrap) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceStmt, getWorkspace, id)
	var i Workspace
	err := row.Scan(&i.ID, &i.Name, &i.Updated)
	return i, err
}

const getWorkspaceByUserID = `-- name: GetWorkspaceByUserID :one
SELECT
  id,
  name,
  updated
FROM
  workspaces
WHERE
  id = (
    SELECT
      workspace_id
    FROM
      workspaces_users
    WHERE
      user_id = ?
    LIMIT
      1
  )
LIMIT
  1
`

func (q *Queries) GetWorkspaceByUserID(ctx context.Context, userID idwrap.IDWrap) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceByUserIDStmt, getWorkspaceByUserID, userID)
	var i Workspace
	err := row.Scan(&i.ID, &i.Name, &i.Updated)
	return i, err
}

const getWorkspaceByUserIDandWorkspaceID = `-- name: GetWorkspaceByUserIDandWorkspaceID :one
SELECT
  id,
  name,
  updated
FROM
  workspaces
WHERE
  id = (
    SELECT
      workspace_id
    FROM
      workspaces_users
    WHERE
      workspace_id = ?
      AND user_id = ?
    LIMIT
      1
  )
LIMIT
  1
`

type GetWorkspaceByUserIDandWorkspaceIDParams struct {
	WorkspaceID idwrap.IDWrap
	UserID      idwrap.IDWrap
}

func (q *Queries) GetWorkspaceByUserIDandWorkspaceID(ctx context.Context, arg GetWorkspaceByUserIDandWorkspaceIDParams) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceByUserIDandWorkspaceIDStmt, getWorkspaceByUserIDandWorkspaceID, arg.WorkspaceID, arg.UserID)
	var i Workspace
	err := row.Scan(&i.ID, &i.Name, &i.Updated)
	return i, err
}

const getWorkspaceUser = `-- name: GetWorkspaceUser :one
SELECT
  id,
  workspace_id,
  user_id,
  role
FROM
  workspaces_users
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetWorkspaceUser(ctx context.Context, id idwrap.IDWrap) (WorkspacesUser, error) {
	row := q.queryRow(ctx, q.getWorkspaceUserStmt, getWorkspaceUser, id)
	var i WorkspacesUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.UserID,
		&i.Role,
	)
	return i, err
}

const getWorkspaceUserByUserID = `-- name: GetWorkspaceUserByUserID :many
SELECT
  id,
  workspace_id,
  user_id,
  role
FROM
  workspaces_users
WHERE
  user_id = ?
`

func (q *Queries) GetWorkspaceUserByUserID(ctx context.Context, userID idwrap.IDWrap) ([]WorkspacesUser, error) {
	rows, err := q.query(ctx, q.getWorkspaceUserByUserIDStmt, getWorkspaceUserByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkspacesUser{}
	for rows.Next() {
		var i WorkspacesUser
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.UserID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceUserByWorkspaceID = `-- name: GetWorkspaceUserByWorkspaceID :many
SELECT
  id,
  workspace_id,
  user_id,
  role
FROM
  workspaces_users
WHERE
  workspace_id = ?
`

func (q *Queries) GetWorkspaceUserByWorkspaceID(ctx context.Context, workspaceID idwrap.IDWrap) ([]WorkspacesUser, error) {
	rows, err := q.query(ctx, q.getWorkspaceUserByWorkspaceIDStmt, getWorkspaceUserByWorkspaceID, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkspacesUser{}
	for rows.Next() {
		var i WorkspacesUser
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.UserID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceUserByWorkspaceIDAndUserID = `-- name: GetWorkspaceUserByWorkspaceIDAndUserID :one
SELECT
  id,
  workspace_id,
  user_id,
  role
FROM
  workspaces_users
WHERE
  workspace_id = ?
  AND user_id = ?
LIMIT
  1
`

type GetWorkspaceUserByWorkspaceIDAndUserIDParams struct {
	WorkspaceID idwrap.IDWrap
	UserID      idwrap.IDWrap
}

func (q *Queries) GetWorkspaceUserByWorkspaceIDAndUserID(ctx context.Context, arg GetWorkspaceUserByWorkspaceIDAndUserIDParams) (WorkspacesUser, error) {
	row := q.queryRow(ctx, q.getWorkspaceUserByWorkspaceIDAndUserIDStmt, getWorkspaceUserByWorkspaceIDAndUserID, arg.WorkspaceID, arg.UserID)
	var i WorkspacesUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.UserID,
		&i.Role,
	)
	return i, err
}

const getWorkspacesByUserID = `-- name: GetWorkspacesByUserID :many
SELECT
  id,
  name,
  updated
FROM
  workspaces
WHERE
  id IN (
    SELECT
      workspace_id
    FROM
      workspaces_users
    WHERE
      user_id = ?
  )
`

func (q *Queries) GetWorkspacesByUserID(ctx context.Context, userID idwrap.IDWrap) ([]Workspace, error) {
	rows, err := q.query(ctx, q.getWorkspacesByUserIDStmt, getWorkspacesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workspace{}
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(&i.ID, &i.Name, &i.Updated); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setBodyFormEnable = `-- name: SetBodyFormEnable :exec
UPDATE example_body_form
SET
  enable = ?
WHERE
  id = ?
`

type SetBodyFormEnableParams struct {
	Enable bool
	ID     idwrap.IDWrap
}

func (q *Queries) SetBodyFormEnable(ctx context.Context, arg SetBodyFormEnableParams) error {
	_, err := q.exec(ctx, q.setBodyFormEnableStmt, setBodyFormEnable, arg.Enable, arg.ID)
	return err
}

const setHeaderEnable = `-- name: SetHeaderEnable :exec
UPDATE example_header
    SET
  enable = ?
WHERE
  id = ?
`

type SetHeaderEnableParams struct {
	Enable bool
	ID     idwrap.IDWrap
}

func (q *Queries) SetHeaderEnable(ctx context.Context, arg SetHeaderEnableParams) error {
	_, err := q.exec(ctx, q.setHeaderEnableStmt, setHeaderEnable, arg.Enable, arg.ID)
	return err
}

const setQueryEnable = `-- name: SetQueryEnable :exec
UPDATE example_query
SET
  enable = ?
WHERE
  id = ?
`

type SetQueryEnableParams struct {
	Enable bool
	ID     idwrap.IDWrap
}

func (q *Queries) SetQueryEnable(ctx context.Context, arg SetQueryEnableParams) error {
	_, err := q.exec(ctx, q.setQueryEnableStmt, setQueryEnable, arg.Enable, arg.ID)
	return err
}

const updateAssert = `-- name: UpdateAssert :exec
UPDATE assertion
SET
  type = ?,
  path = ?,
  value = ?,
  enable = ?
WHERE
  id = ?
`

type UpdateAssertParams struct {
	Type   int8
	Path   string
	Value  string
	Enable bool
	ID     idwrap.IDWrap
}

func (q *Queries) UpdateAssert(ctx context.Context, arg UpdateAssertParams) error {
	_, err := q.exec(ctx, q.updateAssertStmt, updateAssert,
		arg.Type,
		arg.Path,
		arg.Value,
		arg.Enable,
		arg.ID,
	)
	return err
}

const updateAssertResult = `-- name: UpdateAssertResult :exec
UPDATE assertion_result
SET
  result = ?
WHERE
  id = ?
`

type UpdateAssertResultParams struct {
	Result bool
	ID     idwrap.IDWrap
}

func (q *Queries) UpdateAssertResult(ctx context.Context, arg UpdateAssertResultParams) error {
	_, err := q.exec(ctx, q.updateAssertResultStmt, updateAssertResult, arg.Result, arg.ID)
	return err
}

const updateBodyForm = `-- name: UpdateBodyForm :exec
UPDATE example_body_form
SET
  body_key = ?,
  enable = ?,
  description = ?,
  value = ?
WHERE
  id = ?
`

type UpdateBodyFormParams struct {
	BodyKey     string
	Enable      bool
	Description string
	Value       string
	ID          idwrap.IDWrap
}

func (q *Queries) UpdateBodyForm(ctx context.Context, arg UpdateBodyFormParams) error {
	_, err := q.exec(ctx, q.updateBodyFormStmt, updateBodyForm,
		arg.BodyKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID,
	)
	return err
}

const updateBodyRawData = `-- name: UpdateBodyRawData :exec
UPDATE example_body_raw
SET 
  compress_type = ?,
  data = ?
WHERE
  id = ?
`

type UpdateBodyRawDataParams struct {
	CompressType int8
	Data         []byte
	ID           idwrap.IDWrap
}

func (q *Queries) UpdateBodyRawData(ctx context.Context, arg UpdateBodyRawDataParams) error {
	_, err := q.exec(ctx, q.updateBodyRawDataStmt, updateBodyRawData, arg.CompressType, arg.Data, arg.ID)
	return err
}

const updateBodyUrlEncoded = `-- name: UpdateBodyUrlEncoded :exec
UPDATE example_body_urlencoded
    SET
      body_key = ?,
      enable = ?,
      description = ?,
      value = ?
    WHERE
      id = ?
`

type UpdateBodyUrlEncodedParams struct {
	BodyKey     string
	Enable      bool
	Description string
	Value       string
	ID          idwrap.IDWrap
}

func (q *Queries) UpdateBodyUrlEncoded(ctx context.Context, arg UpdateBodyUrlEncodedParams) error {
	_, err := q.exec(ctx, q.updateBodyUrlEncodedStmt, updateBodyUrlEncoded,
		arg.BodyKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID,
	)
	return err
}

const updateCollection = `-- name: UpdateCollection :exec
UPDATE collections
SET
  owner_id = ?,
  name = ?
WHERE
  id = ?
`

type UpdateCollectionParams struct {
	OwnerID idwrap.IDWrap
	Name    string
	ID      idwrap.IDWrap
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) error {
	_, err := q.exec(ctx, q.updateCollectionStmt, updateCollection, arg.OwnerID, arg.Name, arg.ID)
	return err
}

const updateEnvironment = `-- name: UpdateEnvironment :exec
UPDATE environment
SET
    active = ?,
    name = ?,
    description = ?
WHERE
    id = ?
`

type UpdateEnvironmentParams struct {
	Active      bool
	Name        string
	Description string
	ID          idwrap.IDWrap
}

func (q *Queries) UpdateEnvironment(ctx context.Context, arg UpdateEnvironmentParams) error {
	_, err := q.exec(ctx, q.updateEnvironmentStmt, updateEnvironment,
		arg.Active,
		arg.Name,
		arg.Description,
		arg.ID,
	)
	return err
}

const updateExampleResp = `-- name: UpdateExampleResp :exec
UPDATE example_resp
SET 
  status = ?,
  body = ?,
  body_compress_type = ?,
  duration = ?
WHERE
  id = ?
`

type UpdateExampleRespParams struct {
	Status           uint16
	Body             []byte
	BodyCompressType int8
	Duration         int32
	ID               idwrap.IDWrap
}

func (q *Queries) UpdateExampleResp(ctx context.Context, arg UpdateExampleRespParams) error {
	_, err := q.exec(ctx, q.updateExampleRespStmt, updateExampleResp,
		arg.Status,
		arg.Body,
		arg.BodyCompressType,
		arg.Duration,
		arg.ID,
	)
	return err
}

const updateExampleRespHeader = `-- name: UpdateExampleRespHeader :exec
UPDATE example_resp_header
SET 
  header_key = ?,
  value = ?
WHERE
  id = ?
`

type UpdateExampleRespHeaderParams struct {
	HeaderKey string
	Value     string
	ID        idwrap.IDWrap
}

func (q *Queries) UpdateExampleRespHeader(ctx context.Context, arg UpdateExampleRespHeaderParams) error {
	_, err := q.exec(ctx, q.updateExampleRespHeaderStmt, updateExampleRespHeader, arg.HeaderKey, arg.Value, arg.ID)
	return err
}

const updateHeader = `-- name: UpdateHeader :exec
UPDATE example_header
SET
  header_key = ?,
  enable = ?,
  description = ?,
  value = ?
WHERE
  id = ?
`

type UpdateHeaderParams struct {
	HeaderKey   string
	Enable      bool
	Description string
	Value       string
	ID          idwrap.IDWrap
}

func (q *Queries) UpdateHeader(ctx context.Context, arg UpdateHeaderParams) error {
	_, err := q.exec(ctx, q.updateHeaderStmt, updateHeader,
		arg.HeaderKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID,
	)
	return err
}

const updateItemApi = `-- name: UpdateItemApi :exec
UPDATE item_api
SET
  collection_id = ?,
  parent_id = ?,
  name = ?,
  url = ?,
  method = ?
WHERE
  id = ?
`

type UpdateItemApiParams struct {
	CollectionID idwrap.IDWrap
	ParentID     *idwrap.IDWrap
	Name         string
	Url          string
	Method       string
	ID           idwrap.IDWrap
}

func (q *Queries) UpdateItemApi(ctx context.Context, arg UpdateItemApiParams) error {
	_, err := q.exec(ctx, q.updateItemApiStmt, updateItemApi,
		arg.CollectionID,
		arg.ParentID,
		arg.Name,
		arg.Url,
		arg.Method,
		arg.ID,
	)
	return err
}

const updateItemApiExample = `-- name: UpdateItemApiExample :exec
UPDATE item_api_example
SET
  name = ?,
  body_type = ?
WHERE
  id = ?
`

type UpdateItemApiExampleParams struct {
	Name     string
	BodyType int8
	ID       idwrap.IDWrap
}

func (q *Queries) UpdateItemApiExample(ctx context.Context, arg UpdateItemApiExampleParams) error {
	_, err := q.exec(ctx, q.updateItemApiExampleStmt, updateItemApiExample, arg.Name, arg.BodyType, arg.ID)
	return err
}

const updateItemFolder = `-- name: UpdateItemFolder :exec
UPDATE item_folder
SET
  name = ?,
  parent_id = ?
WHERE
  id = ?
`

type UpdateItemFolderParams struct {
	Name     string
	ParentID *idwrap.IDWrap
	ID       idwrap.IDWrap
}

func (q *Queries) UpdateItemFolder(ctx context.Context, arg UpdateItemFolderParams) error {
	_, err := q.exec(ctx, q.updateItemFolderStmt, updateItemFolder, arg.Name, arg.ParentID, arg.ID)
	return err
}

const updateQuery = `-- name: UpdateQuery :exec
UPDATE example_query
SET
  query_key = ?,
  enable = ?,
  description = ?,
  value = ?
WHERE
  id = ?
`

type UpdateQueryParams struct {
	QueryKey    string
	Enable      bool
	Description string
	Value       string
	ID          idwrap.IDWrap
}

func (q *Queries) UpdateQuery(ctx context.Context, arg UpdateQueryParams) error {
	_, err := q.exec(ctx, q.updateQueryStmt, updateQuery,
		arg.QueryKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID,
	)
	return err
}

const updateResultApi = `-- name: UpdateResultApi :exec
UPDATE result_api
SET
  name = ?,
  status = ?,
  time = ?,
  duration = ?,
  http_resp = ?
WHERE
  id = ?
`

type UpdateResultApiParams struct {
	Name     string
	Status   string
	Time     int64
	Duration int64
	HttpResp mresultapi.HttpResp
	ID       idwrap.IDWrap
}

func (q *Queries) UpdateResultApi(ctx context.Context, arg UpdateResultApiParams) error {
	_, err := q.exec(ctx, q.updateResultApiStmt, updateResultApi,
		arg.Name,
		arg.Status,
		arg.Time,
		arg.Duration,
		arg.HttpResp,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  email = ?,
  password_hash = ?
WHERE
  id = ?
`

type UpdateUserParams struct {
	Email        string
	PasswordHash []byte
	ID           idwrap.IDWrap
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser, arg.Email, arg.PasswordHash, arg.ID)
	return err
}

const updateVariable = `-- name: UpdateVariable :exec
UPDATE variable
SET
  var_key = ?,
  value = ?,
  enabled = ?,
  description = ?
WHERE
  id = ?
`

type UpdateVariableParams struct {
	VarKey      string
	Value       string
	Enabled     bool
	Description string
	ID          idwrap.IDWrap
}

func (q *Queries) UpdateVariable(ctx context.Context, arg UpdateVariableParams) error {
	_, err := q.exec(ctx, q.updateVariableStmt, updateVariable,
		arg.VarKey,
		arg.Value,
		arg.Enabled,
		arg.Description,
		arg.ID,
	)
	return err
}

const updateVisualizeMode = `-- name: UpdateVisualizeMode :exec
UPDATE example_body_raw
SET visualize_mode = ?
WHERE
  id = ?
`

type UpdateVisualizeModeParams struct {
	VisualizeMode int8
	ID            idwrap.IDWrap
}

func (q *Queries) UpdateVisualizeMode(ctx context.Context, arg UpdateVisualizeModeParams) error {
	_, err := q.exec(ctx, q.updateVisualizeModeStmt, updateVisualizeMode, arg.VisualizeMode, arg.ID)
	return err
}

const updateWorkspace = `-- name: UpdateWorkspace :exec
UPDATE workspaces
SET
  name = ?
WHERE
  id = ?
`

type UpdateWorkspaceParams struct {
	Name string
	ID   idwrap.IDWrap
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) error {
	_, err := q.exec(ctx, q.updateWorkspaceStmt, updateWorkspace, arg.Name, arg.ID)
	return err
}

const updateWorkspaceUser = `-- name: UpdateWorkspaceUser :exec
UPDATE workspaces_users
SET
  workspace_id = ?,
  user_id = ?,
  role = ?
WHERE
  id = ?
`

type UpdateWorkspaceUserParams struct {
	WorkspaceID idwrap.IDWrap
	UserID      idwrap.IDWrap
	Role        int8
	ID          idwrap.IDWrap
}

func (q *Queries) UpdateWorkspaceUser(ctx context.Context, arg UpdateWorkspaceUserParams) error {
	_, err := q.exec(ctx, q.updateWorkspaceUserStmt, updateWorkspaceUser,
		arg.WorkspaceID,
		arg.UserID,
		arg.Role,
		arg.ID,
	)
	return err
}
