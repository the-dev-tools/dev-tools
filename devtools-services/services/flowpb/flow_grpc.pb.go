// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: protos/flow.proto

package flowpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowServiceClient is the client API for FlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowServiceClient interface {
	Create(ctx context.Context, in *FlowCreateRequest, opts ...grpc.CallOption) (*FlowCreateRespond, error)
	Save(ctx context.Context, in *FlowSaveRequest, opts ...grpc.CallOption) (*FlowSaveRespond, error)
	Load(ctx context.Context, in *FlowLoadRequest, opts ...grpc.CallOption) (*FlowLoadRespond, error)
	Delete(ctx context.Context, in *FlowDeleteRequest, opts ...grpc.CallOption) (*FlowDeleteRespond, error)
}

type flowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowServiceClient(cc grpc.ClientConnInterface) FlowServiceClient {
	return &flowServiceClient{cc}
}

func (c *flowServiceClient) Create(ctx context.Context, in *FlowCreateRequest, opts ...grpc.CallOption) (*FlowCreateRespond, error) {
	out := new(FlowCreateRespond)
	err := c.cc.Invoke(ctx, "/flowproto.FlowService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) Save(ctx context.Context, in *FlowSaveRequest, opts ...grpc.CallOption) (*FlowSaveRespond, error) {
	out := new(FlowSaveRespond)
	err := c.cc.Invoke(ctx, "/flowproto.FlowService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) Load(ctx context.Context, in *FlowLoadRequest, opts ...grpc.CallOption) (*FlowLoadRespond, error) {
	out := new(FlowLoadRespond)
	err := c.cc.Invoke(ctx, "/flowproto.FlowService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowServiceClient) Delete(ctx context.Context, in *FlowDeleteRequest, opts ...grpc.CallOption) (*FlowDeleteRespond, error) {
	out := new(FlowDeleteRespond)
	err := c.cc.Invoke(ctx, "/flowproto.FlowService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowServiceServer is the server API for FlowService service.
// All implementations must embed UnimplementedFlowServiceServer
// for forward compatibility
type FlowServiceServer interface {
	Create(context.Context, *FlowCreateRequest) (*FlowCreateRespond, error)
	Save(context.Context, *FlowSaveRequest) (*FlowSaveRespond, error)
	Load(context.Context, *FlowLoadRequest) (*FlowLoadRespond, error)
	Delete(context.Context, *FlowDeleteRequest) (*FlowDeleteRespond, error)
	mustEmbedUnimplementedFlowServiceServer()
}

// UnimplementedFlowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowServiceServer struct {
}

func (UnimplementedFlowServiceServer) Create(context.Context, *FlowCreateRequest) (*FlowCreateRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFlowServiceServer) Save(context.Context, *FlowSaveRequest) (*FlowSaveRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedFlowServiceServer) Load(context.Context, *FlowLoadRequest) (*FlowLoadRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedFlowServiceServer) Delete(context.Context, *FlowDeleteRequest) (*FlowDeleteRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFlowServiceServer) mustEmbedUnimplementedFlowServiceServer() {}

// UnsafeFlowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowServiceServer will
// result in compilation errors.
type UnsafeFlowServiceServer interface {
	mustEmbedUnimplementedFlowServiceServer()
}

func RegisterFlowServiceServer(s grpc.ServiceRegistrar, srv FlowServiceServer) {
	s.RegisterService(&FlowService_ServiceDesc, srv)
}

func _FlowService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flowproto.FlowService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).Create(ctx, req.(*FlowCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flowproto.FlowService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).Save(ctx, req.(*FlowSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flowproto.FlowService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).Load(ctx, req.(*FlowLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flowproto.FlowService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServiceServer).Delete(ctx, req.(*FlowDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowService_ServiceDesc is the grpc.ServiceDesc for FlowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flowproto.FlowService",
	HandlerType: (*FlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FlowService_Create_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _FlowService_Save_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _FlowService_Load_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FlowService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/flow.proto",
}
