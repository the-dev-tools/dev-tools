// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package gen

import (
	"context"
	"database/sql"

	mresultapi "dev-tools-backend/pkg/model/result/mresultapi"
	ulid "github.com/oklog/ulid/v2"
)

const checkIFWorkspaceUserExists = `-- name: CheckIFWorkspaceUserExists :one
SELECT
  EXISTS (
    SELECT
      1
    FROM
      workspaces_users
    WHERE
      workspace_id = ?
      AND user_id = ?
    LIMIT
      1
  )
`

type CheckIFWorkspaceUserExistsParams struct {
	WorkspaceID ulid.ULID
	UserID      ulid.ULID
}

// WorkspaceUsers
func (q *Queries) CheckIFWorkspaceUserExists(ctx context.Context, arg CheckIFWorkspaceUserExistsParams) (int64, error) {
	row := q.queryRow(ctx, q.checkIFWorkspaceUserExistsStmt, checkIFWorkspaceUserExists, arg.WorkspaceID, arg.UserID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createBodyForm = `-- name: CreateBodyForm :exec
INSERT INTO
  example_body_form (id, example_id, body_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateBodyFormParams struct {
	ID          ulid.ULID
	ExampleID   ulid.ULID
	BodyKey     string
	Enable      bool
	Description string
	Value       string
}

func (q *Queries) CreateBodyForm(ctx context.Context, arg CreateBodyFormParams) error {
	_, err := q.exec(ctx, q.createBodyFormStmt, createBodyForm,
		arg.ID,
		arg.ExampleID,
		arg.BodyKey,
		arg.Enable,
		arg.Description,
		arg.Value,
	)
	return err
}

const createBodyFormBulk = `-- name: CreateBodyFormBulk :exec
INSERT INTO
  example_body_form (id, example_id, body_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?)
`

type CreateBodyFormBulkParams struct {
	ID             ulid.ULID
	ExampleID      ulid.ULID
	BodyKey        string
	Enable         bool
	Description    string
	Value          string
	ID_2           ulid.ULID
	ExampleID_2    ulid.ULID
	BodyKey_2      string
	Enable_2       bool
	Description_2  string
	Value_2        string
	ID_3           ulid.ULID
	ExampleID_3    ulid.ULID
	BodyKey_3      string
	Enable_3       bool
	Description_3  string
	Value_3        string
	ID_4           ulid.ULID
	ExampleID_4    ulid.ULID
	BodyKey_4      string
	Enable_4       bool
	Description_4  string
	Value_4        string
	ID_5           ulid.ULID
	ExampleID_5    ulid.ULID
	BodyKey_5      string
	Enable_5       bool
	Description_5  string
	Value_5        string
	ID_6           ulid.ULID
	ExampleID_6    ulid.ULID
	BodyKey_6      string
	Enable_6       bool
	Description_6  string
	Value_6        string
	ID_7           ulid.ULID
	ExampleID_7    ulid.ULID
	BodyKey_7      string
	Enable_7       bool
	Description_7  string
	Value_7        string
	ID_8           ulid.ULID
	ExampleID_8    ulid.ULID
	BodyKey_8      string
	Enable_8       bool
	Description_8  string
	Value_8        string
	ID_9           ulid.ULID
	ExampleID_9    ulid.ULID
	BodyKey_9      string
	Enable_9       bool
	Description_9  string
	Value_9        string
	ID_10          ulid.ULID
	ExampleID_10   ulid.ULID
	BodyKey_10     string
	Enable_10      bool
	Description_10 string
	Value_10       string
}

func (q *Queries) CreateBodyFormBulk(ctx context.Context, arg CreateBodyFormBulkParams) error {
	_, err := q.exec(ctx, q.createBodyFormBulkStmt, createBodyFormBulk,
		arg.ID,
		arg.ExampleID,
		arg.BodyKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID_2,
		arg.ExampleID_2,
		arg.BodyKey_2,
		arg.Enable_2,
		arg.Description_2,
		arg.Value_2,
		arg.ID_3,
		arg.ExampleID_3,
		arg.BodyKey_3,
		arg.Enable_3,
		arg.Description_3,
		arg.Value_3,
		arg.ID_4,
		arg.ExampleID_4,
		arg.BodyKey_4,
		arg.Enable_4,
		arg.Description_4,
		arg.Value_4,
		arg.ID_5,
		arg.ExampleID_5,
		arg.BodyKey_5,
		arg.Enable_5,
		arg.Description_5,
		arg.Value_5,
		arg.ID_6,
		arg.ExampleID_6,
		arg.BodyKey_6,
		arg.Enable_6,
		arg.Description_6,
		arg.Value_6,
		arg.ID_7,
		arg.ExampleID_7,
		arg.BodyKey_7,
		arg.Enable_7,
		arg.Description_7,
		arg.Value_7,
		arg.ID_8,
		arg.ExampleID_8,
		arg.BodyKey_8,
		arg.Enable_8,
		arg.Description_8,
		arg.Value_8,
		arg.ID_9,
		arg.ExampleID_9,
		arg.BodyKey_9,
		arg.Enable_9,
		arg.Description_9,
		arg.Value_9,
		arg.ID_10,
		arg.ExampleID_10,
		arg.BodyKey_10,
		arg.Enable_10,
		arg.Description_10,
		arg.Value_10,
	)
	return err
}

const createCollection = `-- name: CreateCollection :exec
INSERT INTO
  collections (id, owner_id, name)
VALUES
  (?, ?, ?)
`

type CreateCollectionParams struct {
	ID      ulid.ULID
	OwnerID ulid.ULID
	Name    string
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) error {
	_, err := q.exec(ctx, q.createCollectionStmt, createCollection, arg.ID, arg.OwnerID, arg.Name)
	return err
}

const createHeader = `-- name: CreateHeader :exec
INSERT INTO
  example_header (id, example_id, header_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateHeaderParams struct {
	ID          ulid.ULID
	ExampleID   ulid.ULID
	HeaderKey   string
	Enable      bool
	Description string
	Value       string
}

func (q *Queries) CreateHeader(ctx context.Context, arg CreateHeaderParams) error {
	_, err := q.exec(ctx, q.createHeaderStmt, createHeader,
		arg.ID,
		arg.ExampleID,
		arg.HeaderKey,
		arg.Enable,
		arg.Description,
		arg.Value,
	)
	return err
}

const createHeaderBulk = `-- name: CreateHeaderBulk :exec
INSERT INTO
  example_header (id, example_id, header_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?)
`

type CreateHeaderBulkParams struct {
	ID             ulid.ULID
	ExampleID      ulid.ULID
	HeaderKey      string
	Enable         bool
	Description    string
	Value          string
	ID_2           ulid.ULID
	ExampleID_2    ulid.ULID
	HeaderKey_2    string
	Enable_2       bool
	Description_2  string
	Value_2        string
	ID_3           ulid.ULID
	ExampleID_3    ulid.ULID
	HeaderKey_3    string
	Enable_3       bool
	Description_3  string
	Value_3        string
	ID_4           ulid.ULID
	ExampleID_4    ulid.ULID
	HeaderKey_4    string
	Enable_4       bool
	Description_4  string
	Value_4        string
	ID_5           ulid.ULID
	ExampleID_5    ulid.ULID
	HeaderKey_5    string
	Enable_5       bool
	Description_5  string
	Value_5        string
	ID_6           ulid.ULID
	ExampleID_6    ulid.ULID
	HeaderKey_6    string
	Enable_6       bool
	Description_6  string
	Value_6        string
	ID_7           ulid.ULID
	ExampleID_7    ulid.ULID
	HeaderKey_7    string
	Enable_7       bool
	Description_7  string
	Value_7        string
	ID_8           ulid.ULID
	ExampleID_8    ulid.ULID
	HeaderKey_8    string
	Enable_8       bool
	Description_8  string
	Value_8        string
	ID_9           ulid.ULID
	ExampleID_9    ulid.ULID
	HeaderKey_9    string
	Enable_9       bool
	Description_9  string
	Value_9        string
	ID_10          ulid.ULID
	ExampleID_10   ulid.ULID
	HeaderKey_10   string
	Enable_10      bool
	Description_10 string
	Value_10       string
}

func (q *Queries) CreateHeaderBulk(ctx context.Context, arg CreateHeaderBulkParams) error {
	_, err := q.exec(ctx, q.createHeaderBulkStmt, createHeaderBulk,
		arg.ID,
		arg.ExampleID,
		arg.HeaderKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID_2,
		arg.ExampleID_2,
		arg.HeaderKey_2,
		arg.Enable_2,
		arg.Description_2,
		arg.Value_2,
		arg.ID_3,
		arg.ExampleID_3,
		arg.HeaderKey_3,
		arg.Enable_3,
		arg.Description_3,
		arg.Value_3,
		arg.ID_4,
		arg.ExampleID_4,
		arg.HeaderKey_4,
		arg.Enable_4,
		arg.Description_4,
		arg.Value_4,
		arg.ID_5,
		arg.ExampleID_5,
		arg.HeaderKey_5,
		arg.Enable_5,
		arg.Description_5,
		arg.Value_5,
		arg.ID_6,
		arg.ExampleID_6,
		arg.HeaderKey_6,
		arg.Enable_6,
		arg.Description_6,
		arg.Value_6,
		arg.ID_7,
		arg.ExampleID_7,
		arg.HeaderKey_7,
		arg.Enable_7,
		arg.Description_7,
		arg.Value_7,
		arg.ID_8,
		arg.ExampleID_8,
		arg.HeaderKey_8,
		arg.Enable_8,
		arg.Description_8,
		arg.Value_8,
		arg.ID_9,
		arg.ExampleID_9,
		arg.HeaderKey_9,
		arg.Enable_9,
		arg.Description_9,
		arg.Value_9,
		arg.ID_10,
		arg.ExampleID_10,
		arg.HeaderKey_10,
		arg.Enable_10,
		arg.Description_10,
		arg.Value_10,
	)
	return err
}

const createItemApi = `-- name: CreateItemApi :exec
INSERT INTO
  item_api (id, collection_id, parent_id, name, url, method, prev, next)
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemApiParams struct {
	ID           ulid.ULID
	CollectionID ulid.ULID
	ParentID     *ulid.ULID
	Name         string
	Url          string
	Method       string
	Prev         *ulid.ULID
	Next         *ulid.ULID
}

func (q *Queries) CreateItemApi(ctx context.Context, arg CreateItemApiParams) error {
	_, err := q.exec(ctx, q.createItemApiStmt, createItemApi,
		arg.ID,
		arg.CollectionID,
		arg.ParentID,
		arg.Name,
		arg.Url,
		arg.Method,
		arg.Prev,
		arg.Next,
	)
	return err
}

const createItemApiBulk = `-- name: CreateItemApiBulk :exec
INSERT INTO
  item_api (id, collection_id, parent_id, name, url, method, prev, next)
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemApiBulkParams struct {
	ID              ulid.ULID
	CollectionID    ulid.ULID
	ParentID        *ulid.ULID
	Name            string
	Url             string
	Method          string
	Prev            *ulid.ULID
	Next            *ulid.ULID
	ID_2            ulid.ULID
	CollectionID_2  ulid.ULID
	ParentID_2      *ulid.ULID
	Name_2          string
	Url_2           string
	Method_2        string
	Prev_2          *ulid.ULID
	Next_2          *ulid.ULID
	ID_3            ulid.ULID
	CollectionID_3  ulid.ULID
	ParentID_3      *ulid.ULID
	Name_3          string
	Url_3           string
	Method_3        string
	Prev_3          *ulid.ULID
	Next_3          *ulid.ULID
	ID_4            ulid.ULID
	CollectionID_4  ulid.ULID
	ParentID_4      *ulid.ULID
	Name_4          string
	Url_4           string
	Method_4        string
	Prev_4          *ulid.ULID
	Next_4          *ulid.ULID
	ID_5            ulid.ULID
	CollectionID_5  ulid.ULID
	ParentID_5      *ulid.ULID
	Name_5          string
	Url_5           string
	Method_5        string
	Prev_5          *ulid.ULID
	Next_5          *ulid.ULID
	ID_6            ulid.ULID
	CollectionID_6  ulid.ULID
	ParentID_6      *ulid.ULID
	Name_6          string
	Url_6           string
	Method_6        string
	Prev_6          *ulid.ULID
	Next_6          *ulid.ULID
	ID_7            ulid.ULID
	CollectionID_7  ulid.ULID
	ParentID_7      *ulid.ULID
	Name_7          string
	Url_7           string
	Method_7        string
	Prev_7          *ulid.ULID
	Next_7          *ulid.ULID
	ID_8            ulid.ULID
	CollectionID_8  ulid.ULID
	ParentID_8      *ulid.ULID
	Name_8          string
	Url_8           string
	Method_8        string
	Prev_8          *ulid.ULID
	Next_8          *ulid.ULID
	ID_9            ulid.ULID
	CollectionID_9  ulid.ULID
	ParentID_9      *ulid.ULID
	Name_9          string
	Url_9           string
	Method_9        string
	Prev_9          *ulid.ULID
	Next_9          *ulid.ULID
	ID_10           ulid.ULID
	CollectionID_10 ulid.ULID
	ParentID_10     *ulid.ULID
	Name_10         string
	Url_10          string
	Method_10       string
	Prev_10         *ulid.ULID
	Next_10         *ulid.ULID
}

func (q *Queries) CreateItemApiBulk(ctx context.Context, arg CreateItemApiBulkParams) error {
	_, err := q.exec(ctx, q.createItemApiBulkStmt, createItemApiBulk,
		arg.ID,
		arg.CollectionID,
		arg.ParentID,
		arg.Name,
		arg.Url,
		arg.Method,
		arg.Prev,
		arg.Next,
		arg.ID_2,
		arg.CollectionID_2,
		arg.ParentID_2,
		arg.Name_2,
		arg.Url_2,
		arg.Method_2,
		arg.Prev_2,
		arg.Next_2,
		arg.ID_3,
		arg.CollectionID_3,
		arg.ParentID_3,
		arg.Name_3,
		arg.Url_3,
		arg.Method_3,
		arg.Prev_3,
		arg.Next_3,
		arg.ID_4,
		arg.CollectionID_4,
		arg.ParentID_4,
		arg.Name_4,
		arg.Url_4,
		arg.Method_4,
		arg.Prev_4,
		arg.Next_4,
		arg.ID_5,
		arg.CollectionID_5,
		arg.ParentID_5,
		arg.Name_5,
		arg.Url_5,
		arg.Method_5,
		arg.Prev_5,
		arg.Next_5,
		arg.ID_6,
		arg.CollectionID_6,
		arg.ParentID_6,
		arg.Name_6,
		arg.Url_6,
		arg.Method_6,
		arg.Prev_6,
		arg.Next_6,
		arg.ID_7,
		arg.CollectionID_7,
		arg.ParentID_7,
		arg.Name_7,
		arg.Url_7,
		arg.Method_7,
		arg.Prev_7,
		arg.Next_7,
		arg.ID_8,
		arg.CollectionID_8,
		arg.ParentID_8,
		arg.Name_8,
		arg.Url_8,
		arg.Method_8,
		arg.Prev_8,
		arg.Next_8,
		arg.ID_9,
		arg.CollectionID_9,
		arg.ParentID_9,
		arg.Name_9,
		arg.Url_9,
		arg.Method_9,
		arg.Prev_9,
		arg.Next_9,
		arg.ID_10,
		arg.CollectionID_10,
		arg.ParentID_10,
		arg.Name_10,
		arg.Url_10,
		arg.Method_10,
		arg.Prev_10,
		arg.Next_10,
	)
	return err
}

const createItemApiExample = `-- name: CreateItemApiExample :exec
INSERT INTO
  item_api_example (
    id,
    item_api_id,
    collection_id,
    parent_example_id,
    is_default,
    name,
    compressed,
    body,
    prev,
    next
  )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemApiExampleParams struct {
	ID              ulid.ULID
	ItemApiID       ulid.ULID
	CollectionID    ulid.ULID
	ParentExampleID *ulid.ULID
	IsDefault       bool
	Name            string
	Compressed      bool
	Body            []byte
	Prev            *ulid.ULID
	Next            *ulid.ULID
}

func (q *Queries) CreateItemApiExample(ctx context.Context, arg CreateItemApiExampleParams) error {
	_, err := q.exec(ctx, q.createItemApiExampleStmt, createItemApiExample,
		arg.ID,
		arg.ItemApiID,
		arg.CollectionID,
		arg.ParentExampleID,
		arg.IsDefault,
		arg.Name,
		arg.Compressed,
		arg.Body,
		arg.Prev,
		arg.Next,
	)
	return err
}

const createItemApiExampleBulk = `-- name: CreateItemApiExampleBulk :exec
INSERT INTO
  item_api_example (
    id,
    item_api_id,
    collection_id,
    parent_example_id,
    is_default,
    name,
    compressed,
    body,
    prev,
    next
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemApiExampleBulkParams struct {
	ID                 ulid.ULID
	ItemApiID          ulid.ULID
	CollectionID       ulid.ULID
	ParentExampleID    *ulid.ULID
	IsDefault          bool
	Name               string
	Compressed         bool
	Body               []byte
	Prev               *ulid.ULID
	Next               *ulid.ULID
	ID_2               ulid.ULID
	ItemApiID_2        ulid.ULID
	CollectionID_2     ulid.ULID
	ParentExampleID_2  *ulid.ULID
	IsDefault_2        bool
	Name_2             string
	Compressed_2       bool
	Body_2             []byte
	Prev_2             *ulid.ULID
	Next_2             *ulid.ULID
	ID_3               ulid.ULID
	ItemApiID_3        ulid.ULID
	CollectionID_3     ulid.ULID
	ParentExampleID_3  *ulid.ULID
	IsDefault_3        bool
	Name_3             string
	Compressed_3       bool
	Body_3             []byte
	Prev_3             *ulid.ULID
	Next_3             *ulid.ULID
	ID_4               ulid.ULID
	ItemApiID_4        ulid.ULID
	CollectionID_4     ulid.ULID
	ParentExampleID_4  *ulid.ULID
	IsDefault_4        bool
	Name_4             string
	Compressed_4       bool
	Body_4             []byte
	Prev_4             *ulid.ULID
	Next_4             *ulid.ULID
	ID_5               ulid.ULID
	ItemApiID_5        ulid.ULID
	CollectionID_5     ulid.ULID
	ParentExampleID_5  *ulid.ULID
	IsDefault_5        bool
	Name_5             string
	Compressed_5       bool
	Body_5             []byte
	Prev_5             *ulid.ULID
	Next_5             *ulid.ULID
	ID_6               ulid.ULID
	ItemApiID_6        ulid.ULID
	CollectionID_6     ulid.ULID
	ParentExampleID_6  *ulid.ULID
	IsDefault_6        bool
	Name_6             string
	Compressed_6       bool
	Body_6             []byte
	Prev_6             *ulid.ULID
	Next_6             *ulid.ULID
	ID_7               ulid.ULID
	ItemApiID_7        ulid.ULID
	CollectionID_7     ulid.ULID
	ParentExampleID_7  *ulid.ULID
	IsDefault_7        bool
	Name_7             string
	Compressed_7       bool
	Body_7             []byte
	Prev_7             *ulid.ULID
	Next_7             *ulid.ULID
	ID_8               ulid.ULID
	ItemApiID_8        ulid.ULID
	CollectionID_8     ulid.ULID
	ParentExampleID_8  *ulid.ULID
	IsDefault_8        bool
	Name_8             string
	Compressed_8       bool
	Body_8             []byte
	Prev_8             *ulid.ULID
	Next_8             *ulid.ULID
	ID_9               ulid.ULID
	ItemApiID_9        ulid.ULID
	CollectionID_9     ulid.ULID
	ParentExampleID_9  *ulid.ULID
	IsDefault_9        bool
	Name_9             string
	Compressed_9       bool
	Body_9             []byte
	Prev_9             *ulid.ULID
	Next_9             *ulid.ULID
	ID_10              ulid.ULID
	ItemApiID_10       ulid.ULID
	CollectionID_10    ulid.ULID
	ParentExampleID_10 *ulid.ULID
	IsDefault_10       bool
	Name_10            string
	Compressed_10      bool
	Body_10            []byte
	Prev_10            *ulid.ULID
	Next_10            *ulid.ULID
}

func (q *Queries) CreateItemApiExampleBulk(ctx context.Context, arg CreateItemApiExampleBulkParams) error {
	_, err := q.exec(ctx, q.createItemApiExampleBulkStmt, createItemApiExampleBulk,
		arg.ID,
		arg.ItemApiID,
		arg.CollectionID,
		arg.ParentExampleID,
		arg.IsDefault,
		arg.Name,
		arg.Compressed,
		arg.Body,
		arg.Prev,
		arg.Next,
		arg.ID_2,
		arg.ItemApiID_2,
		arg.CollectionID_2,
		arg.ParentExampleID_2,
		arg.IsDefault_2,
		arg.Name_2,
		arg.Compressed_2,
		arg.Body_2,
		arg.Prev_2,
		arg.Next_2,
		arg.ID_3,
		arg.ItemApiID_3,
		arg.CollectionID_3,
		arg.ParentExampleID_3,
		arg.IsDefault_3,
		arg.Name_3,
		arg.Compressed_3,
		arg.Body_3,
		arg.Prev_3,
		arg.Next_3,
		arg.ID_4,
		arg.ItemApiID_4,
		arg.CollectionID_4,
		arg.ParentExampleID_4,
		arg.IsDefault_4,
		arg.Name_4,
		arg.Compressed_4,
		arg.Body_4,
		arg.Prev_4,
		arg.Next_4,
		arg.ID_5,
		arg.ItemApiID_5,
		arg.CollectionID_5,
		arg.ParentExampleID_5,
		arg.IsDefault_5,
		arg.Name_5,
		arg.Compressed_5,
		arg.Body_5,
		arg.Prev_5,
		arg.Next_5,
		arg.ID_6,
		arg.ItemApiID_6,
		arg.CollectionID_6,
		arg.ParentExampleID_6,
		arg.IsDefault_6,
		arg.Name_6,
		arg.Compressed_6,
		arg.Body_6,
		arg.Prev_6,
		arg.Next_6,
		arg.ID_7,
		arg.ItemApiID_7,
		arg.CollectionID_7,
		arg.ParentExampleID_7,
		arg.IsDefault_7,
		arg.Name_7,
		arg.Compressed_7,
		arg.Body_7,
		arg.Prev_7,
		arg.Next_7,
		arg.ID_8,
		arg.ItemApiID_8,
		arg.CollectionID_8,
		arg.ParentExampleID_8,
		arg.IsDefault_8,
		arg.Name_8,
		arg.Compressed_8,
		arg.Body_8,
		arg.Prev_8,
		arg.Next_8,
		arg.ID_9,
		arg.ItemApiID_9,
		arg.CollectionID_9,
		arg.ParentExampleID_9,
		arg.IsDefault_9,
		arg.Name_9,
		arg.Compressed_9,
		arg.Body_9,
		arg.Prev_9,
		arg.Next_9,
		arg.ID_10,
		arg.ItemApiID_10,
		arg.CollectionID_10,
		arg.ParentExampleID_10,
		arg.IsDefault_10,
		arg.Name_10,
		arg.Compressed_10,
		arg.Body_10,
		arg.Prev_10,
		arg.Next_10,
	)
	return err
}

const createItemFolder = `-- name: CreateItemFolder :exec
INSERT INTO
    item_folder (id, name, parent_id, collection_id, prev, next)
VALUES
    (?, ?, ?, ?, ?, ?)
`

type CreateItemFolderParams struct {
	ID           ulid.ULID
	Name         string
	ParentID     *ulid.ULID
	CollectionID ulid.ULID
	Prev         *ulid.ULID
	Next         *ulid.ULID
}

func (q *Queries) CreateItemFolder(ctx context.Context, arg CreateItemFolderParams) error {
	_, err := q.exec(ctx, q.createItemFolderStmt, createItemFolder,
		arg.ID,
		arg.Name,
		arg.ParentID,
		arg.CollectionID,
		arg.Prev,
		arg.Next,
	)
	return err
}

const createItemFolderBulk = `-- name: CreateItemFolderBulk :exec
INSERT INTO
    item_folder (id, name, parent_id, collection_id, prev, next)
VALUES
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?)
`

type CreateItemFolderBulkParams struct {
	ID              ulid.ULID
	Name            string
	ParentID        *ulid.ULID
	CollectionID    ulid.ULID
	Prev            *ulid.ULID
	Next            *ulid.ULID
	ID_2            ulid.ULID
	Name_2          string
	ParentID_2      *ulid.ULID
	CollectionID_2  ulid.ULID
	Prev_2          *ulid.ULID
	Next_2          *ulid.ULID
	ID_3            ulid.ULID
	Name_3          string
	ParentID_3      *ulid.ULID
	CollectionID_3  ulid.ULID
	Prev_3          *ulid.ULID
	Next_3          *ulid.ULID
	ID_4            ulid.ULID
	Name_4          string
	ParentID_4      *ulid.ULID
	CollectionID_4  ulid.ULID
	Prev_4          *ulid.ULID
	Next_4          *ulid.ULID
	ID_5            ulid.ULID
	Name_5          string
	ParentID_5      *ulid.ULID
	CollectionID_5  ulid.ULID
	Prev_5          *ulid.ULID
	Next_5          *ulid.ULID
	ID_6            ulid.ULID
	Name_6          string
	ParentID_6      *ulid.ULID
	CollectionID_6  ulid.ULID
	Prev_6          *ulid.ULID
	Next_6          *ulid.ULID
	ID_7            ulid.ULID
	Name_7          string
	ParentID_7      *ulid.ULID
	CollectionID_7  ulid.ULID
	Prev_7          *ulid.ULID
	Next_7          *ulid.ULID
	ID_8            ulid.ULID
	Name_8          string
	ParentID_8      *ulid.ULID
	CollectionID_8  ulid.ULID
	Prev_8          *ulid.ULID
	Next_8          *ulid.ULID
	ID_9            ulid.ULID
	Name_9          string
	ParentID_9      *ulid.ULID
	CollectionID_9  ulid.ULID
	Prev_9          *ulid.ULID
	Next_9          *ulid.ULID
	ID_10           ulid.ULID
	Name_10         string
	ParentID_10     *ulid.ULID
	CollectionID_10 ulid.ULID
	Prev_10         *ulid.ULID
	Next_10         *ulid.ULID
}

func (q *Queries) CreateItemFolderBulk(ctx context.Context, arg CreateItemFolderBulkParams) error {
	_, err := q.exec(ctx, q.createItemFolderBulkStmt, createItemFolderBulk,
		arg.ID,
		arg.Name,
		arg.ParentID,
		arg.CollectionID,
		arg.Prev,
		arg.Next,
		arg.ID_2,
		arg.Name_2,
		arg.ParentID_2,
		arg.CollectionID_2,
		arg.Prev_2,
		arg.Next_2,
		arg.ID_3,
		arg.Name_3,
		arg.ParentID_3,
		arg.CollectionID_3,
		arg.Prev_3,
		arg.Next_3,
		arg.ID_4,
		arg.Name_4,
		arg.ParentID_4,
		arg.CollectionID_4,
		arg.Prev_4,
		arg.Next_4,
		arg.ID_5,
		arg.Name_5,
		arg.ParentID_5,
		arg.CollectionID_5,
		arg.Prev_5,
		arg.Next_5,
		arg.ID_6,
		arg.Name_6,
		arg.ParentID_6,
		arg.CollectionID_6,
		arg.Prev_6,
		arg.Next_6,
		arg.ID_7,
		arg.Name_7,
		arg.ParentID_7,
		arg.CollectionID_7,
		arg.Prev_7,
		arg.Next_7,
		arg.ID_8,
		arg.Name_8,
		arg.ParentID_8,
		arg.CollectionID_8,
		arg.Prev_8,
		arg.Next_8,
		arg.ID_9,
		arg.Name_9,
		arg.ParentID_9,
		arg.CollectionID_9,
		arg.Prev_9,
		arg.Next_9,
		arg.ID_10,
		arg.Name_10,
		arg.ParentID_10,
		arg.CollectionID_10,
		arg.Prev_10,
		arg.Next_10,
	)
	return err
}

const createQuery = `-- name: CreateQuery :exec
INSERT INTO
  example_query (id, example_id, query_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateQueryParams struct {
	ID          ulid.ULID
	ExampleID   ulid.ULID
	QueryKey    string
	Enable      bool
	Description string
	Value       string
}

func (q *Queries) CreateQuery(ctx context.Context, arg CreateQueryParams) error {
	_, err := q.exec(ctx, q.createQueryStmt, createQuery,
		arg.ID,
		arg.ExampleID,
		arg.QueryKey,
		arg.Enable,
		arg.Description,
		arg.Value,
	)
	return err
}

const createQueryBulk = `-- name: CreateQueryBulk :exec
INSERT INTO
  example_query (id, example_id, query_key, enable, description, value)
VALUES
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?),
  (?, ?, ?, ?, ?, ?)
`

type CreateQueryBulkParams struct {
	ID             ulid.ULID
	ExampleID      ulid.ULID
	QueryKey       string
	Enable         bool
	Description    string
	Value          string
	ID_2           ulid.ULID
	ExampleID_2    ulid.ULID
	QueryKey_2     string
	Enable_2       bool
	Description_2  string
	Value_2        string
	ID_3           ulid.ULID
	ExampleID_3    ulid.ULID
	QueryKey_3     string
	Enable_3       bool
	Description_3  string
	Value_3        string
	ID_4           ulid.ULID
	ExampleID_4    ulid.ULID
	QueryKey_4     string
	Enable_4       bool
	Description_4  string
	Value_4        string
	ID_5           ulid.ULID
	ExampleID_5    ulid.ULID
	QueryKey_5     string
	Enable_5       bool
	Description_5  string
	Value_5        string
	ID_6           ulid.ULID
	ExampleID_6    ulid.ULID
	QueryKey_6     string
	Enable_6       bool
	Description_6  string
	Value_6        string
	ID_7           ulid.ULID
	ExampleID_7    ulid.ULID
	QueryKey_7     string
	Enable_7       bool
	Description_7  string
	Value_7        string
	ID_8           ulid.ULID
	ExampleID_8    ulid.ULID
	QueryKey_8     string
	Enable_8       bool
	Description_8  string
	Value_8        string
	ID_9           ulid.ULID
	ExampleID_9    ulid.ULID
	QueryKey_9     string
	Enable_9       bool
	Description_9  string
	Value_9        string
	ID_10          ulid.ULID
	ExampleID_10   ulid.ULID
	QueryKey_10    string
	Enable_10      bool
	Description_10 string
	Value_10       string
}

func (q *Queries) CreateQueryBulk(ctx context.Context, arg CreateQueryBulkParams) error {
	_, err := q.exec(ctx, q.createQueryBulkStmt, createQueryBulk,
		arg.ID,
		arg.ExampleID,
		arg.QueryKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID_2,
		arg.ExampleID_2,
		arg.QueryKey_2,
		arg.Enable_2,
		arg.Description_2,
		arg.Value_2,
		arg.ID_3,
		arg.ExampleID_3,
		arg.QueryKey_3,
		arg.Enable_3,
		arg.Description_3,
		arg.Value_3,
		arg.ID_4,
		arg.ExampleID_4,
		arg.QueryKey_4,
		arg.Enable_4,
		arg.Description_4,
		arg.Value_4,
		arg.ID_5,
		arg.ExampleID_5,
		arg.QueryKey_5,
		arg.Enable_5,
		arg.Description_5,
		arg.Value_5,
		arg.ID_6,
		arg.ExampleID_6,
		arg.QueryKey_6,
		arg.Enable_6,
		arg.Description_6,
		arg.Value_6,
		arg.ID_7,
		arg.ExampleID_7,
		arg.QueryKey_7,
		arg.Enable_7,
		arg.Description_7,
		arg.Value_7,
		arg.ID_8,
		arg.ExampleID_8,
		arg.QueryKey_8,
		arg.Enable_8,
		arg.Description_8,
		arg.Value_8,
		arg.ID_9,
		arg.ExampleID_9,
		arg.QueryKey_9,
		arg.Enable_9,
		arg.Description_9,
		arg.Value_9,
		arg.ID_10,
		arg.ExampleID_10,
		arg.QueryKey_10,
		arg.Enable_10,
		arg.Description_10,
		arg.Value_10,
	)
	return err
}

const createResultApi = `-- name: CreateResultApi :exec
INSERT INTO
  result_api (
    id,
    trigger_type,
    trigger_by,
    name,
    status,
    time,
    duration,
    http_resp
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateResultApiParams struct {
	ID          ulid.ULID
	TriggerType mresultapi.TriggerType
	TriggerBy   ulid.ULID
	Name        string
	Status      string
	Time        int64
	Duration    int64
	HttpResp    mresultapi.HttpResp
}

func (q *Queries) CreateResultApi(ctx context.Context, arg CreateResultApiParams) error {
	_, err := q.exec(ctx, q.createResultApiStmt, createResultApi,
		arg.ID,
		arg.TriggerType,
		arg.TriggerBy,
		arg.Name,
		arg.Status,
		arg.Time,
		arg.Duration,
		arg.HttpResp,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
  users (
    id,
    email,
    password_hash,
    provider_type,
    provider_id
  )
VALUES
  (?, ?, ?, ?, ?) RETURNING id, email, password_hash, provider_type, provider_id, status
`

type CreateUserParams struct {
	ID           ulid.ULID
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.ProviderType,
		arg.ProviderID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
		&i.Status,
	)
	return i, err
}

const createWorkspace = `-- name: CreateWorkspace :exec
INSERT INTO
  workspaces (id, name, updated)
VALUES
  (?, ?, ?)
`

type CreateWorkspaceParams struct {
	ID      ulid.ULID
	Name    string
	Updated int64
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) error {
	_, err := q.exec(ctx, q.createWorkspaceStmt, createWorkspace, arg.ID, arg.Name, arg.Updated)
	return err
}

const createWorkspaceUser = `-- name: CreateWorkspaceUser :exec
INSERT INTO
  workspaces_users (id, workspace_id, user_id, role)
VALUES
  (?, ?, ?, ?)
`

type CreateWorkspaceUserParams struct {
	ID          ulid.ULID
	WorkspaceID ulid.ULID
	UserID      ulid.ULID
	Role        int8
}

func (q *Queries) CreateWorkspaceUser(ctx context.Context, arg CreateWorkspaceUserParams) error {
	_, err := q.exec(ctx, q.createWorkspaceUserStmt, createWorkspaceUser,
		arg.ID,
		arg.WorkspaceID,
		arg.UserID,
		arg.Role,
	)
	return err
}

const deleteBodyForm = `-- name: DeleteBodyForm :exec
DELETE FROM example_body_form
WHERE
  id = ?
`

func (q *Queries) DeleteBodyForm(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteBodyFormStmt, deleteBodyForm, id)
	return err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections
WHERE
  id = ?
`

func (q *Queries) DeleteCollection(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteCollectionStmt, deleteCollection, id)
	return err
}

const deleteHeader = `-- name: DeleteHeader :exec
DELETE FROM example_header
WHERE
  id = ?
`

func (q *Queries) DeleteHeader(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteHeaderStmt, deleteHeader, id)
	return err
}

const deleteItemApi = `-- name: DeleteItemApi :exec
DELETE FROM item_api
WHERE
  id = ?
`

func (q *Queries) DeleteItemApi(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteItemApiStmt, deleteItemApi, id)
	return err
}

const deleteItemApiExample = `-- name: DeleteItemApiExample :exec
DELETE FROM item_api_example
WHERE
  id = ?
`

func (q *Queries) DeleteItemApiExample(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteItemApiExampleStmt, deleteItemApiExample, id)
	return err
}

const deleteItemFolder = `-- name: DeleteItemFolder :exec
DELETE FROM item_folder
WHERE
  id = ?
`

func (q *Queries) DeleteItemFolder(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteItemFolderStmt, deleteItemFolder, id)
	return err
}

const deleteQuery = `-- name: DeleteQuery :exec
DELETE FROM example_query
WHERE
  id = ?
`

func (q *Queries) DeleteQuery(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteQueryStmt, deleteQuery, id)
	return err
}

const deleteResultApi = `-- name: DeleteResultApi :exec
DELETE FROM result_api
WHERE
  id = ?
`

func (q *Queries) DeleteResultApi(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteResultApiStmt, deleteResultApi, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE
  id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM workspaces
WHERE
  id = ?
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteWorkspaceStmt, deleteWorkspace, id)
	return err
}

const deleteWorkspaceUser = `-- name: DeleteWorkspaceUser :exec
DELETE FROM workspaces_users
WHERE
  id = ?
`

func (q *Queries) DeleteWorkspaceUser(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteWorkspaceUserStmt, deleteWorkspaceUser, id)
	return err
}

const getBodyForm = `-- name: GetBodyForm :one
/*
*
* body_form
*
*/

SELECT 
  id,
  example_id,
  body_key,
  enable,
  description,
  value
FROM 
    example_body_form 
WHERE 
    id = ?
`

func (q *Queries) GetBodyForm(ctx context.Context, id ulid.ULID) (ExampleBodyForm, error) {
	row := q.queryRow(ctx, q.getBodyFormStmt, getBodyForm, id)
	var i ExampleBodyForm
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.BodyKey,
		&i.Enable,
		&i.Description,
		&i.Value,
	)
	return i, err
}

const getBodyFormsByExampleID = `-- name: GetBodyFormsByExampleID :many
SELECT
  id,
  example_id,
  body_key,
  enable,
  description,
  value
FROM 
    example_body_form 
WHERE 
    example_id = ?
`

func (q *Queries) GetBodyFormsByExampleID(ctx context.Context, exampleID ulid.ULID) ([]ExampleBodyForm, error) {
	rows, err := q.query(ctx, q.getBodyFormsByExampleIDStmt, getBodyFormsByExampleID, exampleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExampleBodyForm
	for rows.Next() {
		var i ExampleBodyForm
		if err := rows.Scan(
			&i.ID,
			&i.ExampleID,
			&i.BodyKey,
			&i.Enable,
			&i.Description,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollection = `-- name: GetCollection :one
SELECT
  id,
  owner_id,
  name
FROM
  collections
WHERE
  id = ?
LIMIT
  1
`

// Collections
func (q *Queries) GetCollection(ctx context.Context, id ulid.ULID) (Collection, error) {
	row := q.queryRow(ctx, q.getCollectionStmt, getCollection, id)
	var i Collection
	err := row.Scan(&i.ID, &i.OwnerID, &i.Name)
	return i, err
}

const getCollectionByOwnerID = `-- name: GetCollectionByOwnerID :many
SELECT
  id,
  owner_id,
  name
FROM
  collections
WHERE
  owner_id = ?
`

func (q *Queries) GetCollectionByOwnerID(ctx context.Context, ownerID ulid.ULID) ([]Collection, error) {
	rows, err := q.query(ctx, q.getCollectionByOwnerIDStmt, getCollectionByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.OwnerID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionByPlatformIDandType = `-- name: GetCollectionByPlatformIDandType :many
SELECT
  id,
  owner_id,
  name
FROM
  collections
WHERE
  id = ?
`

func (q *Queries) GetCollectionByPlatformIDandType(ctx context.Context, id ulid.ULID) ([]Collection, error) {
	rows, err := q.query(ctx, q.getCollectionByPlatformIDandTypeStmt, getCollectionByPlatformIDandType, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.OwnerID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionOwnerID = `-- name: GetCollectionOwnerID :one
SELECT
  owner_id
FROM
  collections
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetCollectionOwnerID(ctx context.Context, id ulid.ULID) (ulid.ULID, error) {
	row := q.queryRow(ctx, q.getCollectionOwnerIDStmt, getCollectionOwnerID, id)
	var owner_id ulid.ULID
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getHeader = `-- name: GetHeader :one
/*
*
* Header 
*
*/

SELECT 
  id,
  example_id,
  header_key,
  enable,
  description,
  value
FROM 
  example_header
WHERE
  id = ?
`

func (q *Queries) GetHeader(ctx context.Context, id ulid.ULID) (ExampleHeader, error) {
	row := q.queryRow(ctx, q.getHeaderStmt, getHeader, id)
	var i ExampleHeader
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.HeaderKey,
		&i.Enable,
		&i.Description,
		&i.Value,
	)
	return i, err
}

const getHeadersByExampleID = `-- name: GetHeadersByExampleID :many
SELECT
  id,
  example_id,
  header_key,
  enable,
  description,
  value
FROM 
  example_header
WHERE
  example_id = ?
`

func (q *Queries) GetHeadersByExampleID(ctx context.Context, exampleID ulid.ULID) ([]ExampleHeader, error) {
	rows, err := q.query(ctx, q.getHeadersByExampleIDStmt, getHeadersByExampleID, exampleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExampleHeader
	for rows.Next() {
		var i ExampleHeader
		if err := rows.Scan(
			&i.ID,
			&i.ExampleID,
			&i.HeaderKey,
			&i.Enable,
			&i.Description,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemApi = `-- name: GetItemApi :one
SELECT
  id,
  collection_id,
  parent_id,
  name,
  url,
  method,
  prev,
  next
FROM
  item_api
WHERE
  id = ?
LIMIT
  1
`

// This file is the source of truth for saas application's schema
//
// ItemApi
func (q *Queries) GetItemApi(ctx context.Context, id ulid.ULID) (ItemApi, error) {
	row := q.queryRow(ctx, q.getItemApiStmt, getItemApi, id)
	var i ItemApi
	err := row.Scan(
		&i.ID,
		&i.CollectionID,
		&i.ParentID,
		&i.Name,
		&i.Url,
		&i.Method,
		&i.Prev,
		&i.Next,
	)
	return i, err
}

const getItemApiExample = `-- name: GetItemApiExample :one
SELECT
  id,
  item_api_id,
  collection_id,
  parent_example_id,
  is_default,
  name,
  compressed,
  body,
  prev,
  next
FROM
  item_api_example
WHERE
  id = ?
LIMIT
  1
`

// Item Api Example
func (q *Queries) GetItemApiExample(ctx context.Context, id ulid.ULID) (ItemApiExample, error) {
	row := q.queryRow(ctx, q.getItemApiExampleStmt, getItemApiExample, id)
	var i ItemApiExample
	err := row.Scan(
		&i.ID,
		&i.ItemApiID,
		&i.CollectionID,
		&i.ParentExampleID,
		&i.IsDefault,
		&i.Name,
		&i.Compressed,
		&i.Body,
		&i.Prev,
		&i.Next,
	)
	return i, err
}

const getItemApiExampleByCollectionID = `-- name: GetItemApiExampleByCollectionID :many
SELECT
  id,
  item_api_id,
  collection_id,
  parent_example_id,
  is_default,
  name,
  compressed,
  body,
  prev,
  next
FROM
  item_api_example
WHERE
  collection_id = ?
`

func (q *Queries) GetItemApiExampleByCollectionID(ctx context.Context, collectionID ulid.ULID) ([]ItemApiExample, error) {
	rows, err := q.query(ctx, q.getItemApiExampleByCollectionIDStmt, getItemApiExampleByCollectionID, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemApiExample
	for rows.Next() {
		var i ItemApiExample
		if err := rows.Scan(
			&i.ID,
			&i.ItemApiID,
			&i.CollectionID,
			&i.ParentExampleID,
			&i.IsDefault,
			&i.Name,
			&i.Compressed,
			&i.Body,
			&i.Prev,
			&i.Next,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemApiExampleDefault = `-- name: GetItemApiExampleDefault :one
SELECT
  id,
  item_api_id,
  collection_id,
  parent_example_id,
  is_default,
  name,
  compressed,
  body,
  prev,
  next
FROM
  item_api_example
WHERE
  item_api_id = ?
  AND is_default = true
LIMIT
  1
`

func (q *Queries) GetItemApiExampleDefault(ctx context.Context, itemApiID ulid.ULID) (ItemApiExample, error) {
	row := q.queryRow(ctx, q.getItemApiExampleDefaultStmt, getItemApiExampleDefault, itemApiID)
	var i ItemApiExample
	err := row.Scan(
		&i.ID,
		&i.ItemApiID,
		&i.CollectionID,
		&i.ParentExampleID,
		&i.IsDefault,
		&i.Name,
		&i.Compressed,
		&i.Body,
		&i.Prev,
		&i.Next,
	)
	return i, err
}

const getItemApiExamples = `-- name: GetItemApiExamples :many
SELECT
  id,
  item_api_id,
  collection_id,
  parent_example_id,
  is_default,
  name,
  compressed,
  body,
  prev,
  next
FROM
  item_api_example
WHERE
  item_api_id = ?
  AND is_default = false
`

func (q *Queries) GetItemApiExamples(ctx context.Context, itemApiID ulid.ULID) ([]ItemApiExample, error) {
	rows, err := q.query(ctx, q.getItemApiExamplesStmt, getItemApiExamples, itemApiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemApiExample
	for rows.Next() {
		var i ItemApiExample
		if err := rows.Scan(
			&i.ID,
			&i.ItemApiID,
			&i.CollectionID,
			&i.ParentExampleID,
			&i.IsDefault,
			&i.Name,
			&i.Compressed,
			&i.Body,
			&i.Prev,
			&i.Next,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemApiOwnerID = `-- name: GetItemApiOwnerID :one
SELECT
  c.owner_id
FROM
  collections c
  INNER JOIN item_api i ON c.id = i.collection_id
WHERE
  i.id = ?
LIMIT
  1
`

func (q *Queries) GetItemApiOwnerID(ctx context.Context, id ulid.ULID) (ulid.ULID, error) {
	row := q.queryRow(ctx, q.getItemApiOwnerIDStmt, getItemApiOwnerID, id)
	var owner_id ulid.ULID
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getItemFolder = `-- name: GetItemFolder :one
SELECT
  id,
  name,
  parent_id,
  collection_id
FROM
  item_folder
WHERE
  id = ?
LIMIT
  1
`

type GetItemFolderRow struct {
	ID           ulid.ULID
	Name         string
	ParentID     *ulid.ULID
	CollectionID ulid.ULID
}

// ItemFolder
func (q *Queries) GetItemFolder(ctx context.Context, id ulid.ULID) (GetItemFolderRow, error) {
	row := q.queryRow(ctx, q.getItemFolderStmt, getItemFolder, id)
	var i GetItemFolderRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.CollectionID,
	)
	return i, err
}

const getItemFolderByCollectionID = `-- name: GetItemFolderByCollectionID :many
SELECT
  id,
  name,
  parent_id,
  collection_id
FROM
  item_folder
WHERE
  collection_id = ?
`

type GetItemFolderByCollectionIDRow struct {
	ID           ulid.ULID
	Name         string
	ParentID     *ulid.ULID
	CollectionID ulid.ULID
}

func (q *Queries) GetItemFolderByCollectionID(ctx context.Context, collectionID ulid.ULID) ([]GetItemFolderByCollectionIDRow, error) {
	rows, err := q.query(ctx, q.getItemFolderByCollectionIDStmt, getItemFolderByCollectionID, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemFolderByCollectionIDRow
	for rows.Next() {
		var i GetItemFolderByCollectionIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.CollectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemFolderOwnerID = `-- name: GetItemFolderOwnerID :one
SELECT
  c.owner_id
FROM
  collections c
  INNER JOIN item_folder i ON c.id = i.collection_id
WHERE
  i.id = ?
LIMIT
  1
`

func (q *Queries) GetItemFolderOwnerID(ctx context.Context, id ulid.ULID) (ulid.ULID, error) {
	row := q.queryRow(ctx, q.getItemFolderOwnerIDStmt, getItemFolderOwnerID, id)
	var owner_id ulid.ULID
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getItemsApiByCollectionID = `-- name: GetItemsApiByCollectionID :many
SELECT
  id,
  collection_id,
  parent_id,
  name,
  url,
  method,
  prev,
  next
FROM
  item_api
WHERE
  collection_id = ?
`

func (q *Queries) GetItemsApiByCollectionID(ctx context.Context, collectionID ulid.ULID) ([]ItemApi, error) {
	rows, err := q.query(ctx, q.getItemsApiByCollectionIDStmt, getItemsApiByCollectionID, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemApi
	for rows.Next() {
		var i ItemApi
		if err := rows.Scan(
			&i.ID,
			&i.CollectionID,
			&i.ParentID,
			&i.Name,
			&i.Url,
			&i.Method,
			&i.Prev,
			&i.Next,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQueriesByExampleID = `-- name: GetQueriesByExampleID :many
SELECT
  id,
  example_id,
  query_key,
  enable,
  description,
  value
FROM 
  example_query
WHERE
  example_id = ?
`

func (q *Queries) GetQueriesByExampleID(ctx context.Context, exampleID ulid.ULID) ([]ExampleQuery, error) {
	rows, err := q.query(ctx, q.getQueriesByExampleIDStmt, getQueriesByExampleID, exampleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExampleQuery
	for rows.Next() {
		var i ExampleQuery
		if err := rows.Scan(
			&i.ID,
			&i.ExampleID,
			&i.QueryKey,
			&i.Enable,
			&i.Description,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuery = `-- name: GetQuery :one
/*
*
* Query
*
*/

SELECT 
  id,
  example_id,
  query_key,
  enable,
  description,
  value
FROM 
  example_query
WHERE
  id = ?
`

func (q *Queries) GetQuery(ctx context.Context, id ulid.ULID) (ExampleQuery, error) {
	row := q.queryRow(ctx, q.getQueryStmt, getQuery, id)
	var i ExampleQuery
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.QueryKey,
		&i.Enable,
		&i.Description,
		&i.Value,
	)
	return i, err
}

const getQueryByID = `-- name: GetQueryByID :one
SELECT
  id,
  example_id,
  query_key,
  enable,
  description,
  value
FROM
  example_query
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetQueryByID(ctx context.Context, id ulid.ULID) (ExampleQuery, error) {
	row := q.queryRow(ctx, q.getQueryByIDStmt, getQueryByID, id)
	var i ExampleQuery
	err := row.Scan(
		&i.ID,
		&i.ExampleID,
		&i.QueryKey,
		&i.Enable,
		&i.Description,
		&i.Value,
	)
	return i, err
}

const getResultApi = `-- name: GetResultApi :one
SELECT
  id, trigger_type, trigger_by, name, status, time, duration, http_resp
FROM
  result_api
WHERE
  id = ?
LIMIT
  1
`

// ResultAPI
func (q *Queries) GetResultApi(ctx context.Context, id ulid.ULID) (ResultApi, error) {
	row := q.queryRow(ctx, q.getResultApiStmt, getResultApi, id)
	var i ResultApi
	err := row.Scan(
		&i.ID,
		&i.TriggerType,
		&i.TriggerBy,
		&i.Name,
		&i.Status,
		&i.Time,
		&i.Duration,
		&i.HttpResp,
	)
	return i, err
}

const getResultApiByTriggerBy = `-- name: GetResultApiByTriggerBy :many
SELECT
  id, trigger_type, trigger_by, name, status, time, duration, http_resp
FROM
  result_api
WHERE
  trigger_by = ?
`

func (q *Queries) GetResultApiByTriggerBy(ctx context.Context, triggerBy ulid.ULID) ([]ResultApi, error) {
	rows, err := q.query(ctx, q.getResultApiByTriggerByStmt, getResultApiByTriggerBy, triggerBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResultApi
	for rows.Next() {
		var i ResultApi
		if err := rows.Scan(
			&i.ID,
			&i.TriggerType,
			&i.TriggerBy,
			&i.Name,
			&i.Status,
			&i.Time,
			&i.Duration,
			&i.HttpResp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultApiByTriggerByAndTriggerType = `-- name: GetResultApiByTriggerByAndTriggerType :many
SELECT
  id, trigger_type, trigger_by, name, status, time, duration, http_resp
FROM
  result_api
WHERE
  trigger_by = ?
  AND trigger_type = ?
`

type GetResultApiByTriggerByAndTriggerTypeParams struct {
	TriggerBy   ulid.ULID
	TriggerType mresultapi.TriggerType
}

func (q *Queries) GetResultApiByTriggerByAndTriggerType(ctx context.Context, arg GetResultApiByTriggerByAndTriggerTypeParams) ([]ResultApi, error) {
	rows, err := q.query(ctx, q.getResultApiByTriggerByAndTriggerTypeStmt, getResultApiByTriggerByAndTriggerType, arg.TriggerBy, arg.TriggerType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResultApi
	for rows.Next() {
		var i ResultApi
		if err := rows.Scan(
			&i.ID,
			&i.TriggerType,
			&i.TriggerBy,
			&i.Name,
			&i.Status,
			&i.Time,
			&i.Duration,
			&i.HttpResp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
  id,
  email,
  password_hash,
  provider_type,
  provider_id
FROM
  users
WHERE
  id = ?
LIMIT
  1
`

type GetUserRow struct {
	ID           ulid.ULID
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

// Users
func (q *Queries) GetUser(ctx context.Context, id ulid.ULID) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  id,
  email,
  password_hash,
  provider_type,
  provider_id
FROM
  users
WHERE
  email = ?
LIMIT
  1
`

type GetUserByEmailRow struct {
	ID           ulid.ULID
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getUserByEmailAndProviderType = `-- name: GetUserByEmailAndProviderType :one
SELECT
  id,
  email,
  password_hash,
  provider_type,
  provider_id
FROM
  users
WHERE
  email = ?
  AND provider_type = ?
LIMIT
  1
`

type GetUserByEmailAndProviderTypeParams struct {
	Email        string
	ProviderType int8
}

type GetUserByEmailAndProviderTypeRow struct {
	ID           ulid.ULID
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) GetUserByEmailAndProviderType(ctx context.Context, arg GetUserByEmailAndProviderTypeParams) (GetUserByEmailAndProviderTypeRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailAndProviderTypeStmt, getUserByEmailAndProviderType, arg.Email, arg.ProviderType)
	var i GetUserByEmailAndProviderTypeRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getUserByProviderIDandType = `-- name: GetUserByProviderIDandType :one
SELECT
  id,
  email,
  password_hash,
  provider_type,
  provider_id
FROM
  users
WHERE
  provider_id = ?
  AND provider_type = ?
LIMIT
  1
`

type GetUserByProviderIDandTypeParams struct {
	ProviderID   sql.NullString
	ProviderType int8
}

type GetUserByProviderIDandTypeRow struct {
	ID           ulid.ULID
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) GetUserByProviderIDandType(ctx context.Context, arg GetUserByProviderIDandTypeParams) (GetUserByProviderIDandTypeRow, error) {
	row := q.queryRow(ctx, q.getUserByProviderIDandTypeStmt, getUserByProviderIDandType, arg.ProviderID, arg.ProviderType)
	var i GetUserByProviderIDandTypeRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT
  id,
  name,
  updated
FROM
  workspaces
WHERE
  id = ?
LIMIT
  1
`

// Workspaces
func (q *Queries) GetWorkspace(ctx context.Context, id ulid.ULID) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceStmt, getWorkspace, id)
	var i Workspace
	err := row.Scan(&i.ID, &i.Name, &i.Updated)
	return i, err
}

const getWorkspaceByUserID = `-- name: GetWorkspaceByUserID :one
SELECT
  id,
  name,
  updated
FROM
  workspaces
WHERE
  id = (
    SELECT
      workspace_id
    FROM
      workspaces_users
    WHERE
      user_id = ?
    LIMIT
      1
  )
LIMIT
  1
`

func (q *Queries) GetWorkspaceByUserID(ctx context.Context, userID ulid.ULID) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceByUserIDStmt, getWorkspaceByUserID, userID)
	var i Workspace
	err := row.Scan(&i.ID, &i.Name, &i.Updated)
	return i, err
}

const getWorkspaceByUserIDandWorkspaceID = `-- name: GetWorkspaceByUserIDandWorkspaceID :one
SELECT
  id,
  name,
  updated
FROM
  workspaces
WHERE
  id = (
    SELECT
      workspace_id
    FROM
      workspaces_users
    WHERE
      workspace_id = ?
      AND user_id = ?
    LIMIT
      1
  )
LIMIT
  1
`

type GetWorkspaceByUserIDandWorkspaceIDParams struct {
	WorkspaceID ulid.ULID
	UserID      ulid.ULID
}

func (q *Queries) GetWorkspaceByUserIDandWorkspaceID(ctx context.Context, arg GetWorkspaceByUserIDandWorkspaceIDParams) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceByUserIDandWorkspaceIDStmt, getWorkspaceByUserIDandWorkspaceID, arg.WorkspaceID, arg.UserID)
	var i Workspace
	err := row.Scan(&i.ID, &i.Name, &i.Updated)
	return i, err
}

const getWorkspaceUser = `-- name: GetWorkspaceUser :one
SELECT
  id,
  workspace_id,
  user_id,
  role
FROM
  workspaces_users
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetWorkspaceUser(ctx context.Context, id ulid.ULID) (WorkspacesUser, error) {
	row := q.queryRow(ctx, q.getWorkspaceUserStmt, getWorkspaceUser, id)
	var i WorkspacesUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.UserID,
		&i.Role,
	)
	return i, err
}

const getWorkspaceUserByUserID = `-- name: GetWorkspaceUserByUserID :many
SELECT
  id,
  workspace_id,
  user_id,
  role
FROM
  workspaces_users
WHERE
  user_id = ?
`

func (q *Queries) GetWorkspaceUserByUserID(ctx context.Context, userID ulid.ULID) ([]WorkspacesUser, error) {
	rows, err := q.query(ctx, q.getWorkspaceUserByUserIDStmt, getWorkspaceUserByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspacesUser
	for rows.Next() {
		var i WorkspacesUser
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.UserID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceUserByWorkspaceID = `-- name: GetWorkspaceUserByWorkspaceID :many
SELECT
  id,
  workspace_id,
  user_id,
  role
FROM
  workspaces_users
WHERE
  workspace_id = ?
`

func (q *Queries) GetWorkspaceUserByWorkspaceID(ctx context.Context, workspaceID ulid.ULID) ([]WorkspacesUser, error) {
	rows, err := q.query(ctx, q.getWorkspaceUserByWorkspaceIDStmt, getWorkspaceUserByWorkspaceID, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspacesUser
	for rows.Next() {
		var i WorkspacesUser
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.UserID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceUserByWorkspaceIDAndUserID = `-- name: GetWorkspaceUserByWorkspaceIDAndUserID :one
SELECT
  id,
  workspace_id,
  user_id,
  role
FROM
  workspaces_users
WHERE
  workspace_id = ?
  AND user_id = ?
LIMIT
  1
`

type GetWorkspaceUserByWorkspaceIDAndUserIDParams struct {
	WorkspaceID ulid.ULID
	UserID      ulid.ULID
}

func (q *Queries) GetWorkspaceUserByWorkspaceIDAndUserID(ctx context.Context, arg GetWorkspaceUserByWorkspaceIDAndUserIDParams) (WorkspacesUser, error) {
	row := q.queryRow(ctx, q.getWorkspaceUserByWorkspaceIDAndUserIDStmt, getWorkspaceUserByWorkspaceIDAndUserID, arg.WorkspaceID, arg.UserID)
	var i WorkspacesUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.UserID,
		&i.Role,
	)
	return i, err
}

const getWorkspacesByUserID = `-- name: GetWorkspacesByUserID :many
SELECT
  id,
  name,
  updated
FROM
  workspaces
WHERE
  id IN (
    SELECT
      workspace_id
    FROM
      workspaces_users
    WHERE
      user_id = ?
  )
`

func (q *Queries) GetWorkspacesByUserID(ctx context.Context, userID ulid.ULID) ([]Workspace, error) {
	rows, err := q.query(ctx, q.getWorkspacesByUserIDStmt, getWorkspacesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(&i.ID, &i.Name, &i.Updated); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setBodyFormEnable = `-- name: SetBodyFormEnable :exec
UPDATE example_body_form
SET
  enable = ?
WHERE
  id = ?
`

type SetBodyFormEnableParams struct {
	Enable bool
	ID     ulid.ULID
}

func (q *Queries) SetBodyFormEnable(ctx context.Context, arg SetBodyFormEnableParams) error {
	_, err := q.exec(ctx, q.setBodyFormEnableStmt, setBodyFormEnable, arg.Enable, arg.ID)
	return err
}

const setHeaderEnable = `-- name: SetHeaderEnable :exec
UPDATE example_header
    SET
  enable = ?
WHERE
  id = ?
`

type SetHeaderEnableParams struct {
	Enable bool
	ID     ulid.ULID
}

func (q *Queries) SetHeaderEnable(ctx context.Context, arg SetHeaderEnableParams) error {
	_, err := q.exec(ctx, q.setHeaderEnableStmt, setHeaderEnable, arg.Enable, arg.ID)
	return err
}

const setQueryEnable = `-- name: SetQueryEnable :exec
UPDATE example_query
SET
  enable = ?
WHERE
  id = ?
`

type SetQueryEnableParams struct {
	Enable bool
	ID     ulid.ULID
}

func (q *Queries) SetQueryEnable(ctx context.Context, arg SetQueryEnableParams) error {
	_, err := q.exec(ctx, q.setQueryEnableStmt, setQueryEnable, arg.Enable, arg.ID)
	return err
}

const updateBodyForm = `-- name: UpdateBodyForm :exec
UPDATE example_body_form
SET
  body_key = ?,
  enable = ?,
  description = ?,
  value = ?
WHERE
  id = ?
`

type UpdateBodyFormParams struct {
	BodyKey     string
	Enable      bool
	Description string
	Value       string
	ID          ulid.ULID
}

func (q *Queries) UpdateBodyForm(ctx context.Context, arg UpdateBodyFormParams) error {
	_, err := q.exec(ctx, q.updateBodyFormStmt, updateBodyForm,
		arg.BodyKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID,
	)
	return err
}

const updateCollection = `-- name: UpdateCollection :exec
UPDATE collections
SET
  owner_id = ?,
  name = ?
WHERE
  id = ?
`

type UpdateCollectionParams struct {
	OwnerID ulid.ULID
	Name    string
	ID      ulid.ULID
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) error {
	_, err := q.exec(ctx, q.updateCollectionStmt, updateCollection, arg.OwnerID, arg.Name, arg.ID)
	return err
}

const updateHeader = `-- name: UpdateHeader :exec
UPDATE example_header
SET
  header_key = ?,
  enable = ?,
  description = ?,
  value = ?
WHERE
  id = ?
`

type UpdateHeaderParams struct {
	HeaderKey   string
	Enable      bool
	Description string
	Value       string
	ID          ulid.ULID
}

func (q *Queries) UpdateHeader(ctx context.Context, arg UpdateHeaderParams) error {
	_, err := q.exec(ctx, q.updateHeaderStmt, updateHeader,
		arg.HeaderKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID,
	)
	return err
}

const updateItemApi = `-- name: UpdateItemApi :exec
UPDATE item_api
SET
  collection_id = ?,
  parent_id = ?,
  name = ?,
  url = ?,
  method = ?
WHERE
  id = ?
`

type UpdateItemApiParams struct {
	CollectionID ulid.ULID
	ParentID     *ulid.ULID
	Name         string
	Url          string
	Method       string
	ID           ulid.ULID
}

func (q *Queries) UpdateItemApi(ctx context.Context, arg UpdateItemApiParams) error {
	_, err := q.exec(ctx, q.updateItemApiStmt, updateItemApi,
		arg.CollectionID,
		arg.ParentID,
		arg.Name,
		arg.Url,
		arg.Method,
		arg.ID,
	)
	return err
}

const updateItemApiExample = `-- name: UpdateItemApiExample :exec
UPDATE item_api_example
SET
  name = ?,
  compressed = ?,
  body = ?
WHERE
  id = ?
`

type UpdateItemApiExampleParams struct {
	Name       string
	Compressed bool
	Body       []byte
	ID         ulid.ULID
}

func (q *Queries) UpdateItemApiExample(ctx context.Context, arg UpdateItemApiExampleParams) error {
	_, err := q.exec(ctx, q.updateItemApiExampleStmt, updateItemApiExample,
		arg.Name,
		arg.Compressed,
		arg.Body,
		arg.ID,
	)
	return err
}

const updateItemFolder = `-- name: UpdateItemFolder :exec
UPDATE item_folder
SET
  name = ?,
  parent_id = ?
WHERE
  id = ?
`

type UpdateItemFolderParams struct {
	Name     string
	ParentID *ulid.ULID
	ID       ulid.ULID
}

func (q *Queries) UpdateItemFolder(ctx context.Context, arg UpdateItemFolderParams) error {
	_, err := q.exec(ctx, q.updateItemFolderStmt, updateItemFolder, arg.Name, arg.ParentID, arg.ID)
	return err
}

const updateQuery = `-- name: UpdateQuery :exec
UPDATE example_query
SET
  query_key = ?,
  enable = ?,
  description = ?,
  value = ?
WHERE
  id = ?
`

type UpdateQueryParams struct {
	QueryKey    string
	Enable      bool
	Description string
	Value       string
	ID          ulid.ULID
}

func (q *Queries) UpdateQuery(ctx context.Context, arg UpdateQueryParams) error {
	_, err := q.exec(ctx, q.updateQueryStmt, updateQuery,
		arg.QueryKey,
		arg.Enable,
		arg.Description,
		arg.Value,
		arg.ID,
	)
	return err
}

const updateResultApi = `-- name: UpdateResultApi :exec
UPDATE result_api
SET
  name = ?,
  status = ?,
  time = ?,
  duration = ?,
  http_resp = ?
WHERE
  id = ?
`

type UpdateResultApiParams struct {
	Name     string
	Status   string
	Time     int64
	Duration int64
	HttpResp mresultapi.HttpResp
	ID       ulid.ULID
}

func (q *Queries) UpdateResultApi(ctx context.Context, arg UpdateResultApiParams) error {
	_, err := q.exec(ctx, q.updateResultApiStmt, updateResultApi,
		arg.Name,
		arg.Status,
		arg.Time,
		arg.Duration,
		arg.HttpResp,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  email = ?,
  password_hash = ?
WHERE
  id = ?
`

type UpdateUserParams struct {
	Email        string
	PasswordHash []byte
	ID           ulid.ULID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser, arg.Email, arg.PasswordHash, arg.ID)
	return err
}

const updateWorkspace = `-- name: UpdateWorkspace :exec
UPDATE workspaces
SET
  name = ?
WHERE
  id = ?
`

type UpdateWorkspaceParams struct {
	Name string
	ID   ulid.ULID
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) error {
	_, err := q.exec(ctx, q.updateWorkspaceStmt, updateWorkspace, arg.Name, arg.ID)
	return err
}

const updateWorkspaceUser = `-- name: UpdateWorkspaceUser :exec
UPDATE workspaces_users
SET
  workspace_id = ?,
  user_id = ?,
  role = ?
WHERE
  id = ?
`

type UpdateWorkspaceUserParams struct {
	WorkspaceID ulid.ULID
	UserID      ulid.ULID
	Role        int8
	ID          ulid.ULID
}

func (q *Queries) UpdateWorkspaceUser(ctx context.Context, arg UpdateWorkspaceUserParams) error {
	_, err := q.exec(ctx, q.updateWorkspaceUserStmt, updateWorkspaceUser,
		arg.WorkspaceID,
		arg.UserID,
		arg.Role,
		arg.ID,
	)
	return err
}
