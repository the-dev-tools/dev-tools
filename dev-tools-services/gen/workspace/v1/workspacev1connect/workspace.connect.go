// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workspace/v1/workspace.proto

package workspacev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-services/gen/workspace/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkspaceServiceName is the fully-qualified name of the WorkspaceService service.
	WorkspaceServiceName = "workspace.v1.WorkspaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkspaceServiceGetWorkspacesProcedure is the fully-qualified name of the WorkspaceService's
	// GetWorkspaces RPC.
	WorkspaceServiceGetWorkspacesProcedure = "/workspace.v1.WorkspaceService/GetWorkspaces"
	// WorkspaceServiceGetWorkspaceProcedure is the fully-qualified name of the WorkspaceService's
	// GetWorkspace RPC.
	WorkspaceServiceGetWorkspaceProcedure = "/workspace.v1.WorkspaceService/GetWorkspace"
	// WorkspaceServiceCreateWorkspaceProcedure is the fully-qualified name of the WorkspaceService's
	// CreateWorkspace RPC.
	WorkspaceServiceCreateWorkspaceProcedure = "/workspace.v1.WorkspaceService/CreateWorkspace"
	// WorkspaceServiceUpdateWorkspaceProcedure is the fully-qualified name of the WorkspaceService's
	// UpdateWorkspace RPC.
	WorkspaceServiceUpdateWorkspaceProcedure = "/workspace.v1.WorkspaceService/UpdateWorkspace"
	// WorkspaceServiceDeleteWorkspaceProcedure is the fully-qualified name of the WorkspaceService's
	// DeleteWorkspace RPC.
	WorkspaceServiceDeleteWorkspaceProcedure = "/workspace.v1.WorkspaceService/DeleteWorkspace"
	// WorkspaceServiceListUsersProcedure is the fully-qualified name of the WorkspaceService's
	// ListUsers RPC.
	WorkspaceServiceListUsersProcedure = "/workspace.v1.WorkspaceService/ListUsers"
	// WorkspaceServiceInviteUserProcedure is the fully-qualified name of the WorkspaceService's
	// InviteUser RPC.
	WorkspaceServiceInviteUserProcedure = "/workspace.v1.WorkspaceService/InviteUser"
	// WorkspaceServiceRemoveUserProcedure is the fully-qualified name of the WorkspaceService's
	// RemoveUser RPC.
	WorkspaceServiceRemoveUserProcedure = "/workspace.v1.WorkspaceService/RemoveUser"
	// WorkspaceServiceUpdateUserRoleProcedure is the fully-qualified name of the WorkspaceService's
	// UpdateUserRole RPC.
	WorkspaceServiceUpdateUserRoleProcedure = "/workspace.v1.WorkspaceService/UpdateUserRole"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	workspaceServiceServiceDescriptor               = v1.File_workspace_v1_workspace_proto.Services().ByName("WorkspaceService")
	workspaceServiceGetWorkspacesMethodDescriptor   = workspaceServiceServiceDescriptor.Methods().ByName("GetWorkspaces")
	workspaceServiceGetWorkspaceMethodDescriptor    = workspaceServiceServiceDescriptor.Methods().ByName("GetWorkspace")
	workspaceServiceCreateWorkspaceMethodDescriptor = workspaceServiceServiceDescriptor.Methods().ByName("CreateWorkspace")
	workspaceServiceUpdateWorkspaceMethodDescriptor = workspaceServiceServiceDescriptor.Methods().ByName("UpdateWorkspace")
	workspaceServiceDeleteWorkspaceMethodDescriptor = workspaceServiceServiceDescriptor.Methods().ByName("DeleteWorkspace")
	workspaceServiceListUsersMethodDescriptor       = workspaceServiceServiceDescriptor.Methods().ByName("ListUsers")
	workspaceServiceInviteUserMethodDescriptor      = workspaceServiceServiceDescriptor.Methods().ByName("InviteUser")
	workspaceServiceRemoveUserMethodDescriptor      = workspaceServiceServiceDescriptor.Methods().ByName("RemoveUser")
	workspaceServiceUpdateUserRoleMethodDescriptor  = workspaceServiceServiceDescriptor.Methods().ByName("UpdateUserRole")
)

// WorkspaceServiceClient is a client for the workspace.v1.WorkspaceService service.
type WorkspaceServiceClient interface {
	GetWorkspaces(context.Context, *connect.Request[v1.GetWorkspacesRequest]) (*connect.Response[v1.GetWorkspacesResponse], error)
	GetWorkspace(context.Context, *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error)
	CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error)
	UpdateWorkspace(context.Context, *connect.Request[v1.UpdateWorkspaceRequest]) (*connect.Response[v1.UpdateWorkspaceResponse], error)
	DeleteWorkspace(context.Context, *connect.Request[v1.DeleteWorkspaceRequest]) (*connect.Response[v1.DeleteWorkspaceResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	RemoveUser(context.Context, *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
}

// NewWorkspaceServiceClient constructs a client for the workspace.v1.WorkspaceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkspaceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkspaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &workspaceServiceClient{
		getWorkspaces: connect.NewClient[v1.GetWorkspacesRequest, v1.GetWorkspacesResponse](
			httpClient,
			baseURL+WorkspaceServiceGetWorkspacesProcedure,
			connect.WithSchema(workspaceServiceGetWorkspacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getWorkspace: connect.NewClient[v1.GetWorkspaceRequest, v1.GetWorkspaceResponse](
			httpClient,
			baseURL+WorkspaceServiceGetWorkspaceProcedure,
			connect.WithSchema(workspaceServiceGetWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createWorkspace: connect.NewClient[v1.CreateWorkspaceRequest, v1.CreateWorkspaceResponse](
			httpClient,
			baseURL+WorkspaceServiceCreateWorkspaceProcedure,
			connect.WithSchema(workspaceServiceCreateWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateWorkspace: connect.NewClient[v1.UpdateWorkspaceRequest, v1.UpdateWorkspaceResponse](
			httpClient,
			baseURL+WorkspaceServiceUpdateWorkspaceProcedure,
			connect.WithSchema(workspaceServiceUpdateWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteWorkspace: connect.NewClient[v1.DeleteWorkspaceRequest, v1.DeleteWorkspaceResponse](
			httpClient,
			baseURL+WorkspaceServiceDeleteWorkspaceProcedure,
			connect.WithSchema(workspaceServiceDeleteWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+WorkspaceServiceListUsersProcedure,
			connect.WithSchema(workspaceServiceListUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		inviteUser: connect.NewClient[v1.InviteUserRequest, v1.InviteUserResponse](
			httpClient,
			baseURL+WorkspaceServiceInviteUserProcedure,
			connect.WithSchema(workspaceServiceInviteUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeUser: connect.NewClient[v1.RemoveUserRequest, v1.RemoveUserResponse](
			httpClient,
			baseURL+WorkspaceServiceRemoveUserProcedure,
			connect.WithSchema(workspaceServiceRemoveUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateUserRole: connect.NewClient[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse](
			httpClient,
			baseURL+WorkspaceServiceUpdateUserRoleProcedure,
			connect.WithSchema(workspaceServiceUpdateUserRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// workspaceServiceClient implements WorkspaceServiceClient.
type workspaceServiceClient struct {
	getWorkspaces   *connect.Client[v1.GetWorkspacesRequest, v1.GetWorkspacesResponse]
	getWorkspace    *connect.Client[v1.GetWorkspaceRequest, v1.GetWorkspaceResponse]
	createWorkspace *connect.Client[v1.CreateWorkspaceRequest, v1.CreateWorkspaceResponse]
	updateWorkspace *connect.Client[v1.UpdateWorkspaceRequest, v1.UpdateWorkspaceResponse]
	deleteWorkspace *connect.Client[v1.DeleteWorkspaceRequest, v1.DeleteWorkspaceResponse]
	listUsers       *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	inviteUser      *connect.Client[v1.InviteUserRequest, v1.InviteUserResponse]
	removeUser      *connect.Client[v1.RemoveUserRequest, v1.RemoveUserResponse]
	updateUserRole  *connect.Client[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse]
}

// GetWorkspaces calls workspace.v1.WorkspaceService.GetWorkspaces.
func (c *workspaceServiceClient) GetWorkspaces(ctx context.Context, req *connect.Request[v1.GetWorkspacesRequest]) (*connect.Response[v1.GetWorkspacesResponse], error) {
	return c.getWorkspaces.CallUnary(ctx, req)
}

// GetWorkspace calls workspace.v1.WorkspaceService.GetWorkspace.
func (c *workspaceServiceClient) GetWorkspace(ctx context.Context, req *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error) {
	return c.getWorkspace.CallUnary(ctx, req)
}

// CreateWorkspace calls workspace.v1.WorkspaceService.CreateWorkspace.
func (c *workspaceServiceClient) CreateWorkspace(ctx context.Context, req *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error) {
	return c.createWorkspace.CallUnary(ctx, req)
}

// UpdateWorkspace calls workspace.v1.WorkspaceService.UpdateWorkspace.
func (c *workspaceServiceClient) UpdateWorkspace(ctx context.Context, req *connect.Request[v1.UpdateWorkspaceRequest]) (*connect.Response[v1.UpdateWorkspaceResponse], error) {
	return c.updateWorkspace.CallUnary(ctx, req)
}

// DeleteWorkspace calls workspace.v1.WorkspaceService.DeleteWorkspace.
func (c *workspaceServiceClient) DeleteWorkspace(ctx context.Context, req *connect.Request[v1.DeleteWorkspaceRequest]) (*connect.Response[v1.DeleteWorkspaceResponse], error) {
	return c.deleteWorkspace.CallUnary(ctx, req)
}

// ListUsers calls workspace.v1.WorkspaceService.ListUsers.
func (c *workspaceServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// InviteUser calls workspace.v1.WorkspaceService.InviteUser.
func (c *workspaceServiceClient) InviteUser(ctx context.Context, req *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return c.inviteUser.CallUnary(ctx, req)
}

// RemoveUser calls workspace.v1.WorkspaceService.RemoveUser.
func (c *workspaceServiceClient) RemoveUser(ctx context.Context, req *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error) {
	return c.removeUser.CallUnary(ctx, req)
}

// UpdateUserRole calls workspace.v1.WorkspaceService.UpdateUserRole.
func (c *workspaceServiceClient) UpdateUserRole(ctx context.Context, req *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return c.updateUserRole.CallUnary(ctx, req)
}

// WorkspaceServiceHandler is an implementation of the workspace.v1.WorkspaceService service.
type WorkspaceServiceHandler interface {
	GetWorkspaces(context.Context, *connect.Request[v1.GetWorkspacesRequest]) (*connect.Response[v1.GetWorkspacesResponse], error)
	GetWorkspace(context.Context, *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error)
	CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error)
	UpdateWorkspace(context.Context, *connect.Request[v1.UpdateWorkspaceRequest]) (*connect.Response[v1.UpdateWorkspaceResponse], error)
	DeleteWorkspace(context.Context, *connect.Request[v1.DeleteWorkspaceRequest]) (*connect.Response[v1.DeleteWorkspaceResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error)
	RemoveUser(context.Context, *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
}

// NewWorkspaceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkspaceServiceHandler(svc WorkspaceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workspaceServiceGetWorkspacesHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetWorkspacesProcedure,
		svc.GetWorkspaces,
		connect.WithSchema(workspaceServiceGetWorkspacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceGetWorkspaceHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetWorkspaceProcedure,
		svc.GetWorkspace,
		connect.WithSchema(workspaceServiceGetWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceCreateWorkspaceHandler := connect.NewUnaryHandler(
		WorkspaceServiceCreateWorkspaceProcedure,
		svc.CreateWorkspace,
		connect.WithSchema(workspaceServiceCreateWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceUpdateWorkspaceHandler := connect.NewUnaryHandler(
		WorkspaceServiceUpdateWorkspaceProcedure,
		svc.UpdateWorkspace,
		connect.WithSchema(workspaceServiceUpdateWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceDeleteWorkspaceHandler := connect.NewUnaryHandler(
		WorkspaceServiceDeleteWorkspaceProcedure,
		svc.DeleteWorkspace,
		connect.WithSchema(workspaceServiceDeleteWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceListUsersHandler := connect.NewUnaryHandler(
		WorkspaceServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(workspaceServiceListUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceInviteUserHandler := connect.NewUnaryHandler(
		WorkspaceServiceInviteUserProcedure,
		svc.InviteUser,
		connect.WithSchema(workspaceServiceInviteUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceRemoveUserHandler := connect.NewUnaryHandler(
		WorkspaceServiceRemoveUserProcedure,
		svc.RemoveUser,
		connect.WithSchema(workspaceServiceRemoveUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceUpdateUserRoleHandler := connect.NewUnaryHandler(
		WorkspaceServiceUpdateUserRoleProcedure,
		svc.UpdateUserRole,
		connect.WithSchema(workspaceServiceUpdateUserRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/workspace.v1.WorkspaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkspaceServiceGetWorkspacesProcedure:
			workspaceServiceGetWorkspacesHandler.ServeHTTP(w, r)
		case WorkspaceServiceGetWorkspaceProcedure:
			workspaceServiceGetWorkspaceHandler.ServeHTTP(w, r)
		case WorkspaceServiceCreateWorkspaceProcedure:
			workspaceServiceCreateWorkspaceHandler.ServeHTTP(w, r)
		case WorkspaceServiceUpdateWorkspaceProcedure:
			workspaceServiceUpdateWorkspaceHandler.ServeHTTP(w, r)
		case WorkspaceServiceDeleteWorkspaceProcedure:
			workspaceServiceDeleteWorkspaceHandler.ServeHTTP(w, r)
		case WorkspaceServiceListUsersProcedure:
			workspaceServiceListUsersHandler.ServeHTTP(w, r)
		case WorkspaceServiceInviteUserProcedure:
			workspaceServiceInviteUserHandler.ServeHTTP(w, r)
		case WorkspaceServiceRemoveUserProcedure:
			workspaceServiceRemoveUserHandler.ServeHTTP(w, r)
		case WorkspaceServiceUpdateUserRoleProcedure:
			workspaceServiceUpdateUserRoleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkspaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkspaceServiceHandler struct{}

func (UnimplementedWorkspaceServiceHandler) GetWorkspaces(context.Context, *connect.Request[v1.GetWorkspacesRequest]) (*connect.Response[v1.GetWorkspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.GetWorkspaces is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetWorkspace(context.Context, *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.GetWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.CreateWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) UpdateWorkspace(context.Context, *connect.Request[v1.UpdateWorkspaceRequest]) (*connect.Response[v1.UpdateWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.UpdateWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) DeleteWorkspace(context.Context, *connect.Request[v1.DeleteWorkspaceRequest]) (*connect.Response[v1.DeleteWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.DeleteWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.ListUsers is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) InviteUser(context.Context, *connect.Request[v1.InviteUserRequest]) (*connect.Response[v1.InviteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.InviteUser is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) RemoveUser(context.Context, *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.RemoveUser is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.UpdateUserRole is not implemented"))
}
