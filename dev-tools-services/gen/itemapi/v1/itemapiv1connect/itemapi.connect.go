// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: itemapi/v1/itemapi.proto

package itemapiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-services/gen/itemapi/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ItemApiServiceName is the fully-qualified name of the ItemApiService service.
	ItemApiServiceName = "itemapi.v1.ItemApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ItemApiServiceGetApiCallProcedure is the fully-qualified name of the ItemApiService's GetApiCall
	// RPC.
	ItemApiServiceGetApiCallProcedure = "/itemapi.v1.ItemApiService/GetApiCall"
	// ItemApiServiceCreateApiCallProcedure is the fully-qualified name of the ItemApiService's
	// CreateApiCall RPC.
	ItemApiServiceCreateApiCallProcedure = "/itemapi.v1.ItemApiService/CreateApiCall"
	// ItemApiServiceDupeApiCallProcedure is the fully-qualified name of the ItemApiService's
	// DupeApiCall RPC.
	ItemApiServiceDupeApiCallProcedure = "/itemapi.v1.ItemApiService/DupeApiCall"
	// ItemApiServiceUpdateApiCallProcedure is the fully-qualified name of the ItemApiService's
	// UpdateApiCall RPC.
	ItemApiServiceUpdateApiCallProcedure = "/itemapi.v1.ItemApiService/UpdateApiCall"
	// ItemApiServiceDeleteApiCallProcedure is the fully-qualified name of the ItemApiService's
	// DeleteApiCall RPC.
	ItemApiServiceDeleteApiCallProcedure = "/itemapi.v1.ItemApiService/DeleteApiCall"
	// ItemApiServiceMoveApiCallProcedure is the fully-qualified name of the ItemApiService's
	// MoveApiCall RPC.
	ItemApiServiceMoveApiCallProcedure = "/itemapi.v1.ItemApiService/MoveApiCall"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	itemApiServiceServiceDescriptor             = v1.File_itemapi_v1_itemapi_proto.Services().ByName("ItemApiService")
	itemApiServiceGetApiCallMethodDescriptor    = itemApiServiceServiceDescriptor.Methods().ByName("GetApiCall")
	itemApiServiceCreateApiCallMethodDescriptor = itemApiServiceServiceDescriptor.Methods().ByName("CreateApiCall")
	itemApiServiceDupeApiCallMethodDescriptor   = itemApiServiceServiceDescriptor.Methods().ByName("DupeApiCall")
	itemApiServiceUpdateApiCallMethodDescriptor = itemApiServiceServiceDescriptor.Methods().ByName("UpdateApiCall")
	itemApiServiceDeleteApiCallMethodDescriptor = itemApiServiceServiceDescriptor.Methods().ByName("DeleteApiCall")
	itemApiServiceMoveApiCallMethodDescriptor   = itemApiServiceServiceDescriptor.Methods().ByName("MoveApiCall")
)

// ItemApiServiceClient is a client for the itemapi.v1.ItemApiService service.
type ItemApiServiceClient interface {
	GetApiCall(context.Context, *connect.Request[v1.GetApiCallRequest]) (*connect.Response[v1.GetApiCallResponse], error)
	CreateApiCall(context.Context, *connect.Request[v1.CreateApiCallRequest]) (*connect.Response[v1.CreateApiCallResponse], error)
	DupeApiCall(context.Context, *connect.Request[v1.DupeApiCallRequest]) (*connect.Response[v1.DupeApiCallResponse], error)
	UpdateApiCall(context.Context, *connect.Request[v1.UpdateApiCallRequest]) (*connect.Response[v1.UpdateApiCallResponse], error)
	DeleteApiCall(context.Context, *connect.Request[v1.DeleteApiCallRequest]) (*connect.Response[v1.DeleteApiCallResponse], error)
	MoveApiCall(context.Context, *connect.Request[v1.MoveApiCallRequest]) (*connect.Response[v1.MoveApiCallResponse], error)
}

// NewItemApiServiceClient constructs a client for the itemapi.v1.ItemApiService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewItemApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ItemApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &itemApiServiceClient{
		getApiCall: connect.NewClient[v1.GetApiCallRequest, v1.GetApiCallResponse](
			httpClient,
			baseURL+ItemApiServiceGetApiCallProcedure,
			connect.WithSchema(itemApiServiceGetApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createApiCall: connect.NewClient[v1.CreateApiCallRequest, v1.CreateApiCallResponse](
			httpClient,
			baseURL+ItemApiServiceCreateApiCallProcedure,
			connect.WithSchema(itemApiServiceCreateApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dupeApiCall: connect.NewClient[v1.DupeApiCallRequest, v1.DupeApiCallResponse](
			httpClient,
			baseURL+ItemApiServiceDupeApiCallProcedure,
			connect.WithSchema(itemApiServiceDupeApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateApiCall: connect.NewClient[v1.UpdateApiCallRequest, v1.UpdateApiCallResponse](
			httpClient,
			baseURL+ItemApiServiceUpdateApiCallProcedure,
			connect.WithSchema(itemApiServiceUpdateApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteApiCall: connect.NewClient[v1.DeleteApiCallRequest, v1.DeleteApiCallResponse](
			httpClient,
			baseURL+ItemApiServiceDeleteApiCallProcedure,
			connect.WithSchema(itemApiServiceDeleteApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		moveApiCall: connect.NewClient[v1.MoveApiCallRequest, v1.MoveApiCallResponse](
			httpClient,
			baseURL+ItemApiServiceMoveApiCallProcedure,
			connect.WithSchema(itemApiServiceMoveApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// itemApiServiceClient implements ItemApiServiceClient.
type itemApiServiceClient struct {
	getApiCall    *connect.Client[v1.GetApiCallRequest, v1.GetApiCallResponse]
	createApiCall *connect.Client[v1.CreateApiCallRequest, v1.CreateApiCallResponse]
	dupeApiCall   *connect.Client[v1.DupeApiCallRequest, v1.DupeApiCallResponse]
	updateApiCall *connect.Client[v1.UpdateApiCallRequest, v1.UpdateApiCallResponse]
	deleteApiCall *connect.Client[v1.DeleteApiCallRequest, v1.DeleteApiCallResponse]
	moveApiCall   *connect.Client[v1.MoveApiCallRequest, v1.MoveApiCallResponse]
}

// GetApiCall calls itemapi.v1.ItemApiService.GetApiCall.
func (c *itemApiServiceClient) GetApiCall(ctx context.Context, req *connect.Request[v1.GetApiCallRequest]) (*connect.Response[v1.GetApiCallResponse], error) {
	return c.getApiCall.CallUnary(ctx, req)
}

// CreateApiCall calls itemapi.v1.ItemApiService.CreateApiCall.
func (c *itemApiServiceClient) CreateApiCall(ctx context.Context, req *connect.Request[v1.CreateApiCallRequest]) (*connect.Response[v1.CreateApiCallResponse], error) {
	return c.createApiCall.CallUnary(ctx, req)
}

// DupeApiCall calls itemapi.v1.ItemApiService.DupeApiCall.
func (c *itemApiServiceClient) DupeApiCall(ctx context.Context, req *connect.Request[v1.DupeApiCallRequest]) (*connect.Response[v1.DupeApiCallResponse], error) {
	return c.dupeApiCall.CallUnary(ctx, req)
}

// UpdateApiCall calls itemapi.v1.ItemApiService.UpdateApiCall.
func (c *itemApiServiceClient) UpdateApiCall(ctx context.Context, req *connect.Request[v1.UpdateApiCallRequest]) (*connect.Response[v1.UpdateApiCallResponse], error) {
	return c.updateApiCall.CallUnary(ctx, req)
}

// DeleteApiCall calls itemapi.v1.ItemApiService.DeleteApiCall.
func (c *itemApiServiceClient) DeleteApiCall(ctx context.Context, req *connect.Request[v1.DeleteApiCallRequest]) (*connect.Response[v1.DeleteApiCallResponse], error) {
	return c.deleteApiCall.CallUnary(ctx, req)
}

// MoveApiCall calls itemapi.v1.ItemApiService.MoveApiCall.
func (c *itemApiServiceClient) MoveApiCall(ctx context.Context, req *connect.Request[v1.MoveApiCallRequest]) (*connect.Response[v1.MoveApiCallResponse], error) {
	return c.moveApiCall.CallUnary(ctx, req)
}

// ItemApiServiceHandler is an implementation of the itemapi.v1.ItemApiService service.
type ItemApiServiceHandler interface {
	GetApiCall(context.Context, *connect.Request[v1.GetApiCallRequest]) (*connect.Response[v1.GetApiCallResponse], error)
	CreateApiCall(context.Context, *connect.Request[v1.CreateApiCallRequest]) (*connect.Response[v1.CreateApiCallResponse], error)
	DupeApiCall(context.Context, *connect.Request[v1.DupeApiCallRequest]) (*connect.Response[v1.DupeApiCallResponse], error)
	UpdateApiCall(context.Context, *connect.Request[v1.UpdateApiCallRequest]) (*connect.Response[v1.UpdateApiCallResponse], error)
	DeleteApiCall(context.Context, *connect.Request[v1.DeleteApiCallRequest]) (*connect.Response[v1.DeleteApiCallResponse], error)
	MoveApiCall(context.Context, *connect.Request[v1.MoveApiCallRequest]) (*connect.Response[v1.MoveApiCallResponse], error)
}

// NewItemApiServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewItemApiServiceHandler(svc ItemApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	itemApiServiceGetApiCallHandler := connect.NewUnaryHandler(
		ItemApiServiceGetApiCallProcedure,
		svc.GetApiCall,
		connect.WithSchema(itemApiServiceGetApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemApiServiceCreateApiCallHandler := connect.NewUnaryHandler(
		ItemApiServiceCreateApiCallProcedure,
		svc.CreateApiCall,
		connect.WithSchema(itemApiServiceCreateApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemApiServiceDupeApiCallHandler := connect.NewUnaryHandler(
		ItemApiServiceDupeApiCallProcedure,
		svc.DupeApiCall,
		connect.WithSchema(itemApiServiceDupeApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemApiServiceUpdateApiCallHandler := connect.NewUnaryHandler(
		ItemApiServiceUpdateApiCallProcedure,
		svc.UpdateApiCall,
		connect.WithSchema(itemApiServiceUpdateApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemApiServiceDeleteApiCallHandler := connect.NewUnaryHandler(
		ItemApiServiceDeleteApiCallProcedure,
		svc.DeleteApiCall,
		connect.WithSchema(itemApiServiceDeleteApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemApiServiceMoveApiCallHandler := connect.NewUnaryHandler(
		ItemApiServiceMoveApiCallProcedure,
		svc.MoveApiCall,
		connect.WithSchema(itemApiServiceMoveApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/itemapi.v1.ItemApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ItemApiServiceGetApiCallProcedure:
			itemApiServiceGetApiCallHandler.ServeHTTP(w, r)
		case ItemApiServiceCreateApiCallProcedure:
			itemApiServiceCreateApiCallHandler.ServeHTTP(w, r)
		case ItemApiServiceDupeApiCallProcedure:
			itemApiServiceDupeApiCallHandler.ServeHTTP(w, r)
		case ItemApiServiceUpdateApiCallProcedure:
			itemApiServiceUpdateApiCallHandler.ServeHTTP(w, r)
		case ItemApiServiceDeleteApiCallProcedure:
			itemApiServiceDeleteApiCallHandler.ServeHTTP(w, r)
		case ItemApiServiceMoveApiCallProcedure:
			itemApiServiceMoveApiCallHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedItemApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedItemApiServiceHandler struct{}

func (UnimplementedItemApiServiceHandler) GetApiCall(context.Context, *connect.Request[v1.GetApiCallRequest]) (*connect.Response[v1.GetApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemapi.v1.ItemApiService.GetApiCall is not implemented"))
}

func (UnimplementedItemApiServiceHandler) CreateApiCall(context.Context, *connect.Request[v1.CreateApiCallRequest]) (*connect.Response[v1.CreateApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemapi.v1.ItemApiService.CreateApiCall is not implemented"))
}

func (UnimplementedItemApiServiceHandler) DupeApiCall(context.Context, *connect.Request[v1.DupeApiCallRequest]) (*connect.Response[v1.DupeApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemapi.v1.ItemApiService.DupeApiCall is not implemented"))
}

func (UnimplementedItemApiServiceHandler) UpdateApiCall(context.Context, *connect.Request[v1.UpdateApiCallRequest]) (*connect.Response[v1.UpdateApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemapi.v1.ItemApiService.UpdateApiCall is not implemented"))
}

func (UnimplementedItemApiServiceHandler) DeleteApiCall(context.Context, *connect.Request[v1.DeleteApiCallRequest]) (*connect.Response[v1.DeleteApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemapi.v1.ItemApiService.DeleteApiCall is not implemented"))
}

func (UnimplementedItemApiServiceHandler) MoveApiCall(context.Context, *connect.Request[v1.MoveApiCallRequest]) (*connect.Response[v1.MoveApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemapi.v1.ItemApiService.MoveApiCall is not implemented"))
}
