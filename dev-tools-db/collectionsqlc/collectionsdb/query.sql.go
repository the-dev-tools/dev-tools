// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package collectionsdb

import (
	"context"
)

const create = `-- name: Create :one
INSERT INTO collections (id, owner_id, name)
VALUES (?, ?, ?) RETURNING id, owner_id, name
`

type CreateParams struct {
	ID      []byte
	OwnerID []byte
	Name    string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Collection, error) {
	row := q.queryRow(ctx, q.createStmt, create, arg.ID, arg.OwnerID, arg.Name)
	var i Collection
	err := row.Scan(&i.ID, &i.OwnerID, &i.Name)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM collections 
WHERE id = ?
`

func (q *Queries) Delete(ctx context.Context, id []byte) error {
	_, err := q.exec(ctx, q.deleteStmt, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, owner_id, name
FROM collections
WHERE id = ?
LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id []byte) (Collection, error) {
	row := q.queryRow(ctx, q.getStmt, get, id)
	var i Collection
	err := row.Scan(&i.ID, &i.OwnerID, &i.Name)
	return i, err
}

const getByOwnerID = `-- name: GetByOwnerID :many
SELECT id, owner_id, name
FROM collections
WHERE owner_id = ?
`

func (q *Queries) GetByOwnerID(ctx context.Context, ownerID []byte) ([]Collection, error) {
	rows, err := q.query(ctx, q.getByOwnerIDStmt, getByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.OwnerID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByPlatformIDandType = `-- name: GetByPlatformIDandType :many
SELECT id, owner_id, name
FROM collections
WHERE id = ?
`

func (q *Queries) GetByPlatformIDandType(ctx context.Context, id []byte) ([]Collection, error) {
	rows, err := q.query(ctx, q.getByPlatformIDandTypeStmt, getByPlatformIDandType, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.OwnerID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnerID = `-- name: GetOwnerID :one
SELECT owner_id
FROM collections
WHERE id = ? LIMIT 1
`

func (q *Queries) GetOwnerID(ctx context.Context, id []byte) ([]byte, error) {
	row := q.queryRow(ctx, q.getOwnerIDStmt, getOwnerID, id)
	var owner_id []byte
	err := row.Scan(&owner_id)
	return owner_id, err
}

const update = `-- name: Update :exec
UPDATE collections 
SET owner_id = ?, name = ?
WHERE id = ?
`

type UpdateParams struct {
	OwnerID []byte
	Name    string
	ID      []byte
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.exec(ctx, q.updateStmt, update, arg.OwnerID, arg.Name, arg.ID)
	return err
}
