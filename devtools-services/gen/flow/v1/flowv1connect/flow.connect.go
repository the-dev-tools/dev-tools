// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flow/v1/flow.proto

package flowv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "devtools-services/gen/flow/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FlowServiceName is the fully-qualified name of the FlowService service.
	FlowServiceName = "flow.v1.FlowService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FlowServiceCreateProcedure is the fully-qualified name of the FlowService's Create RPC.
	FlowServiceCreateProcedure = "/flow.v1.FlowService/Create"
	// FlowServiceSaveProcedure is the fully-qualified name of the FlowService's Save RPC.
	FlowServiceSaveProcedure = "/flow.v1.FlowService/Save"
	// FlowServiceLoadProcedure is the fully-qualified name of the FlowService's Load RPC.
	FlowServiceLoadProcedure = "/flow.v1.FlowService/Load"
	// FlowServiceDeleteProcedure is the fully-qualified name of the FlowService's Delete RPC.
	FlowServiceDeleteProcedure = "/flow.v1.FlowService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	flowServiceServiceDescriptor      = v1.File_flow_v1_flow_proto.Services().ByName("FlowService")
	flowServiceCreateMethodDescriptor = flowServiceServiceDescriptor.Methods().ByName("Create")
	flowServiceSaveMethodDescriptor   = flowServiceServiceDescriptor.Methods().ByName("Save")
	flowServiceLoadMethodDescriptor   = flowServiceServiceDescriptor.Methods().ByName("Load")
	flowServiceDeleteMethodDescriptor = flowServiceServiceDescriptor.Methods().ByName("Delete")
)

// FlowServiceClient is a client for the flow.v1.FlowService service.
type FlowServiceClient interface {
	Create(context.Context, *connect.Request[v1.FlowServiceCreateRequest]) (*connect.Response[v1.FlowServiceCreateResponse], error)
	Save(context.Context, *connect.Request[v1.FlowServiceSaveRequest]) (*connect.Response[v1.FlowServiceSaveResponse], error)
	Load(context.Context, *connect.Request[v1.FlowServiceLoadRequest]) (*connect.Response[v1.FlowServiceLoadResponse], error)
	Delete(context.Context, *connect.Request[v1.FlowServiceDeleteRequest]) (*connect.Response[v1.FlowServiceDeleteResponse], error)
}

// NewFlowServiceClient constructs a client for the flow.v1.FlowService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFlowServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FlowServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &flowServiceClient{
		create: connect.NewClient[v1.FlowServiceCreateRequest, v1.FlowServiceCreateResponse](
			httpClient,
			baseURL+FlowServiceCreateProcedure,
			connect.WithSchema(flowServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		save: connect.NewClient[v1.FlowServiceSaveRequest, v1.FlowServiceSaveResponse](
			httpClient,
			baseURL+FlowServiceSaveProcedure,
			connect.WithSchema(flowServiceSaveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		load: connect.NewClient[v1.FlowServiceLoadRequest, v1.FlowServiceLoadResponse](
			httpClient,
			baseURL+FlowServiceLoadProcedure,
			connect.WithSchema(flowServiceLoadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.FlowServiceDeleteRequest, v1.FlowServiceDeleteResponse](
			httpClient,
			baseURL+FlowServiceDeleteProcedure,
			connect.WithSchema(flowServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// flowServiceClient implements FlowServiceClient.
type flowServiceClient struct {
	create *connect.Client[v1.FlowServiceCreateRequest, v1.FlowServiceCreateResponse]
	save   *connect.Client[v1.FlowServiceSaveRequest, v1.FlowServiceSaveResponse]
	load   *connect.Client[v1.FlowServiceLoadRequest, v1.FlowServiceLoadResponse]
	delete *connect.Client[v1.FlowServiceDeleteRequest, v1.FlowServiceDeleteResponse]
}

// Create calls flow.v1.FlowService.Create.
func (c *flowServiceClient) Create(ctx context.Context, req *connect.Request[v1.FlowServiceCreateRequest]) (*connect.Response[v1.FlowServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Save calls flow.v1.FlowService.Save.
func (c *flowServiceClient) Save(ctx context.Context, req *connect.Request[v1.FlowServiceSaveRequest]) (*connect.Response[v1.FlowServiceSaveResponse], error) {
	return c.save.CallUnary(ctx, req)
}

// Load calls flow.v1.FlowService.Load.
func (c *flowServiceClient) Load(ctx context.Context, req *connect.Request[v1.FlowServiceLoadRequest]) (*connect.Response[v1.FlowServiceLoadResponse], error) {
	return c.load.CallUnary(ctx, req)
}

// Delete calls flow.v1.FlowService.Delete.
func (c *flowServiceClient) Delete(ctx context.Context, req *connect.Request[v1.FlowServiceDeleteRequest]) (*connect.Response[v1.FlowServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// FlowServiceHandler is an implementation of the flow.v1.FlowService service.
type FlowServiceHandler interface {
	Create(context.Context, *connect.Request[v1.FlowServiceCreateRequest]) (*connect.Response[v1.FlowServiceCreateResponse], error)
	Save(context.Context, *connect.Request[v1.FlowServiceSaveRequest]) (*connect.Response[v1.FlowServiceSaveResponse], error)
	Load(context.Context, *connect.Request[v1.FlowServiceLoadRequest]) (*connect.Response[v1.FlowServiceLoadResponse], error)
	Delete(context.Context, *connect.Request[v1.FlowServiceDeleteRequest]) (*connect.Response[v1.FlowServiceDeleteResponse], error)
}

// NewFlowServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFlowServiceHandler(svc FlowServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	flowServiceCreateHandler := connect.NewUnaryHandler(
		FlowServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(flowServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	flowServiceSaveHandler := connect.NewUnaryHandler(
		FlowServiceSaveProcedure,
		svc.Save,
		connect.WithSchema(flowServiceSaveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	flowServiceLoadHandler := connect.NewUnaryHandler(
		FlowServiceLoadProcedure,
		svc.Load,
		connect.WithSchema(flowServiceLoadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	flowServiceDeleteHandler := connect.NewUnaryHandler(
		FlowServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(flowServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flow.v1.FlowService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FlowServiceCreateProcedure:
			flowServiceCreateHandler.ServeHTTP(w, r)
		case FlowServiceSaveProcedure:
			flowServiceSaveHandler.ServeHTTP(w, r)
		case FlowServiceLoadProcedure:
			flowServiceLoadHandler.ServeHTTP(w, r)
		case FlowServiceDeleteProcedure:
			flowServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFlowServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFlowServiceHandler struct{}

func (UnimplementedFlowServiceHandler) Create(context.Context, *connect.Request[v1.FlowServiceCreateRequest]) (*connect.Response[v1.FlowServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flow.v1.FlowService.Create is not implemented"))
}

func (UnimplementedFlowServiceHandler) Save(context.Context, *connect.Request[v1.FlowServiceSaveRequest]) (*connect.Response[v1.FlowServiceSaveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flow.v1.FlowService.Save is not implemented"))
}

func (UnimplementedFlowServiceHandler) Load(context.Context, *connect.Request[v1.FlowServiceLoadRequest]) (*connect.Response[v1.FlowServiceLoadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flow.v1.FlowService.Load is not implemented"))
}

func (UnimplementedFlowServiceHandler) Delete(context.Context, *connect.Request[v1.FlowServiceDeleteRequest]) (*connect.Response[v1.FlowServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flow.v1.FlowService.Delete is not implemented"))
}
