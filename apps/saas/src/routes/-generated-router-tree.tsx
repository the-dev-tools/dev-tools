/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './__root';
import { Route as LoginImport } from './login';
import { Route as AuthorizedRouteImport } from './_authorized/route';
import { Route as AuthorizedDashboardRouteImport } from './_authorized/_dashboard/route';
import { Route as AuthorizedDashboardIndexImport } from './_authorized/_dashboard/index';
import { Route as AuthorizedWorkspaceWorkspaceIdRouteImport } from './_authorized/workspace.$workspaceId/route';
import { Route as AuthorizedWorkspaceWorkspaceIdIndexImport } from './_authorized/workspace.$workspaceId/index';
import { Route as AuthorizedWorkspaceWorkspaceIdMembersImport } from './_authorized/workspace.$workspaceId/members';
import { Route as AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteImport } from './_authorized/workspace.$workspaceId/api-call.$apiCallId/route';
import { Route as AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersImport } from './_authorized/workspace.$workspaceId/api-call.$apiCallId/headers';

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

const AuthorizedRouteRoute = AuthorizedRouteImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRoute,
} as any);

const AuthorizedDashboardRouteRoute = AuthorizedDashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => AuthorizedRouteRoute,
} as any);

const AuthorizedDashboardIndexRoute = AuthorizedDashboardIndexImport.update({
  path: '/',
  getParentRoute: () => AuthorizedDashboardRouteRoute,
} as any);

const AuthorizedWorkspaceWorkspaceIdRouteRoute =
  AuthorizedWorkspaceWorkspaceIdRouteImport.update({
    path: '/workspace/$workspaceId',
    getParentRoute: () => AuthorizedRouteRoute,
  } as any);

const AuthorizedWorkspaceWorkspaceIdIndexRoute =
  AuthorizedWorkspaceWorkspaceIdIndexImport.update({
    path: '/',
    getParentRoute: () => AuthorizedWorkspaceWorkspaceIdRouteRoute,
  } as any);

const AuthorizedWorkspaceWorkspaceIdMembersRoute =
  AuthorizedWorkspaceWorkspaceIdMembersImport.update({
    path: '/members',
    getParentRoute: () => AuthorizedWorkspaceWorkspaceIdRouteRoute,
  } as any);

const AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRoute =
  AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteImport.update({
    path: '/api-call/$apiCallId',
    getParentRoute: () => AuthorizedWorkspaceWorkspaceIdRouteRoute,
  } as any);

const AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersRoute =
  AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersImport.update({
    path: '/headers',
    getParentRoute: () =>
      AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authorized': {
      id: '/_authorized';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthorizedRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/_authorized/_dashboard': {
      id: '/_authorized/_dashboard';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthorizedDashboardRouteImport;
      parentRoute: typeof AuthorizedRouteImport;
    };
    '/_authorized/workspace/$workspaceId': {
      id: '/_authorized/workspace/$workspaceId';
      path: '/workspace/$workspaceId';
      fullPath: '/workspace/$workspaceId';
      preLoaderRoute: typeof AuthorizedWorkspaceWorkspaceIdRouteImport;
      parentRoute: typeof AuthorizedRouteImport;
    };
    '/_authorized/_dashboard/': {
      id: '/_authorized/_dashboard/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof AuthorizedDashboardIndexImport;
      parentRoute: typeof AuthorizedDashboardRouteImport;
    };
    '/_authorized/workspace/$workspaceId/members': {
      id: '/_authorized/workspace/$workspaceId/members';
      path: '/members';
      fullPath: '/workspace/$workspaceId/members';
      preLoaderRoute: typeof AuthorizedWorkspaceWorkspaceIdMembersImport;
      parentRoute: typeof AuthorizedWorkspaceWorkspaceIdRouteImport;
    };
    '/_authorized/workspace/$workspaceId/': {
      id: '/_authorized/workspace/$workspaceId/';
      path: '/';
      fullPath: '/workspace/$workspaceId/';
      preLoaderRoute: typeof AuthorizedWorkspaceWorkspaceIdIndexImport;
      parentRoute: typeof AuthorizedWorkspaceWorkspaceIdRouteImport;
    };
    '/_authorized/workspace/$workspaceId/api-call/$apiCallId': {
      id: '/_authorized/workspace/$workspaceId/api-call/$apiCallId';
      path: '/api-call/$apiCallId';
      fullPath: '/workspace/$workspaceId/api-call/$apiCallId';
      preLoaderRoute: typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteImport;
      parentRoute: typeof AuthorizedWorkspaceWorkspaceIdRouteImport;
    };
    '/_authorized/workspace/$workspaceId/api-call/$apiCallId/headers': {
      id: '/_authorized/workspace/$workspaceId/api-call/$apiCallId/headers';
      path: '/headers';
      fullPath: '/workspace/$workspaceId/api-call/$apiCallId/headers';
      preLoaderRoute: typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersImport;
      parentRoute: typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteImport;
    };
  }
}

// Create and export the route tree

interface AuthorizedDashboardRouteRouteChildren {
  AuthorizedDashboardIndexRoute: typeof AuthorizedDashboardIndexRoute;
}

const AuthorizedDashboardRouteRouteChildren: AuthorizedDashboardRouteRouteChildren =
  {
    AuthorizedDashboardIndexRoute: AuthorizedDashboardIndexRoute,
  };

const AuthorizedDashboardRouteRouteWithChildren =
  AuthorizedDashboardRouteRoute._addFileChildren(
    AuthorizedDashboardRouteRouteChildren,
  );

interface AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRouteChildren {
  AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersRoute: typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersRoute;
}

const AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRouteChildren: AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRouteChildren =
  {
    AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersRoute:
      AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersRoute,
  };

const AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRouteWithChildren =
  AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRoute._addFileChildren(
    AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRouteChildren,
  );

interface AuthorizedWorkspaceWorkspaceIdRouteRouteChildren {
  AuthorizedWorkspaceWorkspaceIdMembersRoute: typeof AuthorizedWorkspaceWorkspaceIdMembersRoute;
  AuthorizedWorkspaceWorkspaceIdIndexRoute: typeof AuthorizedWorkspaceWorkspaceIdIndexRoute;
  AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRoute: typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRouteWithChildren;
}

const AuthorizedWorkspaceWorkspaceIdRouteRouteChildren: AuthorizedWorkspaceWorkspaceIdRouteRouteChildren =
  {
    AuthorizedWorkspaceWorkspaceIdMembersRoute:
      AuthorizedWorkspaceWorkspaceIdMembersRoute,
    AuthorizedWorkspaceWorkspaceIdIndexRoute:
      AuthorizedWorkspaceWorkspaceIdIndexRoute,
    AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRoute:
      AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRouteWithChildren,
  };

const AuthorizedWorkspaceWorkspaceIdRouteRouteWithChildren =
  AuthorizedWorkspaceWorkspaceIdRouteRoute._addFileChildren(
    AuthorizedWorkspaceWorkspaceIdRouteRouteChildren,
  );

interface AuthorizedRouteRouteChildren {
  AuthorizedDashboardRouteRoute: typeof AuthorizedDashboardRouteRouteWithChildren;
  AuthorizedWorkspaceWorkspaceIdRouteRoute: typeof AuthorizedWorkspaceWorkspaceIdRouteRouteWithChildren;
}

const AuthorizedRouteRouteChildren: AuthorizedRouteRouteChildren = {
  AuthorizedDashboardRouteRoute: AuthorizedDashboardRouteRouteWithChildren,
  AuthorizedWorkspaceWorkspaceIdRouteRoute:
    AuthorizedWorkspaceWorkspaceIdRouteRouteWithChildren,
};

const AuthorizedRouteRouteWithChildren = AuthorizedRouteRoute._addFileChildren(
  AuthorizedRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  '': typeof AuthorizedDashboardRouteRouteWithChildren;
  '/login': typeof LoginRoute;
  '/workspace/$workspaceId': typeof AuthorizedWorkspaceWorkspaceIdRouteRouteWithChildren;
  '/': typeof AuthorizedDashboardIndexRoute;
  '/workspace/$workspaceId/members': typeof AuthorizedWorkspaceWorkspaceIdMembersRoute;
  '/workspace/$workspaceId/': typeof AuthorizedWorkspaceWorkspaceIdIndexRoute;
  '/workspace/$workspaceId/api-call/$apiCallId': typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRouteWithChildren;
  '/workspace/$workspaceId/api-call/$apiCallId/headers': typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersRoute;
}

export interface FileRoutesByTo {
  '': typeof AuthorizedRouteRouteWithChildren;
  '/login': typeof LoginRoute;
  '/': typeof AuthorizedDashboardIndexRoute;
  '/workspace/$workspaceId/members': typeof AuthorizedWorkspaceWorkspaceIdMembersRoute;
  '/workspace/$workspaceId': typeof AuthorizedWorkspaceWorkspaceIdIndexRoute;
  '/workspace/$workspaceId/api-call/$apiCallId': typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRouteWithChildren;
  '/workspace/$workspaceId/api-call/$apiCallId/headers': typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/_authorized': typeof AuthorizedRouteRouteWithChildren;
  '/login': typeof LoginRoute;
  '/_authorized/_dashboard': typeof AuthorizedDashboardRouteRouteWithChildren;
  '/_authorized/workspace/$workspaceId': typeof AuthorizedWorkspaceWorkspaceIdRouteRouteWithChildren;
  '/_authorized/_dashboard/': typeof AuthorizedDashboardIndexRoute;
  '/_authorized/workspace/$workspaceId/members': typeof AuthorizedWorkspaceWorkspaceIdMembersRoute;
  '/_authorized/workspace/$workspaceId/': typeof AuthorizedWorkspaceWorkspaceIdIndexRoute;
  '/_authorized/workspace/$workspaceId/api-call/$apiCallId': typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRouteRouteWithChildren;
  '/_authorized/workspace/$workspaceId/api-call/$apiCallId/headers': typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdHeadersRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ''
    | '/login'
    | '/workspace/$workspaceId'
    | '/'
    | '/workspace/$workspaceId/members'
    | '/workspace/$workspaceId/'
    | '/workspace/$workspaceId/api-call/$apiCallId'
    | '/workspace/$workspaceId/api-call/$apiCallId/headers';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | ''
    | '/login'
    | '/'
    | '/workspace/$workspaceId/members'
    | '/workspace/$workspaceId'
    | '/workspace/$workspaceId/api-call/$apiCallId'
    | '/workspace/$workspaceId/api-call/$apiCallId/headers';
  id:
    | '__root__'
    | '/_authorized'
    | '/login'
    | '/_authorized/_dashboard'
    | '/_authorized/workspace/$workspaceId'
    | '/_authorized/_dashboard/'
    | '/_authorized/workspace/$workspaceId/members'
    | '/_authorized/workspace/$workspaceId/'
    | '/_authorized/workspace/$workspaceId/api-call/$apiCallId'
    | '/_authorized/workspace/$workspaceId/api-call/$apiCallId/headers';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthorizedRouteRoute: typeof AuthorizedRouteRouteWithChildren;
  LoginRoute: typeof LoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
  AuthorizedRouteRoute: AuthorizedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authorized",
        "/login"
      ]
    },
    "/_authorized": {
      "filePath": "_authorized/route.tsx",
      "children": [
        "/_authorized/_dashboard",
        "/_authorized/workspace/$workspaceId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authorized/_dashboard": {
      "filePath": "_authorized/_dashboard/route.tsx",
      "parent": "/_authorized",
      "children": [
        "/_authorized/_dashboard/"
      ]
    },
    "/_authorized/workspace/$workspaceId": {
      "filePath": "_authorized/workspace.$workspaceId/route.tsx",
      "parent": "/_authorized",
      "children": [
        "/_authorized/workspace/$workspaceId/members",
        "/_authorized/workspace/$workspaceId/",
        "/_authorized/workspace/$workspaceId/api-call/$apiCallId"
      ]
    },
    "/_authorized/_dashboard/": {
      "filePath": "_authorized/_dashboard/index.tsx",
      "parent": "/_authorized/_dashboard"
    },
    "/_authorized/workspace/$workspaceId/members": {
      "filePath": "_authorized/workspace.$workspaceId/members.tsx",
      "parent": "/_authorized/workspace/$workspaceId"
    },
    "/_authorized/workspace/$workspaceId/": {
      "filePath": "_authorized/workspace.$workspaceId/index.tsx",
      "parent": "/_authorized/workspace/$workspaceId"
    },
    "/_authorized/workspace/$workspaceId/api-call/$apiCallId": {
      "filePath": "_authorized/workspace.$workspaceId/api-call.$apiCallId/route.tsx",
      "parent": "/_authorized/workspace/$workspaceId",
      "children": [
        "/_authorized/workspace/$workspaceId/api-call/$apiCallId/headers"
      ]
    },
    "/_authorized/workspace/$workspaceId/api-call/$apiCallId/headers": {
      "filePath": "_authorized/workspace.$workspaceId/api-call.$apiCallId/headers.tsx",
      "parent": "/_authorized/workspace/$workspaceId/api-call/$apiCallId"
    }
  }
}
ROUTE_MANIFEST_END */
