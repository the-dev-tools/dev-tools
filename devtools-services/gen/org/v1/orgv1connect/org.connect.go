// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: org/v1/org.proto

package orgv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "devtools-services/gen/org/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrgServiceName is the fully-qualified name of the OrgService service.
	OrgServiceName = "org.v1.OrgService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrgServiceGetOrgProcedure is the fully-qualified name of the OrgService's GetOrg RPC.
	OrgServiceGetOrgProcedure = "/org.v1.OrgService/GetOrg"
	// OrgServiceGetOrgsProcedure is the fully-qualified name of the OrgService's GetOrgs RPC.
	OrgServiceGetOrgsProcedure = "/org.v1.OrgService/GetOrgs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	orgServiceServiceDescriptor       = v1.File_org_v1_org_proto.Services().ByName("OrgService")
	orgServiceGetOrgMethodDescriptor  = orgServiceServiceDescriptor.Methods().ByName("GetOrg")
	orgServiceGetOrgsMethodDescriptor = orgServiceServiceDescriptor.Methods().ByName("GetOrgs")
)

// OrgServiceClient is a client for the org.v1.OrgService service.
type OrgServiceClient interface {
	GetOrg(context.Context, *connect.Request[v1.GetOrgRequest]) (*connect.Response[v1.Org], error)
	GetOrgs(context.Context, *connect.Request[v1.GetOrgsRequest]) (*connect.Response[v1.GetOrgsResponse], error)
}

// NewOrgServiceClient constructs a client for the org.v1.OrgService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrgServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrgServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &orgServiceClient{
		getOrg: connect.NewClient[v1.GetOrgRequest, v1.Org](
			httpClient,
			baseURL+OrgServiceGetOrgProcedure,
			connect.WithSchema(orgServiceGetOrgMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrgs: connect.NewClient[v1.GetOrgsRequest, v1.GetOrgsResponse](
			httpClient,
			baseURL+OrgServiceGetOrgsProcedure,
			connect.WithSchema(orgServiceGetOrgsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// orgServiceClient implements OrgServiceClient.
type orgServiceClient struct {
	getOrg  *connect.Client[v1.GetOrgRequest, v1.Org]
	getOrgs *connect.Client[v1.GetOrgsRequest, v1.GetOrgsResponse]
}

// GetOrg calls org.v1.OrgService.GetOrg.
func (c *orgServiceClient) GetOrg(ctx context.Context, req *connect.Request[v1.GetOrgRequest]) (*connect.Response[v1.Org], error) {
	return c.getOrg.CallUnary(ctx, req)
}

// GetOrgs calls org.v1.OrgService.GetOrgs.
func (c *orgServiceClient) GetOrgs(ctx context.Context, req *connect.Request[v1.GetOrgsRequest]) (*connect.Response[v1.GetOrgsResponse], error) {
	return c.getOrgs.CallUnary(ctx, req)
}

// OrgServiceHandler is an implementation of the org.v1.OrgService service.
type OrgServiceHandler interface {
	GetOrg(context.Context, *connect.Request[v1.GetOrgRequest]) (*connect.Response[v1.Org], error)
	GetOrgs(context.Context, *connect.Request[v1.GetOrgsRequest]) (*connect.Response[v1.GetOrgsResponse], error)
}

// NewOrgServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrgServiceHandler(svc OrgServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orgServiceGetOrgHandler := connect.NewUnaryHandler(
		OrgServiceGetOrgProcedure,
		svc.GetOrg,
		connect.WithSchema(orgServiceGetOrgMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceGetOrgsHandler := connect.NewUnaryHandler(
		OrgServiceGetOrgsProcedure,
		svc.GetOrgs,
		connect.WithSchema(orgServiceGetOrgsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/org.v1.OrgService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrgServiceGetOrgProcedure:
			orgServiceGetOrgHandler.ServeHTTP(w, r)
		case OrgServiceGetOrgsProcedure:
			orgServiceGetOrgsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrgServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrgServiceHandler struct{}

func (UnimplementedOrgServiceHandler) GetOrg(context.Context, *connect.Request[v1.GetOrgRequest]) (*connect.Response[v1.Org], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.GetOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) GetOrgs(context.Context, *connect.Request[v1.GetOrgsRequest]) (*connect.Response[v1.GetOrgsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("org.v1.OrgService.GetOrgs is not implemented"))
}
