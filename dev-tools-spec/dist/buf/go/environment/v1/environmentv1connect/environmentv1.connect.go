// Generated by Microsoft TypeSpec

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: environment/v1/environmentv1.proto

package environmentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-spec/dist/buf/go/environment/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnvironmentServiceName is the fully-qualified name of the EnvironmentService service.
	EnvironmentServiceName = "environment.v1.environmentv1.EnvironmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnvironmentServiceEnvironmentListProcedure is the fully-qualified name of the
	// EnvironmentService's EnvironmentList RPC.
	EnvironmentServiceEnvironmentListProcedure = "/environment.v1.environmentv1.EnvironmentService/EnvironmentList"
	// EnvironmentServiceEnvironmentGetProcedure is the fully-qualified name of the EnvironmentService's
	// EnvironmentGet RPC.
	EnvironmentServiceEnvironmentGetProcedure = "/environment.v1.environmentv1.EnvironmentService/EnvironmentGet"
	// EnvironmentServiceEnvironmentCreateProcedure is the fully-qualified name of the
	// EnvironmentService's EnvironmentCreate RPC.
	EnvironmentServiceEnvironmentCreateProcedure = "/environment.v1.environmentv1.EnvironmentService/EnvironmentCreate"
	// EnvironmentServiceEnvironmentUpdateProcedure is the fully-qualified name of the
	// EnvironmentService's EnvironmentUpdate RPC.
	EnvironmentServiceEnvironmentUpdateProcedure = "/environment.v1.environmentv1.EnvironmentService/EnvironmentUpdate"
	// EnvironmentServiceEnvironmentDeleteProcedure is the fully-qualified name of the
	// EnvironmentService's EnvironmentDelete RPC.
	EnvironmentServiceEnvironmentDeleteProcedure = "/environment.v1.environmentv1.EnvironmentService/EnvironmentDelete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	environmentServiceServiceDescriptor                 = v1.File_environment_v1_environmentv1_proto.Services().ByName("EnvironmentService")
	environmentServiceEnvironmentListMethodDescriptor   = environmentServiceServiceDescriptor.Methods().ByName("EnvironmentList")
	environmentServiceEnvironmentGetMethodDescriptor    = environmentServiceServiceDescriptor.Methods().ByName("EnvironmentGet")
	environmentServiceEnvironmentCreateMethodDescriptor = environmentServiceServiceDescriptor.Methods().ByName("EnvironmentCreate")
	environmentServiceEnvironmentUpdateMethodDescriptor = environmentServiceServiceDescriptor.Methods().ByName("EnvironmentUpdate")
	environmentServiceEnvironmentDeleteMethodDescriptor = environmentServiceServiceDescriptor.Methods().ByName("EnvironmentDelete")
)

// EnvironmentServiceClient is a client for the environment.v1.environmentv1.EnvironmentService
// service.
type EnvironmentServiceClient interface {
	EnvironmentList(context.Context, *connect.Request[v1.EnvironmentListRequest]) (*connect.Response[v1.EnvironmentListResponse], error)
	EnvironmentGet(context.Context, *connect.Request[v1.EnvironmentGetRequest]) (*connect.Response[v1.EnvironmentGetResponse], error)
	EnvironmentCreate(context.Context, *connect.Request[v1.EnvironmentCreateRequest]) (*connect.Response[v1.EnvironmentCreateResponse], error)
	EnvironmentUpdate(context.Context, *connect.Request[v1.EnvironmentUpdateRequest]) (*connect.Response[v1.EnvironmentUpdateResponse], error)
	EnvironmentDelete(context.Context, *connect.Request[v1.EnvironmentDeleteRequest]) (*connect.Response[v1.EnvironmentDeleteResponse], error)
}

// NewEnvironmentServiceClient constructs a client for the
// environment.v1.environmentv1.EnvironmentService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnvironmentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnvironmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &environmentServiceClient{
		environmentList: connect.NewClient[v1.EnvironmentListRequest, v1.EnvironmentListResponse](
			httpClient,
			baseURL+EnvironmentServiceEnvironmentListProcedure,
			connect.WithSchema(environmentServiceEnvironmentListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		environmentGet: connect.NewClient[v1.EnvironmentGetRequest, v1.EnvironmentGetResponse](
			httpClient,
			baseURL+EnvironmentServiceEnvironmentGetProcedure,
			connect.WithSchema(environmentServiceEnvironmentGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		environmentCreate: connect.NewClient[v1.EnvironmentCreateRequest, v1.EnvironmentCreateResponse](
			httpClient,
			baseURL+EnvironmentServiceEnvironmentCreateProcedure,
			connect.WithSchema(environmentServiceEnvironmentCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		environmentUpdate: connect.NewClient[v1.EnvironmentUpdateRequest, v1.EnvironmentUpdateResponse](
			httpClient,
			baseURL+EnvironmentServiceEnvironmentUpdateProcedure,
			connect.WithSchema(environmentServiceEnvironmentUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		environmentDelete: connect.NewClient[v1.EnvironmentDeleteRequest, v1.EnvironmentDeleteResponse](
			httpClient,
			baseURL+EnvironmentServiceEnvironmentDeleteProcedure,
			connect.WithSchema(environmentServiceEnvironmentDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// environmentServiceClient implements EnvironmentServiceClient.
type environmentServiceClient struct {
	environmentList   *connect.Client[v1.EnvironmentListRequest, v1.EnvironmentListResponse]
	environmentGet    *connect.Client[v1.EnvironmentGetRequest, v1.EnvironmentGetResponse]
	environmentCreate *connect.Client[v1.EnvironmentCreateRequest, v1.EnvironmentCreateResponse]
	environmentUpdate *connect.Client[v1.EnvironmentUpdateRequest, v1.EnvironmentUpdateResponse]
	environmentDelete *connect.Client[v1.EnvironmentDeleteRequest, v1.EnvironmentDeleteResponse]
}

// EnvironmentList calls environment.v1.environmentv1.EnvironmentService.EnvironmentList.
func (c *environmentServiceClient) EnvironmentList(ctx context.Context, req *connect.Request[v1.EnvironmentListRequest]) (*connect.Response[v1.EnvironmentListResponse], error) {
	return c.environmentList.CallUnary(ctx, req)
}

// EnvironmentGet calls environment.v1.environmentv1.EnvironmentService.EnvironmentGet.
func (c *environmentServiceClient) EnvironmentGet(ctx context.Context, req *connect.Request[v1.EnvironmentGetRequest]) (*connect.Response[v1.EnvironmentGetResponse], error) {
	return c.environmentGet.CallUnary(ctx, req)
}

// EnvironmentCreate calls environment.v1.environmentv1.EnvironmentService.EnvironmentCreate.
func (c *environmentServiceClient) EnvironmentCreate(ctx context.Context, req *connect.Request[v1.EnvironmentCreateRequest]) (*connect.Response[v1.EnvironmentCreateResponse], error) {
	return c.environmentCreate.CallUnary(ctx, req)
}

// EnvironmentUpdate calls environment.v1.environmentv1.EnvironmentService.EnvironmentUpdate.
func (c *environmentServiceClient) EnvironmentUpdate(ctx context.Context, req *connect.Request[v1.EnvironmentUpdateRequest]) (*connect.Response[v1.EnvironmentUpdateResponse], error) {
	return c.environmentUpdate.CallUnary(ctx, req)
}

// EnvironmentDelete calls environment.v1.environmentv1.EnvironmentService.EnvironmentDelete.
func (c *environmentServiceClient) EnvironmentDelete(ctx context.Context, req *connect.Request[v1.EnvironmentDeleteRequest]) (*connect.Response[v1.EnvironmentDeleteResponse], error) {
	return c.environmentDelete.CallUnary(ctx, req)
}

// EnvironmentServiceHandler is an implementation of the
// environment.v1.environmentv1.EnvironmentService service.
type EnvironmentServiceHandler interface {
	EnvironmentList(context.Context, *connect.Request[v1.EnvironmentListRequest]) (*connect.Response[v1.EnvironmentListResponse], error)
	EnvironmentGet(context.Context, *connect.Request[v1.EnvironmentGetRequest]) (*connect.Response[v1.EnvironmentGetResponse], error)
	EnvironmentCreate(context.Context, *connect.Request[v1.EnvironmentCreateRequest]) (*connect.Response[v1.EnvironmentCreateResponse], error)
	EnvironmentUpdate(context.Context, *connect.Request[v1.EnvironmentUpdateRequest]) (*connect.Response[v1.EnvironmentUpdateResponse], error)
	EnvironmentDelete(context.Context, *connect.Request[v1.EnvironmentDeleteRequest]) (*connect.Response[v1.EnvironmentDeleteResponse], error)
}

// NewEnvironmentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnvironmentServiceHandler(svc EnvironmentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	environmentServiceEnvironmentListHandler := connect.NewUnaryHandler(
		EnvironmentServiceEnvironmentListProcedure,
		svc.EnvironmentList,
		connect.WithSchema(environmentServiceEnvironmentListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceEnvironmentGetHandler := connect.NewUnaryHandler(
		EnvironmentServiceEnvironmentGetProcedure,
		svc.EnvironmentGet,
		connect.WithSchema(environmentServiceEnvironmentGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceEnvironmentCreateHandler := connect.NewUnaryHandler(
		EnvironmentServiceEnvironmentCreateProcedure,
		svc.EnvironmentCreate,
		connect.WithSchema(environmentServiceEnvironmentCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceEnvironmentUpdateHandler := connect.NewUnaryHandler(
		EnvironmentServiceEnvironmentUpdateProcedure,
		svc.EnvironmentUpdate,
		connect.WithSchema(environmentServiceEnvironmentUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceEnvironmentDeleteHandler := connect.NewUnaryHandler(
		EnvironmentServiceEnvironmentDeleteProcedure,
		svc.EnvironmentDelete,
		connect.WithSchema(environmentServiceEnvironmentDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/environment.v1.environmentv1.EnvironmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnvironmentServiceEnvironmentListProcedure:
			environmentServiceEnvironmentListHandler.ServeHTTP(w, r)
		case EnvironmentServiceEnvironmentGetProcedure:
			environmentServiceEnvironmentGetHandler.ServeHTTP(w, r)
		case EnvironmentServiceEnvironmentCreateProcedure:
			environmentServiceEnvironmentCreateHandler.ServeHTTP(w, r)
		case EnvironmentServiceEnvironmentUpdateProcedure:
			environmentServiceEnvironmentUpdateHandler.ServeHTTP(w, r)
		case EnvironmentServiceEnvironmentDeleteProcedure:
			environmentServiceEnvironmentDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnvironmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnvironmentServiceHandler struct{}

func (UnimplementedEnvironmentServiceHandler) EnvironmentList(context.Context, *connect.Request[v1.EnvironmentListRequest]) (*connect.Response[v1.EnvironmentListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.environmentv1.EnvironmentService.EnvironmentList is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) EnvironmentGet(context.Context, *connect.Request[v1.EnvironmentGetRequest]) (*connect.Response[v1.EnvironmentGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.environmentv1.EnvironmentService.EnvironmentGet is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) EnvironmentCreate(context.Context, *connect.Request[v1.EnvironmentCreateRequest]) (*connect.Response[v1.EnvironmentCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.environmentv1.EnvironmentService.EnvironmentCreate is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) EnvironmentUpdate(context.Context, *connect.Request[v1.EnvironmentUpdateRequest]) (*connect.Response[v1.EnvironmentUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.environmentv1.EnvironmentService.EnvironmentUpdate is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) EnvironmentDelete(context.Context, *connect.Request[v1.EnvironmentDeleteRequest]) (*connect.Response[v1.EnvironmentDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.environmentv1.EnvironmentService.EnvironmentDelete is not implemented"))
}
