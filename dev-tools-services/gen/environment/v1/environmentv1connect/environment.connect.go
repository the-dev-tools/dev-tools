// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: environment/v1/environment.proto

package environmentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-services/gen/environment/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnvironmentServiceName is the fully-qualified name of the EnvironmentService service.
	EnvironmentServiceName = "environment.v1.EnvironmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnvironmentServiceCreateEnvironmentProcedure is the fully-qualified name of the
	// EnvironmentService's CreateEnvironment RPC.
	EnvironmentServiceCreateEnvironmentProcedure = "/environment.v1.EnvironmentService/CreateEnvironment"
	// EnvironmentServiceGetEnvironmentProcedure is the fully-qualified name of the EnvironmentService's
	// GetEnvironment RPC.
	EnvironmentServiceGetEnvironmentProcedure = "/environment.v1.EnvironmentService/GetEnvironment"
	// EnvironmentServiceGetEnvironmentsProcedure is the fully-qualified name of the
	// EnvironmentService's GetEnvironments RPC.
	EnvironmentServiceGetEnvironmentsProcedure = "/environment.v1.EnvironmentService/GetEnvironments"
	// EnvironmentServiceUpdateEnvironmentProcedure is the fully-qualified name of the
	// EnvironmentService's UpdateEnvironment RPC.
	EnvironmentServiceUpdateEnvironmentProcedure = "/environment.v1.EnvironmentService/UpdateEnvironment"
	// EnvironmentServiceDeleteEnvironmentProcedure is the fully-qualified name of the
	// EnvironmentService's DeleteEnvironment RPC.
	EnvironmentServiceDeleteEnvironmentProcedure = "/environment.v1.EnvironmentService/DeleteEnvironment"
	// EnvironmentServiceGetAllVariablesProcedure is the fully-qualified name of the
	// EnvironmentService's GetAllVariables RPC.
	EnvironmentServiceGetAllVariablesProcedure = "/environment.v1.EnvironmentService/GetAllVariables"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	environmentServiceServiceDescriptor                 = v1.File_environment_v1_environment_proto.Services().ByName("EnvironmentService")
	environmentServiceCreateEnvironmentMethodDescriptor = environmentServiceServiceDescriptor.Methods().ByName("CreateEnvironment")
	environmentServiceGetEnvironmentMethodDescriptor    = environmentServiceServiceDescriptor.Methods().ByName("GetEnvironment")
	environmentServiceGetEnvironmentsMethodDescriptor   = environmentServiceServiceDescriptor.Methods().ByName("GetEnvironments")
	environmentServiceUpdateEnvironmentMethodDescriptor = environmentServiceServiceDescriptor.Methods().ByName("UpdateEnvironment")
	environmentServiceDeleteEnvironmentMethodDescriptor = environmentServiceServiceDescriptor.Methods().ByName("DeleteEnvironment")
	environmentServiceGetAllVariablesMethodDescriptor   = environmentServiceServiceDescriptor.Methods().ByName("GetAllVariables")
)

// EnvironmentServiceClient is a client for the environment.v1.EnvironmentService service.
type EnvironmentServiceClient interface {
	CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error)
	GetEnvironment(context.Context, *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.GetEnvironmentResponse], error)
	GetEnvironments(context.Context, *connect.Request[v1.GetEnvironmentsRequest]) (*connect.Response[v1.GetEnvironmentsResponse], error)
	UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error)
	DeleteEnvironment(context.Context, *connect.Request[v1.DeleteEnvironmentRequest]) (*connect.Response[v1.DeleteEnvironmentResponse], error)
	GetAllVariables(context.Context, *connect.Request[v1.GetAllVariablesRequest]) (*connect.Response[v1.GetAllVariablesResponse], error)
}

// NewEnvironmentServiceClient constructs a client for the environment.v1.EnvironmentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnvironmentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnvironmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &environmentServiceClient{
		createEnvironment: connect.NewClient[v1.CreateEnvironmentRequest, v1.CreateEnvironmentResponse](
			httpClient,
			baseURL+EnvironmentServiceCreateEnvironmentProcedure,
			connect.WithSchema(environmentServiceCreateEnvironmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEnvironment: connect.NewClient[v1.GetEnvironmentRequest, v1.GetEnvironmentResponse](
			httpClient,
			baseURL+EnvironmentServiceGetEnvironmentProcedure,
			connect.WithSchema(environmentServiceGetEnvironmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEnvironments: connect.NewClient[v1.GetEnvironmentsRequest, v1.GetEnvironmentsResponse](
			httpClient,
			baseURL+EnvironmentServiceGetEnvironmentsProcedure,
			connect.WithSchema(environmentServiceGetEnvironmentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateEnvironment: connect.NewClient[v1.UpdateEnvironmentRequest, v1.UpdateEnvironmentResponse](
			httpClient,
			baseURL+EnvironmentServiceUpdateEnvironmentProcedure,
			connect.WithSchema(environmentServiceUpdateEnvironmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteEnvironment: connect.NewClient[v1.DeleteEnvironmentRequest, v1.DeleteEnvironmentResponse](
			httpClient,
			baseURL+EnvironmentServiceDeleteEnvironmentProcedure,
			connect.WithSchema(environmentServiceDeleteEnvironmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAllVariables: connect.NewClient[v1.GetAllVariablesRequest, v1.GetAllVariablesResponse](
			httpClient,
			baseURL+EnvironmentServiceGetAllVariablesProcedure,
			connect.WithSchema(environmentServiceGetAllVariablesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// environmentServiceClient implements EnvironmentServiceClient.
type environmentServiceClient struct {
	createEnvironment *connect.Client[v1.CreateEnvironmentRequest, v1.CreateEnvironmentResponse]
	getEnvironment    *connect.Client[v1.GetEnvironmentRequest, v1.GetEnvironmentResponse]
	getEnvironments   *connect.Client[v1.GetEnvironmentsRequest, v1.GetEnvironmentsResponse]
	updateEnvironment *connect.Client[v1.UpdateEnvironmentRequest, v1.UpdateEnvironmentResponse]
	deleteEnvironment *connect.Client[v1.DeleteEnvironmentRequest, v1.DeleteEnvironmentResponse]
	getAllVariables   *connect.Client[v1.GetAllVariablesRequest, v1.GetAllVariablesResponse]
}

// CreateEnvironment calls environment.v1.EnvironmentService.CreateEnvironment.
func (c *environmentServiceClient) CreateEnvironment(ctx context.Context, req *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error) {
	return c.createEnvironment.CallUnary(ctx, req)
}

// GetEnvironment calls environment.v1.EnvironmentService.GetEnvironment.
func (c *environmentServiceClient) GetEnvironment(ctx context.Context, req *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.GetEnvironmentResponse], error) {
	return c.getEnvironment.CallUnary(ctx, req)
}

// GetEnvironments calls environment.v1.EnvironmentService.GetEnvironments.
func (c *environmentServiceClient) GetEnvironments(ctx context.Context, req *connect.Request[v1.GetEnvironmentsRequest]) (*connect.Response[v1.GetEnvironmentsResponse], error) {
	return c.getEnvironments.CallUnary(ctx, req)
}

// UpdateEnvironment calls environment.v1.EnvironmentService.UpdateEnvironment.
func (c *environmentServiceClient) UpdateEnvironment(ctx context.Context, req *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error) {
	return c.updateEnvironment.CallUnary(ctx, req)
}

// DeleteEnvironment calls environment.v1.EnvironmentService.DeleteEnvironment.
func (c *environmentServiceClient) DeleteEnvironment(ctx context.Context, req *connect.Request[v1.DeleteEnvironmentRequest]) (*connect.Response[v1.DeleteEnvironmentResponse], error) {
	return c.deleteEnvironment.CallUnary(ctx, req)
}

// GetAllVariables calls environment.v1.EnvironmentService.GetAllVariables.
func (c *environmentServiceClient) GetAllVariables(ctx context.Context, req *connect.Request[v1.GetAllVariablesRequest]) (*connect.Response[v1.GetAllVariablesResponse], error) {
	return c.getAllVariables.CallUnary(ctx, req)
}

// EnvironmentServiceHandler is an implementation of the environment.v1.EnvironmentService service.
type EnvironmentServiceHandler interface {
	CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error)
	GetEnvironment(context.Context, *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.GetEnvironmentResponse], error)
	GetEnvironments(context.Context, *connect.Request[v1.GetEnvironmentsRequest]) (*connect.Response[v1.GetEnvironmentsResponse], error)
	UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error)
	DeleteEnvironment(context.Context, *connect.Request[v1.DeleteEnvironmentRequest]) (*connect.Response[v1.DeleteEnvironmentResponse], error)
	GetAllVariables(context.Context, *connect.Request[v1.GetAllVariablesRequest]) (*connect.Response[v1.GetAllVariablesResponse], error)
}

// NewEnvironmentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnvironmentServiceHandler(svc EnvironmentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	environmentServiceCreateEnvironmentHandler := connect.NewUnaryHandler(
		EnvironmentServiceCreateEnvironmentProcedure,
		svc.CreateEnvironment,
		connect.WithSchema(environmentServiceCreateEnvironmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceGetEnvironmentHandler := connect.NewUnaryHandler(
		EnvironmentServiceGetEnvironmentProcedure,
		svc.GetEnvironment,
		connect.WithSchema(environmentServiceGetEnvironmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceGetEnvironmentsHandler := connect.NewUnaryHandler(
		EnvironmentServiceGetEnvironmentsProcedure,
		svc.GetEnvironments,
		connect.WithSchema(environmentServiceGetEnvironmentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceUpdateEnvironmentHandler := connect.NewUnaryHandler(
		EnvironmentServiceUpdateEnvironmentProcedure,
		svc.UpdateEnvironment,
		connect.WithSchema(environmentServiceUpdateEnvironmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceDeleteEnvironmentHandler := connect.NewUnaryHandler(
		EnvironmentServiceDeleteEnvironmentProcedure,
		svc.DeleteEnvironment,
		connect.WithSchema(environmentServiceDeleteEnvironmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	environmentServiceGetAllVariablesHandler := connect.NewUnaryHandler(
		EnvironmentServiceGetAllVariablesProcedure,
		svc.GetAllVariables,
		connect.WithSchema(environmentServiceGetAllVariablesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/environment.v1.EnvironmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnvironmentServiceCreateEnvironmentProcedure:
			environmentServiceCreateEnvironmentHandler.ServeHTTP(w, r)
		case EnvironmentServiceGetEnvironmentProcedure:
			environmentServiceGetEnvironmentHandler.ServeHTTP(w, r)
		case EnvironmentServiceGetEnvironmentsProcedure:
			environmentServiceGetEnvironmentsHandler.ServeHTTP(w, r)
		case EnvironmentServiceUpdateEnvironmentProcedure:
			environmentServiceUpdateEnvironmentHandler.ServeHTTP(w, r)
		case EnvironmentServiceDeleteEnvironmentProcedure:
			environmentServiceDeleteEnvironmentHandler.ServeHTTP(w, r)
		case EnvironmentServiceGetAllVariablesProcedure:
			environmentServiceGetAllVariablesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnvironmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnvironmentServiceHandler struct{}

func (UnimplementedEnvironmentServiceHandler) CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.EnvironmentService.CreateEnvironment is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) GetEnvironment(context.Context, *connect.Request[v1.GetEnvironmentRequest]) (*connect.Response[v1.GetEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.EnvironmentService.GetEnvironment is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) GetEnvironments(context.Context, *connect.Request[v1.GetEnvironmentsRequest]) (*connect.Response[v1.GetEnvironmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.EnvironmentService.GetEnvironments is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.EnvironmentService.UpdateEnvironment is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) DeleteEnvironment(context.Context, *connect.Request[v1.DeleteEnvironmentRequest]) (*connect.Response[v1.DeleteEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.EnvironmentService.DeleteEnvironment is not implemented"))
}

func (UnimplementedEnvironmentServiceHandler) GetAllVariables(context.Context, *connect.Request[v1.GetAllVariablesRequest]) (*connect.Response[v1.GetAllVariablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("environment.v1.EnvironmentService.GetAllVariables is not implemented"))
}
