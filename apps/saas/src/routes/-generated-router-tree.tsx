/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './__root';
import { Route as LoginImport } from './login';
import { Route as AuthorizedRouteImport } from './_authorized/route';
import { Route as AuthorizedDashboardRouteImport } from './_authorized/_dashboard/route';
import { Route as AuthorizedDashboardIndexImport } from './_authorized/_dashboard/index';
import { Route as AuthorizedWorkspaceWorkspaceIdRouteImport } from './_authorized/workspace.$workspaceId/route';
import { Route as AuthorizedWorkspaceWorkspaceIdIndexImport } from './_authorized/workspace.$workspaceId/index';
import { Route as AuthorizedWorkspaceWorkspaceIdMembersImport } from './_authorized/workspace.$workspaceId/members';
import { Route as AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdImport } from './_authorized/workspace.$workspaceId/api-call.$apiCallId';

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

const AuthorizedRouteRoute = AuthorizedRouteImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRoute,
} as any);

const AuthorizedDashboardRouteRoute = AuthorizedDashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => AuthorizedRouteRoute,
} as any);

const AuthorizedDashboardIndexRoute = AuthorizedDashboardIndexImport.update({
  path: '/',
  getParentRoute: () => AuthorizedDashboardRouteRoute,
} as any);

const AuthorizedWorkspaceWorkspaceIdRouteRoute =
  AuthorizedWorkspaceWorkspaceIdRouteImport.update({
    path: '/workspace/$workspaceId',
    getParentRoute: () => AuthorizedRouteRoute,
  } as any);

const AuthorizedWorkspaceWorkspaceIdIndexRoute =
  AuthorizedWorkspaceWorkspaceIdIndexImport.update({
    path: '/',
    getParentRoute: () => AuthorizedWorkspaceWorkspaceIdRouteRoute,
  } as any);

const AuthorizedWorkspaceWorkspaceIdMembersRoute =
  AuthorizedWorkspaceWorkspaceIdMembersImport.update({
    path: '/members',
    getParentRoute: () => AuthorizedWorkspaceWorkspaceIdRouteRoute,
  } as any);

const AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRoute =
  AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdImport.update({
    path: '/api-call/$apiCallId',
    getParentRoute: () => AuthorizedWorkspaceWorkspaceIdRouteRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authorized': {
      id: '/_authorized';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthorizedRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/_authorized/_dashboard': {
      id: '/_authorized/_dashboard';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthorizedDashboardRouteImport;
      parentRoute: typeof AuthorizedRouteImport;
    };
    '/_authorized/workspace/$workspaceId': {
      id: '/_authorized/workspace/$workspaceId';
      path: '/workspace/$workspaceId';
      fullPath: '/workspace/$workspaceId';
      preLoaderRoute: typeof AuthorizedWorkspaceWorkspaceIdRouteImport;
      parentRoute: typeof AuthorizedRouteImport;
    };
    '/_authorized/_dashboard/': {
      id: '/_authorized/_dashboard/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof AuthorizedDashboardIndexImport;
      parentRoute: typeof AuthorizedDashboardRouteImport;
    };
    '/_authorized/workspace/$workspaceId/members': {
      id: '/_authorized/workspace/$workspaceId/members';
      path: '/members';
      fullPath: '/workspace/$workspaceId/members';
      preLoaderRoute: typeof AuthorizedWorkspaceWorkspaceIdMembersImport;
      parentRoute: typeof AuthorizedWorkspaceWorkspaceIdRouteImport;
    };
    '/_authorized/workspace/$workspaceId/': {
      id: '/_authorized/workspace/$workspaceId/';
      path: '/';
      fullPath: '/workspace/$workspaceId/';
      preLoaderRoute: typeof AuthorizedWorkspaceWorkspaceIdIndexImport;
      parentRoute: typeof AuthorizedWorkspaceWorkspaceIdRouteImport;
    };
    '/_authorized/workspace/$workspaceId/api-call/$apiCallId': {
      id: '/_authorized/workspace/$workspaceId/api-call/$apiCallId';
      path: '/api-call/$apiCallId';
      fullPath: '/workspace/$workspaceId/api-call/$apiCallId';
      preLoaderRoute: typeof AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdImport;
      parentRoute: typeof AuthorizedWorkspaceWorkspaceIdRouteImport;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  AuthorizedRouteRoute: AuthorizedRouteRoute.addChildren({
    AuthorizedDashboardRouteRoute: AuthorizedDashboardRouteRoute.addChildren({
      AuthorizedDashboardIndexRoute,
    }),
    AuthorizedWorkspaceWorkspaceIdRouteRoute:
      AuthorizedWorkspaceWorkspaceIdRouteRoute.addChildren({
        AuthorizedWorkspaceWorkspaceIdMembersRoute,
        AuthorizedWorkspaceWorkspaceIdIndexRoute,
        AuthorizedWorkspaceWorkspaceIdApiCallApiCallIdRoute,
      }),
  }),
  LoginRoute,
});

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authorized",
        "/login"
      ]
    },
    "/_authorized": {
      "filePath": "_authorized/route.tsx",
      "children": [
        "/_authorized/_dashboard",
        "/_authorized/workspace/$workspaceId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authorized/_dashboard": {
      "filePath": "_authorized/_dashboard/route.tsx",
      "parent": "/_authorized",
      "children": [
        "/_authorized/_dashboard/"
      ]
    },
    "/_authorized/workspace/$workspaceId": {
      "filePath": "_authorized/workspace.$workspaceId/route.tsx",
      "parent": "/_authorized",
      "children": [
        "/_authorized/workspace/$workspaceId/members",
        "/_authorized/workspace/$workspaceId/",
        "/_authorized/workspace/$workspaceId/api-call/$apiCallId"
      ]
    },
    "/_authorized/_dashboard/": {
      "filePath": "_authorized/_dashboard/index.tsx",
      "parent": "/_authorized/_dashboard"
    },
    "/_authorized/workspace/$workspaceId/members": {
      "filePath": "_authorized/workspace.$workspaceId/members.tsx",
      "parent": "/_authorized/workspace/$workspaceId"
    },
    "/_authorized/workspace/$workspaceId/": {
      "filePath": "_authorized/workspace.$workspaceId/index.tsx",
      "parent": "/_authorized/workspace/$workspaceId"
    },
    "/_authorized/workspace/$workspaceId/api-call/$apiCallId": {
      "filePath": "_authorized/workspace.$workspaceId/api-call.$apiCallId.tsx",
      "parent": "/_authorized/workspace/$workspaceId"
    }
  }
}
ROUTE_MANIFEST_END */
