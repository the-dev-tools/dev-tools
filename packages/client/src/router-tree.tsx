/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './root';
import { Route as loginRouteImport } from './login';
import { Route as authorizedRouteImport } from './authorized';
import { Route as dashboardRouteImport } from './dashboard';
import { Route as workspaceLayoutRouteImport } from './workspace/layout';
import { Route as workspaceListRouteImport } from './workspace/list';
import { Route as workspaceMembersRouteImport } from './workspace/members';
import { Route as workspaceOverviewRouteImport } from './workspace/overview';
import { Route as flowLayoutRouteImport } from './flow/layout';
import { Route as flowHistoryRouteImport } from './flow/history';
import { Route as flowFlowRouteImport } from './flow/flow';
import { Route as endpointRouteImport } from './endpoint';

const loginRoute = loginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any);
const authorizedRoute = authorizedRouteImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRouteImport,
} as any);
const dashboardRoute = dashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => authorizedRoute,
} as any);
const workspaceLayoutRoute = workspaceLayoutRouteImport.update({
  id: '/workspace/$workspaceIdCan',
  path: '/workspace/$workspaceIdCan',
  getParentRoute: () => authorizedRoute,
} as any);
const workspaceListRoute = workspaceListRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardRoute,
} as any);
const workspaceMembersRoute = workspaceMembersRouteImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => workspaceLayoutRoute,
} as any);
const workspaceOverviewRoute = workspaceOverviewRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => workspaceLayoutRoute,
} as any);
const flowLayoutRoute = flowLayoutRouteImport.update({
  id: '/flow/$flowIdCan',
  path: '/flow/$flowIdCan',
  getParentRoute: () => workspaceLayoutRoute,
} as any);
const flowHistoryRoute = flowHistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => flowLayoutRoute,
} as any);
const flowFlowRoute = flowFlowRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => flowLayoutRoute,
} as any);
const endpointRoute = endpointRouteImport.update({
  id: '/endpoint/$endpointIdCan/example/$exampleIdCan',
  path: '/endpoint/$endpointIdCan/example/$exampleIdCan',
  getParentRoute: () => workspaceLayoutRoute,
} as any);

export interface FileRoutesByFullPath {
  '/login': typeof loginRoute;
  '/': typeof workspaceListRoute;
  '/workspace/$workspaceIdCan': typeof workspaceLayoutRouteWithChildren;
  '/workspace/$workspaceIdCan/': typeof workspaceOverviewRoute;
  '/workspace/$workspaceIdCan/members': typeof workspaceMembersRoute;
  '/workspace/$workspaceIdCan/flow/$flowIdCan': typeof flowLayoutRouteWithChildren;
  '/workspace/$workspaceIdCan/flow/$flowIdCan/': typeof flowFlowRoute;
  '/workspace/$workspaceIdCan/flow/$flowIdCan/history': typeof flowHistoryRoute;
  '/workspace/$workspaceIdCan/endpoint/$endpointIdCan/example/$exampleIdCan': typeof endpointRoute;
}
export interface FileRoutesByTo {
  '/login': typeof loginRoute;
  '/': typeof workspaceListRoute;
  '/workspace/$workspaceIdCan': typeof workspaceOverviewRoute;
  '/workspace/$workspaceIdCan/members': typeof workspaceMembersRoute;
  '/workspace/$workspaceIdCan/flow/$flowIdCan': typeof flowFlowRoute;
  '/workspace/$workspaceIdCan/flow/$flowIdCan/history': typeof flowHistoryRoute;
  '/workspace/$workspaceIdCan/endpoint/$endpointIdCan/example/$exampleIdCan': typeof endpointRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/_authorized': typeof authorizedRouteWithChildren;
  '/login': typeof loginRoute;
  '/_authorized/_dashboard': typeof dashboardRouteWithChildren;
  '/_authorized/_dashboard/': typeof workspaceListRoute;
  '/_authorized/workspace/$workspaceIdCan': typeof workspaceLayoutRouteWithChildren;
  '/_authorized/workspace/$workspaceIdCan/': typeof workspaceOverviewRoute;
  '/_authorized/workspace/$workspaceIdCan/members': typeof workspaceMembersRoute;
  '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan': typeof flowLayoutRouteWithChildren;
  '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan/': typeof flowFlowRoute;
  '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan/history': typeof flowHistoryRoute;
  '/_authorized/workspace/$workspaceIdCan/endpoint/$endpointIdCan/example/$exampleIdCan': typeof endpointRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/login'
    | '/'
    | '/workspace/$workspaceIdCan'
    | '/workspace/$workspaceIdCan/'
    | '/workspace/$workspaceIdCan/members'
    | '/workspace/$workspaceIdCan/flow/$flowIdCan'
    | '/workspace/$workspaceIdCan/flow/$flowIdCan/'
    | '/workspace/$workspaceIdCan/flow/$flowIdCan/history'
    | '/workspace/$workspaceIdCan/endpoint/$endpointIdCan/example/$exampleIdCan';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/login'
    | '/'
    | '/workspace/$workspaceIdCan'
    | '/workspace/$workspaceIdCan/members'
    | '/workspace/$workspaceIdCan/flow/$flowIdCan'
    | '/workspace/$workspaceIdCan/flow/$flowIdCan/history'
    | '/workspace/$workspaceIdCan/endpoint/$endpointIdCan/example/$exampleIdCan';
  id:
    | '__root__'
    | '/_authorized'
    | '/login'
    | '/_authorized/_dashboard'
    | '/_authorized/_dashboard/'
    | '/_authorized/workspace/$workspaceIdCan'
    | '/_authorized/workspace/$workspaceIdCan/'
    | '/_authorized/workspace/$workspaceIdCan/members'
    | '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan'
    | '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan/'
    | '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan/history'
    | '/_authorized/workspace/$workspaceIdCan/endpoint/$endpointIdCan/example/$exampleIdCan';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  authorizedRoute: typeof authorizedRouteWithChildren;
  loginRoute: typeof loginRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof loginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_authorized': {
      id: '/_authorized';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof authorizedRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_authorized/_dashboard': {
      id: '/_authorized/_dashboard';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof dashboardRouteImport;
      parentRoute: typeof authorizedRoute;
    };
    '/_authorized/workspace/$workspaceIdCan': {
      id: '/_authorized/workspace/$workspaceIdCan';
      path: '/workspace/$workspaceIdCan';
      fullPath: '/workspace/$workspaceIdCan';
      preLoaderRoute: typeof workspaceLayoutRouteImport;
      parentRoute: typeof authorizedRoute;
    };
    '/_authorized/_dashboard/': {
      id: '/_authorized/_dashboard/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof workspaceListRouteImport;
      parentRoute: typeof dashboardRoute;
    };
    '/_authorized/workspace/$workspaceIdCan/members': {
      id: '/_authorized/workspace/$workspaceIdCan/members';
      path: '/members';
      fullPath: '/workspace/$workspaceIdCan/members';
      preLoaderRoute: typeof workspaceMembersRouteImport;
      parentRoute: typeof workspaceLayoutRoute;
    };
    '/_authorized/workspace/$workspaceIdCan/': {
      id: '/_authorized/workspace/$workspaceIdCan/';
      path: '/';
      fullPath: '/workspace/$workspaceIdCan/';
      preLoaderRoute: typeof workspaceOverviewRouteImport;
      parentRoute: typeof workspaceLayoutRoute;
    };
    '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan': {
      id: '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan';
      path: '/flow/$flowIdCan';
      fullPath: '/workspace/$workspaceIdCan/flow/$flowIdCan';
      preLoaderRoute: typeof flowLayoutRouteImport;
      parentRoute: typeof workspaceLayoutRoute;
    };
    '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan/history': {
      id: '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan/history';
      path: '/history';
      fullPath: '/workspace/$workspaceIdCan/flow/$flowIdCan/history';
      preLoaderRoute: typeof flowHistoryRouteImport;
      parentRoute: typeof flowLayoutRoute;
    };
    '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan/': {
      id: '/_authorized/workspace/$workspaceIdCan/flow/$flowIdCan/';
      path: '/';
      fullPath: '/workspace/$workspaceIdCan/flow/$flowIdCan/';
      preLoaderRoute: typeof flowFlowRouteImport;
      parentRoute: typeof flowLayoutRoute;
    };
    '/_authorized/workspace/$workspaceIdCan/endpoint/$endpointIdCan/example/$exampleIdCan': {
      id: '/_authorized/workspace/$workspaceIdCan/endpoint/$endpointIdCan/example/$exampleIdCan';
      path: '/endpoint/$endpointIdCan/example/$exampleIdCan';
      fullPath: '/workspace/$workspaceIdCan/endpoint/$endpointIdCan/example/$exampleIdCan';
      preLoaderRoute: typeof endpointRouteImport;
      parentRoute: typeof workspaceLayoutRoute;
    };
  }
}

interface dashboardRouteChildren {
  workspaceListRoute: typeof workspaceListRoute;
}

const dashboardRouteChildren: dashboardRouteChildren = {
  workspaceListRoute: workspaceListRoute,
};

const dashboardRouteWithChildren = dashboardRoute._addFileChildren(
  dashboardRouteChildren,
);

interface flowLayoutRouteChildren {
  flowFlowRoute: typeof flowFlowRoute;
  flowHistoryRoute: typeof flowHistoryRoute;
}

const flowLayoutRouteChildren: flowLayoutRouteChildren = {
  flowFlowRoute: flowFlowRoute,
  flowHistoryRoute: flowHistoryRoute,
};

const flowLayoutRouteWithChildren = flowLayoutRoute._addFileChildren(
  flowLayoutRouteChildren,
);

interface workspaceLayoutRouteChildren {
  workspaceOverviewRoute: typeof workspaceOverviewRoute;
  workspaceMembersRoute: typeof workspaceMembersRoute;
  flowLayoutRoute: typeof flowLayoutRouteWithChildren;
  endpointRoute: typeof endpointRoute;
}

const workspaceLayoutRouteChildren: workspaceLayoutRouteChildren = {
  workspaceOverviewRoute: workspaceOverviewRoute,
  workspaceMembersRoute: workspaceMembersRoute,
  flowLayoutRoute: flowLayoutRouteWithChildren,
  endpointRoute: endpointRoute,
};

const workspaceLayoutRouteWithChildren = workspaceLayoutRoute._addFileChildren(
  workspaceLayoutRouteChildren,
);

interface authorizedRouteChildren {
  dashboardRoute: typeof dashboardRouteWithChildren;
  workspaceLayoutRoute: typeof workspaceLayoutRouteWithChildren;
}

const authorizedRouteChildren: authorizedRouteChildren = {
  dashboardRoute: dashboardRouteWithChildren,
  workspaceLayoutRoute: workspaceLayoutRouteWithChildren,
};

const authorizedRouteWithChildren = authorizedRoute._addFileChildren(
  authorizedRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  authorizedRoute: authorizedRouteWithChildren,
  loginRoute: loginRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
