// Generated by Microsoft TypeSpec

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: collection/item/v1/itemv1.proto

package itemv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-spec/dist/buf/go/collection/item/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectionItemServiceName is the fully-qualified name of the CollectionItemService service.
	CollectionItemServiceName = "collection.item.v1.itemv1.CollectionItemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectionItemServiceCollectionItemListProcedure is the fully-qualified name of the
	// CollectionItemService's CollectionItemList RPC.
	CollectionItemServiceCollectionItemListProcedure = "/collection.item.v1.itemv1.CollectionItemService/CollectionItemList"
	// CollectionItemServiceCollectionItemMoveProcedure is the fully-qualified name of the
	// CollectionItemService's CollectionItemMove RPC.
	CollectionItemServiceCollectionItemMoveProcedure = "/collection.item.v1.itemv1.CollectionItemService/CollectionItemMove"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	collectionItemServiceServiceDescriptor                  = v1.File_collection_item_v1_itemv1_proto.Services().ByName("CollectionItemService")
	collectionItemServiceCollectionItemListMethodDescriptor = collectionItemServiceServiceDescriptor.Methods().ByName("CollectionItemList")
	collectionItemServiceCollectionItemMoveMethodDescriptor = collectionItemServiceServiceDescriptor.Methods().ByName("CollectionItemMove")
)

// CollectionItemServiceClient is a client for the collection.item.v1.itemv1.CollectionItemService
// service.
type CollectionItemServiceClient interface {
	CollectionItemList(context.Context, *connect.Request[v1.CollectionItemListRequest]) (*connect.Response[v1.CollectionItemListResponse], error)
	CollectionItemMove(context.Context, *connect.Request[v1.CollectionItemMoveRequest]) (*connect.Response[v1.CollectionItemMoveResponse], error)
}

// NewCollectionItemServiceClient constructs a client for the
// collection.item.v1.itemv1.CollectionItemService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectionItemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectionItemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &collectionItemServiceClient{
		collectionItemList: connect.NewClient[v1.CollectionItemListRequest, v1.CollectionItemListResponse](
			httpClient,
			baseURL+CollectionItemServiceCollectionItemListProcedure,
			connect.WithSchema(collectionItemServiceCollectionItemListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		collectionItemMove: connect.NewClient[v1.CollectionItemMoveRequest, v1.CollectionItemMoveResponse](
			httpClient,
			baseURL+CollectionItemServiceCollectionItemMoveProcedure,
			connect.WithSchema(collectionItemServiceCollectionItemMoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectionItemServiceClient implements CollectionItemServiceClient.
type collectionItemServiceClient struct {
	collectionItemList *connect.Client[v1.CollectionItemListRequest, v1.CollectionItemListResponse]
	collectionItemMove *connect.Client[v1.CollectionItemMoveRequest, v1.CollectionItemMoveResponse]
}

// CollectionItemList calls collection.item.v1.itemv1.CollectionItemService.CollectionItemList.
func (c *collectionItemServiceClient) CollectionItemList(ctx context.Context, req *connect.Request[v1.CollectionItemListRequest]) (*connect.Response[v1.CollectionItemListResponse], error) {
	return c.collectionItemList.CallUnary(ctx, req)
}

// CollectionItemMove calls collection.item.v1.itemv1.CollectionItemService.CollectionItemMove.
func (c *collectionItemServiceClient) CollectionItemMove(ctx context.Context, req *connect.Request[v1.CollectionItemMoveRequest]) (*connect.Response[v1.CollectionItemMoveResponse], error) {
	return c.collectionItemMove.CallUnary(ctx, req)
}

// CollectionItemServiceHandler is an implementation of the
// collection.item.v1.itemv1.CollectionItemService service.
type CollectionItemServiceHandler interface {
	CollectionItemList(context.Context, *connect.Request[v1.CollectionItemListRequest]) (*connect.Response[v1.CollectionItemListResponse], error)
	CollectionItemMove(context.Context, *connect.Request[v1.CollectionItemMoveRequest]) (*connect.Response[v1.CollectionItemMoveResponse], error)
}

// NewCollectionItemServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectionItemServiceHandler(svc CollectionItemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectionItemServiceCollectionItemListHandler := connect.NewUnaryHandler(
		CollectionItemServiceCollectionItemListProcedure,
		svc.CollectionItemList,
		connect.WithSchema(collectionItemServiceCollectionItemListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionItemServiceCollectionItemMoveHandler := connect.NewUnaryHandler(
		CollectionItemServiceCollectionItemMoveProcedure,
		svc.CollectionItemMove,
		connect.WithSchema(collectionItemServiceCollectionItemMoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/collection.item.v1.itemv1.CollectionItemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectionItemServiceCollectionItemListProcedure:
			collectionItemServiceCollectionItemListHandler.ServeHTTP(w, r)
		case CollectionItemServiceCollectionItemMoveProcedure:
			collectionItemServiceCollectionItemMoveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectionItemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectionItemServiceHandler struct{}

func (UnimplementedCollectionItemServiceHandler) CollectionItemList(context.Context, *connect.Request[v1.CollectionItemListRequest]) (*connect.Response[v1.CollectionItemListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.v1.itemv1.CollectionItemService.CollectionItemList is not implemented"))
}

func (UnimplementedCollectionItemServiceHandler) CollectionItemMove(context.Context, *connect.Request[v1.CollectionItemMoveRequest]) (*connect.Response[v1.CollectionItemMoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.v1.itemv1.CollectionItemService.CollectionItemMove is not implemented"))
}
