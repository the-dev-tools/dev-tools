// Generated by Microsoft TypeSpec

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: collection/v1/collection.proto

package collectionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-spec/dist/buf/go/collection/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectionServiceName is the fully-qualified name of the CollectionService service.
	CollectionServiceName = "collection.v1.CollectionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectionServiceCollectionListProcedure is the fully-qualified name of the CollectionService's
	// CollectionList RPC.
	CollectionServiceCollectionListProcedure = "/collection.v1.CollectionService/CollectionList"
	// CollectionServiceCollectionGetProcedure is the fully-qualified name of the CollectionService's
	// CollectionGet RPC.
	CollectionServiceCollectionGetProcedure = "/collection.v1.CollectionService/CollectionGet"
	// CollectionServiceCollectionCreateProcedure is the fully-qualified name of the CollectionService's
	// CollectionCreate RPC.
	CollectionServiceCollectionCreateProcedure = "/collection.v1.CollectionService/CollectionCreate"
	// CollectionServiceCollectionUpdateProcedure is the fully-qualified name of the CollectionService's
	// CollectionUpdate RPC.
	CollectionServiceCollectionUpdateProcedure = "/collection.v1.CollectionService/CollectionUpdate"
	// CollectionServiceCollectionDeleteProcedure is the fully-qualified name of the CollectionService's
	// CollectionDelete RPC.
	CollectionServiceCollectionDeleteProcedure = "/collection.v1.CollectionService/CollectionDelete"
	// CollectionServiceCollectionImportPostmanProcedure is the fully-qualified name of the
	// CollectionService's CollectionImportPostman RPC.
	CollectionServiceCollectionImportPostmanProcedure = "/collection.v1.CollectionService/CollectionImportPostman"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	collectionServiceServiceDescriptor                       = v1.File_collection_v1_collection_proto.Services().ByName("CollectionService")
	collectionServiceCollectionListMethodDescriptor          = collectionServiceServiceDescriptor.Methods().ByName("CollectionList")
	collectionServiceCollectionGetMethodDescriptor           = collectionServiceServiceDescriptor.Methods().ByName("CollectionGet")
	collectionServiceCollectionCreateMethodDescriptor        = collectionServiceServiceDescriptor.Methods().ByName("CollectionCreate")
	collectionServiceCollectionUpdateMethodDescriptor        = collectionServiceServiceDescriptor.Methods().ByName("CollectionUpdate")
	collectionServiceCollectionDeleteMethodDescriptor        = collectionServiceServiceDescriptor.Methods().ByName("CollectionDelete")
	collectionServiceCollectionImportPostmanMethodDescriptor = collectionServiceServiceDescriptor.Methods().ByName("CollectionImportPostman")
)

// CollectionServiceClient is a client for the collection.v1.CollectionService service.
type CollectionServiceClient interface {
	CollectionList(context.Context, *connect.Request[v1.CollectionListRequest]) (*connect.Response[v1.CollectionListResponse], error)
	CollectionGet(context.Context, *connect.Request[v1.CollectionGetRequest]) (*connect.Response[v1.CollectionGetResponse], error)
	CollectionCreate(context.Context, *connect.Request[v1.CollectionCreateRequest]) (*connect.Response[v1.CollectionCreateResponse], error)
	CollectionUpdate(context.Context, *connect.Request[v1.CollectionUpdateRequest]) (*connect.Response[v1.CollectionUpdateResponse], error)
	CollectionDelete(context.Context, *connect.Request[v1.CollectionDeleteRequest]) (*connect.Response[v1.CollectionDeleteResponse], error)
	CollectionImportPostman(context.Context, *connect.Request[v1.CollectionImportPostmanRequest]) (*connect.Response[v1.CollectionImportPostmanResponse], error)
}

// NewCollectionServiceClient constructs a client for the collection.v1.CollectionService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &collectionServiceClient{
		collectionList: connect.NewClient[v1.CollectionListRequest, v1.CollectionListResponse](
			httpClient,
			baseURL+CollectionServiceCollectionListProcedure,
			connect.WithSchema(collectionServiceCollectionListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		collectionGet: connect.NewClient[v1.CollectionGetRequest, v1.CollectionGetResponse](
			httpClient,
			baseURL+CollectionServiceCollectionGetProcedure,
			connect.WithSchema(collectionServiceCollectionGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		collectionCreate: connect.NewClient[v1.CollectionCreateRequest, v1.CollectionCreateResponse](
			httpClient,
			baseURL+CollectionServiceCollectionCreateProcedure,
			connect.WithSchema(collectionServiceCollectionCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		collectionUpdate: connect.NewClient[v1.CollectionUpdateRequest, v1.CollectionUpdateResponse](
			httpClient,
			baseURL+CollectionServiceCollectionUpdateProcedure,
			connect.WithSchema(collectionServiceCollectionUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		collectionDelete: connect.NewClient[v1.CollectionDeleteRequest, v1.CollectionDeleteResponse](
			httpClient,
			baseURL+CollectionServiceCollectionDeleteProcedure,
			connect.WithSchema(collectionServiceCollectionDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		collectionImportPostman: connect.NewClient[v1.CollectionImportPostmanRequest, v1.CollectionImportPostmanResponse](
			httpClient,
			baseURL+CollectionServiceCollectionImportPostmanProcedure,
			connect.WithSchema(collectionServiceCollectionImportPostmanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectionServiceClient implements CollectionServiceClient.
type collectionServiceClient struct {
	collectionList          *connect.Client[v1.CollectionListRequest, v1.CollectionListResponse]
	collectionGet           *connect.Client[v1.CollectionGetRequest, v1.CollectionGetResponse]
	collectionCreate        *connect.Client[v1.CollectionCreateRequest, v1.CollectionCreateResponse]
	collectionUpdate        *connect.Client[v1.CollectionUpdateRequest, v1.CollectionUpdateResponse]
	collectionDelete        *connect.Client[v1.CollectionDeleteRequest, v1.CollectionDeleteResponse]
	collectionImportPostman *connect.Client[v1.CollectionImportPostmanRequest, v1.CollectionImportPostmanResponse]
}

// CollectionList calls collection.v1.CollectionService.CollectionList.
func (c *collectionServiceClient) CollectionList(ctx context.Context, req *connect.Request[v1.CollectionListRequest]) (*connect.Response[v1.CollectionListResponse], error) {
	return c.collectionList.CallUnary(ctx, req)
}

// CollectionGet calls collection.v1.CollectionService.CollectionGet.
func (c *collectionServiceClient) CollectionGet(ctx context.Context, req *connect.Request[v1.CollectionGetRequest]) (*connect.Response[v1.CollectionGetResponse], error) {
	return c.collectionGet.CallUnary(ctx, req)
}

// CollectionCreate calls collection.v1.CollectionService.CollectionCreate.
func (c *collectionServiceClient) CollectionCreate(ctx context.Context, req *connect.Request[v1.CollectionCreateRequest]) (*connect.Response[v1.CollectionCreateResponse], error) {
	return c.collectionCreate.CallUnary(ctx, req)
}

// CollectionUpdate calls collection.v1.CollectionService.CollectionUpdate.
func (c *collectionServiceClient) CollectionUpdate(ctx context.Context, req *connect.Request[v1.CollectionUpdateRequest]) (*connect.Response[v1.CollectionUpdateResponse], error) {
	return c.collectionUpdate.CallUnary(ctx, req)
}

// CollectionDelete calls collection.v1.CollectionService.CollectionDelete.
func (c *collectionServiceClient) CollectionDelete(ctx context.Context, req *connect.Request[v1.CollectionDeleteRequest]) (*connect.Response[v1.CollectionDeleteResponse], error) {
	return c.collectionDelete.CallUnary(ctx, req)
}

// CollectionImportPostman calls collection.v1.CollectionService.CollectionImportPostman.
func (c *collectionServiceClient) CollectionImportPostman(ctx context.Context, req *connect.Request[v1.CollectionImportPostmanRequest]) (*connect.Response[v1.CollectionImportPostmanResponse], error) {
	return c.collectionImportPostman.CallUnary(ctx, req)
}

// CollectionServiceHandler is an implementation of the collection.v1.CollectionService service.
type CollectionServiceHandler interface {
	CollectionList(context.Context, *connect.Request[v1.CollectionListRequest]) (*connect.Response[v1.CollectionListResponse], error)
	CollectionGet(context.Context, *connect.Request[v1.CollectionGetRequest]) (*connect.Response[v1.CollectionGetResponse], error)
	CollectionCreate(context.Context, *connect.Request[v1.CollectionCreateRequest]) (*connect.Response[v1.CollectionCreateResponse], error)
	CollectionUpdate(context.Context, *connect.Request[v1.CollectionUpdateRequest]) (*connect.Response[v1.CollectionUpdateResponse], error)
	CollectionDelete(context.Context, *connect.Request[v1.CollectionDeleteRequest]) (*connect.Response[v1.CollectionDeleteResponse], error)
	CollectionImportPostman(context.Context, *connect.Request[v1.CollectionImportPostmanRequest]) (*connect.Response[v1.CollectionImportPostmanResponse], error)
}

// NewCollectionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectionServiceHandler(svc CollectionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectionServiceCollectionListHandler := connect.NewUnaryHandler(
		CollectionServiceCollectionListProcedure,
		svc.CollectionList,
		connect.WithSchema(collectionServiceCollectionListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCollectionGetHandler := connect.NewUnaryHandler(
		CollectionServiceCollectionGetProcedure,
		svc.CollectionGet,
		connect.WithSchema(collectionServiceCollectionGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCollectionCreateHandler := connect.NewUnaryHandler(
		CollectionServiceCollectionCreateProcedure,
		svc.CollectionCreate,
		connect.WithSchema(collectionServiceCollectionCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCollectionUpdateHandler := connect.NewUnaryHandler(
		CollectionServiceCollectionUpdateProcedure,
		svc.CollectionUpdate,
		connect.WithSchema(collectionServiceCollectionUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCollectionDeleteHandler := connect.NewUnaryHandler(
		CollectionServiceCollectionDeleteProcedure,
		svc.CollectionDelete,
		connect.WithSchema(collectionServiceCollectionDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCollectionImportPostmanHandler := connect.NewUnaryHandler(
		CollectionServiceCollectionImportPostmanProcedure,
		svc.CollectionImportPostman,
		connect.WithSchema(collectionServiceCollectionImportPostmanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/collection.v1.CollectionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectionServiceCollectionListProcedure:
			collectionServiceCollectionListHandler.ServeHTTP(w, r)
		case CollectionServiceCollectionGetProcedure:
			collectionServiceCollectionGetHandler.ServeHTTP(w, r)
		case CollectionServiceCollectionCreateProcedure:
			collectionServiceCollectionCreateHandler.ServeHTTP(w, r)
		case CollectionServiceCollectionUpdateProcedure:
			collectionServiceCollectionUpdateHandler.ServeHTTP(w, r)
		case CollectionServiceCollectionDeleteProcedure:
			collectionServiceCollectionDeleteHandler.ServeHTTP(w, r)
		case CollectionServiceCollectionImportPostmanProcedure:
			collectionServiceCollectionImportPostmanHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectionServiceHandler struct{}

func (UnimplementedCollectionServiceHandler) CollectionList(context.Context, *connect.Request[v1.CollectionListRequest]) (*connect.Response[v1.CollectionListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CollectionList is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CollectionGet(context.Context, *connect.Request[v1.CollectionGetRequest]) (*connect.Response[v1.CollectionGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CollectionGet is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CollectionCreate(context.Context, *connect.Request[v1.CollectionCreateRequest]) (*connect.Response[v1.CollectionCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CollectionCreate is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CollectionUpdate(context.Context, *connect.Request[v1.CollectionUpdateRequest]) (*connect.Response[v1.CollectionUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CollectionUpdate is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CollectionDelete(context.Context, *connect.Request[v1.CollectionDeleteRequest]) (*connect.Response[v1.CollectionDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CollectionDelete is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CollectionImportPostman(context.Context, *connect.Request[v1.CollectionImportPostmanRequest]) (*connect.Response[v1.CollectionImportPostmanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CollectionImportPostman is not implemented"))
}
