// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCollectionStmt, err = db.PrepareContext(ctx, createCollection); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCollection: %w", err)
	}
	if q.createItemApiStmt, err = db.PrepareContext(ctx, createItemApi); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemApi: %w", err)
	}
	if q.createItemFolderStmt, err = db.PrepareContext(ctx, createItemFolder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemFolder: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createWorkspaceStmt, err = db.PrepareContext(ctx, createWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWorkspace: %w", err)
	}
	if q.createWorkspaceUserStmt, err = db.PrepareContext(ctx, createWorkspaceUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWorkspaceUser: %w", err)
	}
	if q.deleteCollectionStmt, err = db.PrepareContext(ctx, deleteCollection); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCollection: %w", err)
	}
	if q.deleteItemApiStmt, err = db.PrepareContext(ctx, deleteItemApi); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemApi: %w", err)
	}
	if q.deleteItemFolderStmt, err = db.PrepareContext(ctx, deleteItemFolder); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemFolder: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteWorkspaceStmt, err = db.PrepareContext(ctx, deleteWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorkspace: %w", err)
	}
	if q.deleteWorkspaceUserStmt, err = db.PrepareContext(ctx, deleteWorkspaceUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorkspaceUser: %w", err)
	}
	if q.getCollectionStmt, err = db.PrepareContext(ctx, getCollection); err != nil {
		return nil, fmt.Errorf("error preparing query GetCollection: %w", err)
	}
	if q.getCollectionByOwnerIDStmt, err = db.PrepareContext(ctx, getCollectionByOwnerID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCollectionByOwnerID: %w", err)
	}
	if q.getCollectionByPlatformIDandTypeStmt, err = db.PrepareContext(ctx, getCollectionByPlatformIDandType); err != nil {
		return nil, fmt.Errorf("error preparing query GetCollectionByPlatformIDandType: %w", err)
	}
	if q.getCollectionOwnerIDStmt, err = db.PrepareContext(ctx, getCollectionOwnerID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCollectionOwnerID: %w", err)
	}
	if q.getItemApiStmt, err = db.PrepareContext(ctx, getItemApi); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemApi: %w", err)
	}
	if q.getItemApiOwnerIDStmt, err = db.PrepareContext(ctx, getItemApiOwnerID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemApiOwnerID: %w", err)
	}
	if q.getItemFolderStmt, err = db.PrepareContext(ctx, getItemFolder); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemFolder: %w", err)
	}
	if q.getItemFolderByCollectionIDStmt, err = db.PrepareContext(ctx, getItemFolderByCollectionID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemFolderByCollectionID: %w", err)
	}
	if q.getItemFolderOwnerIDStmt, err = db.PrepareContext(ctx, getItemFolderOwnerID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemFolderOwnerID: %w", err)
	}
	if q.getItemsApiByCollectionIDStmt, err = db.PrepareContext(ctx, getItemsApiByCollectionID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemsApiByCollectionID: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByEmailAndProviderTypeStmt, err = db.PrepareContext(ctx, getUserByEmailAndProviderType); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmailAndProviderType: %w", err)
	}
	if q.getUserByProviderIDandTypeStmt, err = db.PrepareContext(ctx, getUserByProviderIDandType); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByProviderIDandType: %w", err)
	}
	if q.getWorkspaceStmt, err = db.PrepareContext(ctx, getWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspace: %w", err)
	}
	if q.getWorkspaceByUserIDStmt, err = db.PrepareContext(ctx, getWorkspaceByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceByUserID: %w", err)
	}
	if q.getWorkspaceByUserIDandWorkspaceIDStmt, err = db.PrepareContext(ctx, getWorkspaceByUserIDandWorkspaceID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceByUserIDandWorkspaceID: %w", err)
	}
	if q.getWorkspaceUserStmt, err = db.PrepareContext(ctx, getWorkspaceUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceUser: %w", err)
	}
	if q.getWorkspaceUserByUserIDStmt, err = db.PrepareContext(ctx, getWorkspaceUserByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceUserByUserID: %w", err)
	}
	if q.getWorkspaceUserByWorkspaceIDStmt, err = db.PrepareContext(ctx, getWorkspaceUserByWorkspaceID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceUserByWorkspaceID: %w", err)
	}
	if q.getWorkspacesByUserIDStmt, err = db.PrepareContext(ctx, getWorkspacesByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspacesByUserID: %w", err)
	}
	if q.updateCollectionStmt, err = db.PrepareContext(ctx, updateCollection); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCollection: %w", err)
	}
	if q.updateItemApiStmt, err = db.PrepareContext(ctx, updateItemApi); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemApi: %w", err)
	}
	if q.updateItemFolderStmt, err = db.PrepareContext(ctx, updateItemFolder); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemFolder: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateWorkspaceStmt, err = db.PrepareContext(ctx, updateWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorkspace: %w", err)
	}
	if q.updateWorkspaceUserStmt, err = db.PrepareContext(ctx, updateWorkspaceUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorkspaceUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCollectionStmt != nil {
		if cerr := q.createCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCollectionStmt: %w", cerr)
		}
	}
	if q.createItemApiStmt != nil {
		if cerr := q.createItemApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemApiStmt: %w", cerr)
		}
	}
	if q.createItemFolderStmt != nil {
		if cerr := q.createItemFolderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemFolderStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createWorkspaceStmt != nil {
		if cerr := q.createWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWorkspaceStmt: %w", cerr)
		}
	}
	if q.createWorkspaceUserStmt != nil {
		if cerr := q.createWorkspaceUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWorkspaceUserStmt: %w", cerr)
		}
	}
	if q.deleteCollectionStmt != nil {
		if cerr := q.deleteCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCollectionStmt: %w", cerr)
		}
	}
	if q.deleteItemApiStmt != nil {
		if cerr := q.deleteItemApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemApiStmt: %w", cerr)
		}
	}
	if q.deleteItemFolderStmt != nil {
		if cerr := q.deleteItemFolderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemFolderStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteWorkspaceStmt != nil {
		if cerr := q.deleteWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorkspaceStmt: %w", cerr)
		}
	}
	if q.deleteWorkspaceUserStmt != nil {
		if cerr := q.deleteWorkspaceUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorkspaceUserStmt: %w", cerr)
		}
	}
	if q.getCollectionStmt != nil {
		if cerr := q.getCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCollectionStmt: %w", cerr)
		}
	}
	if q.getCollectionByOwnerIDStmt != nil {
		if cerr := q.getCollectionByOwnerIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCollectionByOwnerIDStmt: %w", cerr)
		}
	}
	if q.getCollectionByPlatformIDandTypeStmt != nil {
		if cerr := q.getCollectionByPlatformIDandTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCollectionByPlatformIDandTypeStmt: %w", cerr)
		}
	}
	if q.getCollectionOwnerIDStmt != nil {
		if cerr := q.getCollectionOwnerIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCollectionOwnerIDStmt: %w", cerr)
		}
	}
	if q.getItemApiStmt != nil {
		if cerr := q.getItemApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemApiStmt: %w", cerr)
		}
	}
	if q.getItemApiOwnerIDStmt != nil {
		if cerr := q.getItemApiOwnerIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemApiOwnerIDStmt: %w", cerr)
		}
	}
	if q.getItemFolderStmt != nil {
		if cerr := q.getItemFolderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemFolderStmt: %w", cerr)
		}
	}
	if q.getItemFolderByCollectionIDStmt != nil {
		if cerr := q.getItemFolderByCollectionIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemFolderByCollectionIDStmt: %w", cerr)
		}
	}
	if q.getItemFolderOwnerIDStmt != nil {
		if cerr := q.getItemFolderOwnerIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemFolderOwnerIDStmt: %w", cerr)
		}
	}
	if q.getItemsApiByCollectionIDStmt != nil {
		if cerr := q.getItemsApiByCollectionIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemsApiByCollectionIDStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByEmailAndProviderTypeStmt != nil {
		if cerr := q.getUserByEmailAndProviderTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailAndProviderTypeStmt: %w", cerr)
		}
	}
	if q.getUserByProviderIDandTypeStmt != nil {
		if cerr := q.getUserByProviderIDandTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByProviderIDandTypeStmt: %w", cerr)
		}
	}
	if q.getWorkspaceStmt != nil {
		if cerr := q.getWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceStmt: %w", cerr)
		}
	}
	if q.getWorkspaceByUserIDStmt != nil {
		if cerr := q.getWorkspaceByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceByUserIDStmt: %w", cerr)
		}
	}
	if q.getWorkspaceByUserIDandWorkspaceIDStmt != nil {
		if cerr := q.getWorkspaceByUserIDandWorkspaceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceByUserIDandWorkspaceIDStmt: %w", cerr)
		}
	}
	if q.getWorkspaceUserStmt != nil {
		if cerr := q.getWorkspaceUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceUserStmt: %w", cerr)
		}
	}
	if q.getWorkspaceUserByUserIDStmt != nil {
		if cerr := q.getWorkspaceUserByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceUserByUserIDStmt: %w", cerr)
		}
	}
	if q.getWorkspaceUserByWorkspaceIDStmt != nil {
		if cerr := q.getWorkspaceUserByWorkspaceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceUserByWorkspaceIDStmt: %w", cerr)
		}
	}
	if q.getWorkspacesByUserIDStmt != nil {
		if cerr := q.getWorkspacesByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspacesByUserIDStmt: %w", cerr)
		}
	}
	if q.updateCollectionStmt != nil {
		if cerr := q.updateCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCollectionStmt: %w", cerr)
		}
	}
	if q.updateItemApiStmt != nil {
		if cerr := q.updateItemApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemApiStmt: %w", cerr)
		}
	}
	if q.updateItemFolderStmt != nil {
		if cerr := q.updateItemFolderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemFolderStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateWorkspaceStmt != nil {
		if cerr := q.updateWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorkspaceStmt: %w", cerr)
		}
	}
	if q.updateWorkspaceUserStmt != nil {
		if cerr := q.updateWorkspaceUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorkspaceUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                     DBTX
	tx                                     *sql.Tx
	createCollectionStmt                   *sql.Stmt
	createItemApiStmt                      *sql.Stmt
	createItemFolderStmt                   *sql.Stmt
	createUserStmt                         *sql.Stmt
	createWorkspaceStmt                    *sql.Stmt
	createWorkspaceUserStmt                *sql.Stmt
	deleteCollectionStmt                   *sql.Stmt
	deleteItemApiStmt                      *sql.Stmt
	deleteItemFolderStmt                   *sql.Stmt
	deleteUserStmt                         *sql.Stmt
	deleteWorkspaceStmt                    *sql.Stmt
	deleteWorkspaceUserStmt                *sql.Stmt
	getCollectionStmt                      *sql.Stmt
	getCollectionByOwnerIDStmt             *sql.Stmt
	getCollectionByPlatformIDandTypeStmt   *sql.Stmt
	getCollectionOwnerIDStmt               *sql.Stmt
	getItemApiStmt                         *sql.Stmt
	getItemApiOwnerIDStmt                  *sql.Stmt
	getItemFolderStmt                      *sql.Stmt
	getItemFolderByCollectionIDStmt        *sql.Stmt
	getItemFolderOwnerIDStmt               *sql.Stmt
	getItemsApiByCollectionIDStmt          *sql.Stmt
	getUserStmt                            *sql.Stmt
	getUserByEmailStmt                     *sql.Stmt
	getUserByEmailAndProviderTypeStmt      *sql.Stmt
	getUserByProviderIDandTypeStmt         *sql.Stmt
	getWorkspaceStmt                       *sql.Stmt
	getWorkspaceByUserIDStmt               *sql.Stmt
	getWorkspaceByUserIDandWorkspaceIDStmt *sql.Stmt
	getWorkspaceUserStmt                   *sql.Stmt
	getWorkspaceUserByUserIDStmt           *sql.Stmt
	getWorkspaceUserByWorkspaceIDStmt      *sql.Stmt
	getWorkspacesByUserIDStmt              *sql.Stmt
	updateCollectionStmt                   *sql.Stmt
	updateItemApiStmt                      *sql.Stmt
	updateItemFolderStmt                   *sql.Stmt
	updateUserStmt                         *sql.Stmt
	updateWorkspaceStmt                    *sql.Stmt
	updateWorkspaceUserStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                     tx,
		tx:                                     tx,
		createCollectionStmt:                   q.createCollectionStmt,
		createItemApiStmt:                      q.createItemApiStmt,
		createItemFolderStmt:                   q.createItemFolderStmt,
		createUserStmt:                         q.createUserStmt,
		createWorkspaceStmt:                    q.createWorkspaceStmt,
		createWorkspaceUserStmt:                q.createWorkspaceUserStmt,
		deleteCollectionStmt:                   q.deleteCollectionStmt,
		deleteItemApiStmt:                      q.deleteItemApiStmt,
		deleteItemFolderStmt:                   q.deleteItemFolderStmt,
		deleteUserStmt:                         q.deleteUserStmt,
		deleteWorkspaceStmt:                    q.deleteWorkspaceStmt,
		deleteWorkspaceUserStmt:                q.deleteWorkspaceUserStmt,
		getCollectionStmt:                      q.getCollectionStmt,
		getCollectionByOwnerIDStmt:             q.getCollectionByOwnerIDStmt,
		getCollectionByPlatformIDandTypeStmt:   q.getCollectionByPlatformIDandTypeStmt,
		getCollectionOwnerIDStmt:               q.getCollectionOwnerIDStmt,
		getItemApiStmt:                         q.getItemApiStmt,
		getItemApiOwnerIDStmt:                  q.getItemApiOwnerIDStmt,
		getItemFolderStmt:                      q.getItemFolderStmt,
		getItemFolderByCollectionIDStmt:        q.getItemFolderByCollectionIDStmt,
		getItemFolderOwnerIDStmt:               q.getItemFolderOwnerIDStmt,
		getItemsApiByCollectionIDStmt:          q.getItemsApiByCollectionIDStmt,
		getUserStmt:                            q.getUserStmt,
		getUserByEmailStmt:                     q.getUserByEmailStmt,
		getUserByEmailAndProviderTypeStmt:      q.getUserByEmailAndProviderTypeStmt,
		getUserByProviderIDandTypeStmt:         q.getUserByProviderIDandTypeStmt,
		getWorkspaceStmt:                       q.getWorkspaceStmt,
		getWorkspaceByUserIDStmt:               q.getWorkspaceByUserIDStmt,
		getWorkspaceByUserIDandWorkspaceIDStmt: q.getWorkspaceByUserIDandWorkspaceIDStmt,
		getWorkspaceUserStmt:                   q.getWorkspaceUserStmt,
		getWorkspaceUserByUserIDStmt:           q.getWorkspaceUserByUserIDStmt,
		getWorkspaceUserByWorkspaceIDStmt:      q.getWorkspaceUserByWorkspaceIDStmt,
		getWorkspacesByUserIDStmt:              q.getWorkspacesByUserIDStmt,
		updateCollectionStmt:                   q.updateCollectionStmt,
		updateItemApiStmt:                      q.updateItemApiStmt,
		updateItemFolderStmt:                   q.updateItemFolderStmt,
		updateUserStmt:                         q.updateUserStmt,
		updateWorkspaceStmt:                    q.updateWorkspaceStmt,
		updateWorkspaceUserStmt:                q.updateWorkspaceUserStmt,
	}
}
