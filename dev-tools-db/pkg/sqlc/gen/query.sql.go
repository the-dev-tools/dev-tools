// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package gen

import (
	"context"
	"database/sql"
	"time"

	mitemapiexample "dev-tools-backend/pkg/model/mitemapiexample"
	mresultapi "dev-tools-backend/pkg/model/result/mresultapi"
	ulid "github.com/oklog/ulid/v2"
)

const checkIFWorkspaceUserExists = `-- name: CheckIFWorkspaceUserExists :one
SELECT EXISTS(SELECT 1 FROM workspaces_users WHERE workspace_id = ? AND user_id = ? LIMIT 1)
`

type CheckIFWorkspaceUserExistsParams struct {
	WorkspaceID ulid.ULID
	UserID      ulid.ULID
}

// WorkspaceUsers
func (q *Queries) CheckIFWorkspaceUserExists(ctx context.Context, arg CheckIFWorkspaceUserExistsParams) (int64, error) {
	row := q.queryRow(ctx, q.checkIFWorkspaceUserExistsStmt, checkIFWorkspaceUserExists, arg.WorkspaceID, arg.UserID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const createCollection = `-- name: CreateCollection :exec
INSERT INTO collections (id, owner_id, name, created, updated)
VALUES (?, ?, ?, ?, ?)
`

type CreateCollectionParams struct {
	ID      ulid.ULID
	OwnerID ulid.ULID
	Name    string
	Created time.Time
	Updated time.Time
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) error {
	_, err := q.exec(ctx, q.createCollectionStmt, createCollection,
		arg.ID,
		arg.OwnerID,
		arg.Name,
		arg.Created,
		arg.Updated,
	)
	return err
}

const createItemApi = `-- name: CreateItemApi :exec
INSERT INTO item_api (id, collection_id, parent_id, name, url, method)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateItemApiParams struct {
	ID           ulid.ULID
	CollectionID ulid.ULID
	ParentID     *ulid.ULID
	Name         string
	Url          string
	Method       string
}

func (q *Queries) CreateItemApi(ctx context.Context, arg CreateItemApiParams) error {
	_, err := q.exec(ctx, q.createItemApiStmt, createItemApi,
		arg.ID,
		arg.CollectionID,
		arg.ParentID,
		arg.Name,
		arg.Url,
		arg.Method,
	)
	return err
}

const createItemApiBulk = `-- name: CreateItemApiBulk :exec
INSERT INTO item_api (id, collection_id, parent_id, name, url, method)
VALUES (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?), (?, ?, ?, ?, ?, ?)
`

type CreateItemApiBulkParams struct {
	ID             ulid.ULID
	CollectionID   ulid.ULID
	ParentID       *ulid.ULID
	Name           string
	Url            string
	Method         string
	ID_2           ulid.ULID
	CollectionID_2 ulid.ULID
	ParentID_2     *ulid.ULID
	Name_2         string
	Url_2          string
	Method_2       string
	ID_3           ulid.ULID
	CollectionID_3 ulid.ULID
	ParentID_3     *ulid.ULID
	Name_3         string
	Url_3          string
	Method_3       string
}

func (q *Queries) CreateItemApiBulk(ctx context.Context, arg CreateItemApiBulkParams) error {
	_, err := q.exec(ctx, q.createItemApiBulkStmt, createItemApiBulk,
		arg.ID,
		arg.CollectionID,
		arg.ParentID,
		arg.Name,
		arg.Url,
		arg.Method,
		arg.ID_2,
		arg.CollectionID_2,
		arg.ParentID_2,
		arg.Name_2,
		arg.Url_2,
		arg.Method_2,
		arg.ID_3,
		arg.CollectionID_3,
		arg.ParentID_3,
		arg.Name_3,
		arg.Url_3,
		arg.Method_3,
	)
	return err
}

const createItemApiExample = `-- name: CreateItemApiExample :exec
INSERT INTO item_api_example 
        (id, item_api_id, collection_id, default, name, headers, query, body)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemApiExampleParams struct {
	ID           ulid.ULID
	ItemApiID    ulid.ULID
	CollectionID ulid.ULID
	Default      bool
	Name         string
	Headers      mitemapiexample.Headers
	Query        mitemapiexample.Query
	Body         []byte
}

func (q *Queries) CreateItemApiExample(ctx context.Context, arg CreateItemApiExampleParams) error {
	_, err := q.exec(ctx, q.createItemApiExampleStmt, createItemApiExample,
		arg.ID,
		arg.ItemApiID,
		arg.CollectionID,
		arg.Default,
		arg.Name,
		arg.Headers,
		arg.Query,
		arg.Body,
	)
	return err
}

const createItemFolder = `-- name: CreateItemFolder :exec
INSERT INTO item_folder (id, name, parent_id, collection_id)
VALUES (?, ?, ?, ?)
`

type CreateItemFolderParams struct {
	ID           ulid.ULID
	Name         string
	ParentID     *ulid.ULID
	CollectionID ulid.ULID
}

func (q *Queries) CreateItemFolder(ctx context.Context, arg CreateItemFolderParams) error {
	_, err := q.exec(ctx, q.createItemFolderStmt, createItemFolder,
		arg.ID,
		arg.Name,
		arg.ParentID,
		arg.CollectionID,
	)
	return err
}

const createItemFolderBulk = `-- name: CreateItemFolderBulk :exec
INSERT INTO item_folder (id, name, parent_id, collection_id)
VALUES (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?)
`

type CreateItemFolderBulkParams struct {
	ID             ulid.ULID
	Name           string
	ParentID       *ulid.ULID
	CollectionID   ulid.ULID
	ID_2           ulid.ULID
	Name_2         string
	ParentID_2     *ulid.ULID
	CollectionID_2 ulid.ULID
	ID_3           ulid.ULID
	Name_3         string
	ParentID_3     *ulid.ULID
	CollectionID_3 ulid.ULID
}

func (q *Queries) CreateItemFolderBulk(ctx context.Context, arg CreateItemFolderBulkParams) error {
	_, err := q.exec(ctx, q.createItemFolderBulkStmt, createItemFolderBulk,
		arg.ID,
		arg.Name,
		arg.ParentID,
		arg.CollectionID,
		arg.ID_2,
		arg.Name_2,
		arg.ParentID_2,
		arg.CollectionID_2,
		arg.ID_3,
		arg.Name_3,
		arg.ParentID_3,
		arg.CollectionID_3,
	)
	return err
}

const createResultApi = `-- name: CreateResultApi :exec
INSERT INTO result_api (id, trigger_type, trigger_by, name, status, time, duration, http_resp)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateResultApiParams struct {
	ID          ulid.ULID
	TriggerType mresultapi.TriggerType
	TriggerBy   ulid.ULID
	Name        string
	Status      string
	Time        time.Time
	Duration    int64
	HttpResp    mresultapi.HttpResp
}

func (q *Queries) CreateResultApi(ctx context.Context, arg CreateResultApiParams) error {
	_, err := q.exec(ctx, q.createResultApiStmt, createResultApi,
		arg.ID,
		arg.TriggerType,
		arg.TriggerBy,
		arg.Name,
		arg.Status,
		arg.Time,
		arg.Duration,
		arg.HttpResp,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users 
(id, email, password_hash, provider_type, provider_id)
VALUES (?, ?, ?, ?, ?)
RETURNING id, email, password_hash, provider_type, provider_id, status
`

type CreateUserParams struct {
	ID           ulid.ULID
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.ProviderType,
		arg.ProviderID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
		&i.Status,
	)
	return i, err
}

const createWorkspace = `-- name: CreateWorkspace :exec
INSERT INTO workspaces (id, name, created, updated)
VALUES (?, ?, ? , ?)
`

type CreateWorkspaceParams struct {
	ID      ulid.ULID
	Name    string
	Created time.Time
	Updated time.Time
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) error {
	_, err := q.exec(ctx, q.createWorkspaceStmt, createWorkspace,
		arg.ID,
		arg.Name,
		arg.Created,
		arg.Updated,
	)
	return err
}

const createWorkspaceUser = `-- name: CreateWorkspaceUser :exec
INSERT INTO workspaces_users (id, workspace_id, user_id, role)
VALUES (?, ?, ?, ?)
`

type CreateWorkspaceUserParams struct {
	ID          ulid.ULID
	WorkspaceID ulid.ULID
	UserID      ulid.ULID
	Role        int8
}

func (q *Queries) CreateWorkspaceUser(ctx context.Context, arg CreateWorkspaceUserParams) error {
	_, err := q.exec(ctx, q.createWorkspaceUserStmt, createWorkspaceUser,
		arg.ID,
		arg.WorkspaceID,
		arg.UserID,
		arg.Role,
	)
	return err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections 
WHERE id = ?
`

func (q *Queries) DeleteCollection(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteCollectionStmt, deleteCollection, id)
	return err
}

const deleteItemApi = `-- name: DeleteItemApi :exec
DELETE FROM item_api
WHERE id = ?
`

func (q *Queries) DeleteItemApi(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteItemApiStmt, deleteItemApi, id)
	return err
}

const deleteItemApiExample = `-- name: DeleteItemApiExample :exec
DELETE FROM item_api_example
WHERE id = ?
`

func (q *Queries) DeleteItemApiExample(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteItemApiExampleStmt, deleteItemApiExample, id)
	return err
}

const deleteItemFolder = `-- name: DeleteItemFolder :exec
DELETE FROM item_folder
WHERE id = ?
`

func (q *Queries) DeleteItemFolder(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteItemFolderStmt, deleteItemFolder, id)
	return err
}

const deleteResultApi = `-- name: DeleteResultApi :exec
DELETE FROM result_api WHERE id = ?
`

func (q *Queries) DeleteResultApi(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteResultApiStmt, deleteResultApi, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM workspaces
WHERE id = ?
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteWorkspaceStmt, deleteWorkspace, id)
	return err
}

const deleteWorkspaceUser = `-- name: DeleteWorkspaceUser :exec
DELETE FROM workspaces_users
WHERE id = ?
`

func (q *Queries) DeleteWorkspaceUser(ctx context.Context, id ulid.ULID) error {
	_, err := q.exec(ctx, q.deleteWorkspaceUserStmt, deleteWorkspaceUser, id)
	return err
}

const getCollection = `-- name: GetCollection :one

SELECT id, owner_id, name, created, updated
FROM collections
WHERE id = ?
LIMIT 1
`

// Collections
func (q *Queries) GetCollection(ctx context.Context, id ulid.ULID) (Collection, error) {
	row := q.queryRow(ctx, q.getCollectionStmt, getCollection, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getCollectionByOwnerID = `-- name: GetCollectionByOwnerID :many
SELECT id, owner_id, name, created, updated
FROM collections
WHERE owner_id = ?
`

func (q *Queries) GetCollectionByOwnerID(ctx context.Context, ownerID ulid.ULID) ([]Collection, error) {
	rows, err := q.query(ctx, q.getCollectionByOwnerIDStmt, getCollectionByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionByPlatformIDandType = `-- name: GetCollectionByPlatformIDandType :many
SELECT id, owner_id, name, created, updated
FROM collections
WHERE id = ?
`

func (q *Queries) GetCollectionByPlatformIDandType(ctx context.Context, id ulid.ULID) ([]Collection, error) {
	rows, err := q.query(ctx, q.getCollectionByPlatformIDandTypeStmt, getCollectionByPlatformIDandType, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionOwnerID = `-- name: GetCollectionOwnerID :one
SELECT owner_id
FROM collections
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCollectionOwnerID(ctx context.Context, id ulid.ULID) (ulid.ULID, error) {
	row := q.queryRow(ctx, q.getCollectionOwnerIDStmt, getCollectionOwnerID, id)
	var owner_id ulid.ULID
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getItemApi = `-- name: GetItemApi :one


SELECT id, collection_id, parent_id, name, url, method
FROM item_api
WHERE id = ? LIMIT 1
`

type GetItemApiRow struct {
	ID           ulid.ULID
	CollectionID ulid.ULID
	ParentID     *ulid.ULID
	Name         string
	Url          string
	Method       string
}

// This file is the source of truth for saas application's schema
//
// ItemApi
func (q *Queries) GetItemApi(ctx context.Context, id ulid.ULID) (GetItemApiRow, error) {
	row := q.queryRow(ctx, q.getItemApiStmt, getItemApi, id)
	var i GetItemApiRow
	err := row.Scan(
		&i.ID,
		&i.CollectionID,
		&i.ParentID,
		&i.Name,
		&i.Url,
		&i.Method,
	)
	return i, err
}

const getItemApiExample = `-- name: GetItemApiExample :one

SELECT 
        id, 
        item_api_id, 
        collection_id, 
        default, 
        name, 
        headers, 
        query, 
        body, 
        created, 
        updated 
FROM item_api_example WHERE id = ? LIMIT 1
`

// Item Api Example
func (q *Queries) GetItemApiExample(ctx context.Context, id ulid.ULID) (ItemApiExample, error) {
	row := q.queryRow(ctx, q.getItemApiExampleStmt, getItemApiExample, id)
	var i ItemApiExample
	err := row.Scan(
		&i.ID,
		&i.ItemApiID,
		&i.CollectionID,
		&i.Default,
		&i.Name,
		&i.Headers,
		&i.Query,
		&i.Body,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getItemApiExampleDefault = `-- name: GetItemApiExampleDefault :one
SELECT 
        id, 
        item_api_id, 
        collection_id, 
        default, 
        name, 
        headers, 
        query, 
        body, 
        created, 
        updated 
FROM item_api_example WHERE item_api_id = ? AND default = true LIMIT 1
`

func (q *Queries) GetItemApiExampleDefault(ctx context.Context, itemApiID ulid.ULID) (ItemApiExample, error) {
	row := q.queryRow(ctx, q.getItemApiExampleDefaultStmt, getItemApiExampleDefault, itemApiID)
	var i ItemApiExample
	err := row.Scan(
		&i.ID,
		&i.ItemApiID,
		&i.CollectionID,
		&i.Default,
		&i.Name,
		&i.Headers,
		&i.Query,
		&i.Body,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getItemApiExamples = `-- name: GetItemApiExamples :many
SELECT 
        id, 
        item_api_id, 
        collection_id, 
        default, 
        name, 
        headers, 
        query, 
        body, 
        created, 
        updated 
FROM item_api_example WHERE item_api_id = ? AND default = false
`

func (q *Queries) GetItemApiExamples(ctx context.Context, itemApiID ulid.ULID) ([]ItemApiExample, error) {
	rows, err := q.query(ctx, q.getItemApiExamplesStmt, getItemApiExamples, itemApiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemApiExample
	for rows.Next() {
		var i ItemApiExample
		if err := rows.Scan(
			&i.ID,
			&i.ItemApiID,
			&i.CollectionID,
			&i.Default,
			&i.Name,
			&i.Headers,
			&i.Query,
			&i.Body,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemApiOwnerID = `-- name: GetItemApiOwnerID :one
SELECT c.owner_id FROM collections c
INNER JOIN item_api i ON c.id = i.collection_id
WHERE i.id = ? LIMIT 1
`

func (q *Queries) GetItemApiOwnerID(ctx context.Context, id ulid.ULID) (ulid.ULID, error) {
	row := q.queryRow(ctx, q.getItemApiOwnerIDStmt, getItemApiOwnerID, id)
	var owner_id ulid.ULID
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getItemFolder = `-- name: GetItemFolder :one

SELECT id, name, parent_id, collection_id
FROM item_folder
WHERE id = ? LIMIT 1
`

type GetItemFolderRow struct {
	ID           ulid.ULID
	Name         string
	ParentID     *ulid.ULID
	CollectionID ulid.ULID
}

// ItemFolder
func (q *Queries) GetItemFolder(ctx context.Context, id ulid.ULID) (GetItemFolderRow, error) {
	row := q.queryRow(ctx, q.getItemFolderStmt, getItemFolder, id)
	var i GetItemFolderRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.CollectionID,
	)
	return i, err
}

const getItemFolderByCollectionID = `-- name: GetItemFolderByCollectionID :many
SELECT id, name, parent_id, collection_id
FROM item_folder
WHERE collection_id = ?
`

type GetItemFolderByCollectionIDRow struct {
	ID           ulid.ULID
	Name         string
	ParentID     *ulid.ULID
	CollectionID ulid.ULID
}

func (q *Queries) GetItemFolderByCollectionID(ctx context.Context, collectionID ulid.ULID) ([]GetItemFolderByCollectionIDRow, error) {
	rows, err := q.query(ctx, q.getItemFolderByCollectionIDStmt, getItemFolderByCollectionID, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemFolderByCollectionIDRow
	for rows.Next() {
		var i GetItemFolderByCollectionIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.CollectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemFolderOwnerID = `-- name: GetItemFolderOwnerID :one
SELECT c.owner_id FROM collections c
INNER JOIN item_folder i ON c.id = i.collection_id
WHERE i.id = ? LIMIT 1
`

func (q *Queries) GetItemFolderOwnerID(ctx context.Context, id ulid.ULID) (ulid.ULID, error) {
	row := q.queryRow(ctx, q.getItemFolderOwnerIDStmt, getItemFolderOwnerID, id)
	var owner_id ulid.ULID
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getItemsApiByCollectionID = `-- name: GetItemsApiByCollectionID :many
SELECT id, collection_id, parent_id, name, url, method
FROM item_api
WHERE collection_id = ?
`

type GetItemsApiByCollectionIDRow struct {
	ID           ulid.ULID
	CollectionID ulid.ULID
	ParentID     *ulid.ULID
	Name         string
	Url          string
	Method       string
}

func (q *Queries) GetItemsApiByCollectionID(ctx context.Context, collectionID ulid.ULID) ([]GetItemsApiByCollectionIDRow, error) {
	rows, err := q.query(ctx, q.getItemsApiByCollectionIDStmt, getItemsApiByCollectionID, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemsApiByCollectionIDRow
	for rows.Next() {
		var i GetItemsApiByCollectionIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CollectionID,
			&i.ParentID,
			&i.Name,
			&i.Url,
			&i.Method,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultApi = `-- name: GetResultApi :one

SELECT id, trigger_type, trigger_by, name, status, time, duration, http_resp FROM result_api WHERE id = ? LIMIT 1
`

// ResultAPI
func (q *Queries) GetResultApi(ctx context.Context, id ulid.ULID) (ResultApi, error) {
	row := q.queryRow(ctx, q.getResultApiStmt, getResultApi, id)
	var i ResultApi
	err := row.Scan(
		&i.ID,
		&i.TriggerType,
		&i.TriggerBy,
		&i.Name,
		&i.Status,
		&i.Time,
		&i.Duration,
		&i.HttpResp,
	)
	return i, err
}

const getResultApiByTriggerBy = `-- name: GetResultApiByTriggerBy :many
SELECT id, trigger_type, trigger_by, name, status, time, duration, http_resp FROM result_api WHERE trigger_by = ?
`

func (q *Queries) GetResultApiByTriggerBy(ctx context.Context, triggerBy ulid.ULID) ([]ResultApi, error) {
	rows, err := q.query(ctx, q.getResultApiByTriggerByStmt, getResultApiByTriggerBy, triggerBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResultApi
	for rows.Next() {
		var i ResultApi
		if err := rows.Scan(
			&i.ID,
			&i.TriggerType,
			&i.TriggerBy,
			&i.Name,
			&i.Status,
			&i.Time,
			&i.Duration,
			&i.HttpResp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultApiByTriggerByAndTriggerType = `-- name: GetResultApiByTriggerByAndTriggerType :many
SELECT id, trigger_type, trigger_by, name, status, time, duration, http_resp FROM result_api WHERE trigger_by = ? AND trigger_type = ?
`

type GetResultApiByTriggerByAndTriggerTypeParams struct {
	TriggerBy   ulid.ULID
	TriggerType mresultapi.TriggerType
}

func (q *Queries) GetResultApiByTriggerByAndTriggerType(ctx context.Context, arg GetResultApiByTriggerByAndTriggerTypeParams) ([]ResultApi, error) {
	rows, err := q.query(ctx, q.getResultApiByTriggerByAndTriggerTypeStmt, getResultApiByTriggerByAndTriggerType, arg.TriggerBy, arg.TriggerType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResultApi
	for rows.Next() {
		var i ResultApi
		if err := rows.Scan(
			&i.ID,
			&i.TriggerType,
			&i.TriggerBy,
			&i.Name,
			&i.Status,
			&i.Time,
			&i.Duration,
			&i.HttpResp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one

SELECT
    id,
    email,
    password_hash,
    provider_type,
    provider_id
FROM users WHERE id = ? LIMIT 1
`

type GetUserRow struct {
	ID           ulid.ULID
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

// Users
func (q *Queries) GetUser(ctx context.Context, id ulid.ULID) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id,
    email,
    password_hash,
    provider_type,
    provider_id
FROM users WHERE email = ? LIMIT 1
`

type GetUserByEmailRow struct {
	ID           ulid.ULID
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getUserByEmailAndProviderType = `-- name: GetUserByEmailAndProviderType :one
SELECT
        id,
        email,
        password_hash,
        provider_type,
        provider_id
FROM users WHERE email = ? AND provider_type = ? LIMIT 1
`

type GetUserByEmailAndProviderTypeParams struct {
	Email        string
	ProviderType int8
}

type GetUserByEmailAndProviderTypeRow struct {
	ID           ulid.ULID
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) GetUserByEmailAndProviderType(ctx context.Context, arg GetUserByEmailAndProviderTypeParams) (GetUserByEmailAndProviderTypeRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailAndProviderTypeStmt, getUserByEmailAndProviderType, arg.Email, arg.ProviderType)
	var i GetUserByEmailAndProviderTypeRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getUserByProviderIDandType = `-- name: GetUserByProviderIDandType :one
SELECT
    id,
    email,
    password_hash,
    provider_type,
    provider_id
FROM users WHERE provider_id = ? AND provider_type = ? LIMIT 1
`

type GetUserByProviderIDandTypeParams struct {
	ProviderID   sql.NullString
	ProviderType int8
}

type GetUserByProviderIDandTypeRow struct {
	ID           ulid.ULID
	Email        string
	PasswordHash []byte
	ProviderType int8
	ProviderID   sql.NullString
}

func (q *Queries) GetUserByProviderIDandType(ctx context.Context, arg GetUserByProviderIDandTypeParams) (GetUserByProviderIDandTypeRow, error) {
	row := q.queryRow(ctx, q.getUserByProviderIDandTypeStmt, getUserByProviderIDandType, arg.ProviderID, arg.ProviderType)
	var i GetUserByProviderIDandTypeRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProviderType,
		&i.ProviderID,
	)
	return i, err
}

const getWorkspace = `-- name: GetWorkspace :one

SELECT id, name, created, updated
FROM workspaces
WHERE id = ? LIMIT 1
`

// Workspaces
func (q *Queries) GetWorkspace(ctx context.Context, id ulid.ULID) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceStmt, getWorkspace, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getWorkspaceByUserID = `-- name: GetWorkspaceByUserID :one
SELECT id, name, created, updated FROM workspaces WHERE id = (SELECT workspace_id FROM workspaces_users WHERE user_id = ? LIMIT 1) LIMIT 1
`

func (q *Queries) GetWorkspaceByUserID(ctx context.Context, userID ulid.ULID) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceByUserIDStmt, getWorkspaceByUserID, userID)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getWorkspaceByUserIDandWorkspaceID = `-- name: GetWorkspaceByUserIDandWorkspaceID :one
SELECT id, name, created, updated FROM workspaces WHERE id = (SELECT workspace_id FROM workspaces_users WHERE workspace_id = ? AND user_id = ? LIMIT 1) LIMIT 1
`

type GetWorkspaceByUserIDandWorkspaceIDParams struct {
	WorkspaceID ulid.ULID
	UserID      ulid.ULID
}

func (q *Queries) GetWorkspaceByUserIDandWorkspaceID(ctx context.Context, arg GetWorkspaceByUserIDandWorkspaceIDParams) (Workspace, error) {
	row := q.queryRow(ctx, q.getWorkspaceByUserIDandWorkspaceIDStmt, getWorkspaceByUserIDandWorkspaceID, arg.WorkspaceID, arg.UserID)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getWorkspaceUser = `-- name: GetWorkspaceUser :one
SELECT id, workspace_id, user_id, role FROM workspaces_users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetWorkspaceUser(ctx context.Context, id ulid.ULID) (WorkspacesUser, error) {
	row := q.queryRow(ctx, q.getWorkspaceUserStmt, getWorkspaceUser, id)
	var i WorkspacesUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.UserID,
		&i.Role,
	)
	return i, err
}

const getWorkspaceUserByUserID = `-- name: GetWorkspaceUserByUserID :many
SELECT id, workspace_id, user_id, role FROM workspaces_users
WHERE user_id = ?
`

func (q *Queries) GetWorkspaceUserByUserID(ctx context.Context, userID ulid.ULID) ([]WorkspacesUser, error) {
	rows, err := q.query(ctx, q.getWorkspaceUserByUserIDStmt, getWorkspaceUserByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspacesUser
	for rows.Next() {
		var i WorkspacesUser
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.UserID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceUserByWorkspaceID = `-- name: GetWorkspaceUserByWorkspaceID :many
SELECT id, workspace_id, user_id, role FROM workspaces_users
WHERE workspace_id = ?
`

func (q *Queries) GetWorkspaceUserByWorkspaceID(ctx context.Context, workspaceID ulid.ULID) ([]WorkspacesUser, error) {
	rows, err := q.query(ctx, q.getWorkspaceUserByWorkspaceIDStmt, getWorkspaceUserByWorkspaceID, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspacesUser
	for rows.Next() {
		var i WorkspacesUser
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.UserID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceUserByWorkspaceIDAndUserID = `-- name: GetWorkspaceUserByWorkspaceIDAndUserID :one
SELECT id, workspace_id, user_id, role FROM workspaces_users WHERE workspace_id = ? AND user_id = ? LIMIT 1
`

type GetWorkspaceUserByWorkspaceIDAndUserIDParams struct {
	WorkspaceID ulid.ULID
	UserID      ulid.ULID
}

func (q *Queries) GetWorkspaceUserByWorkspaceIDAndUserID(ctx context.Context, arg GetWorkspaceUserByWorkspaceIDAndUserIDParams) (WorkspacesUser, error) {
	row := q.queryRow(ctx, q.getWorkspaceUserByWorkspaceIDAndUserIDStmt, getWorkspaceUserByWorkspaceIDAndUserID, arg.WorkspaceID, arg.UserID)
	var i WorkspacesUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.UserID,
		&i.Role,
	)
	return i, err
}

const getWorkspacesByUserID = `-- name: GetWorkspacesByUserID :many
SELECT id, name, created, updated FROM workspaces WHERE id IN (SELECT workspace_id FROM workspaces_users WHERE user_id = ?)
`

func (q *Queries) GetWorkspacesByUserID(ctx context.Context, userID ulid.ULID) ([]Workspace, error) {
	rows, err := q.query(ctx, q.getWorkspacesByUserIDStmt, getWorkspacesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollection = `-- name: UpdateCollection :exec
UPDATE collections 
SET owner_id = ?, name = ?
WHERE id = ?
`

type UpdateCollectionParams struct {
	OwnerID ulid.ULID
	Name    string
	ID      ulid.ULID
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) error {
	_, err := q.exec(ctx, q.updateCollectionStmt, updateCollection, arg.OwnerID, arg.Name, arg.ID)
	return err
}

const updateItemApi = `-- name: UpdateItemApi :exec
UPDATE item_api
SET collection_id = ?, parent_id = ?, name = ?, url = ?, method = ?
WHERE id = ?
`

type UpdateItemApiParams struct {
	CollectionID ulid.ULID
	ParentID     *ulid.ULID
	Name         string
	Url          string
	Method       string
	ID           ulid.ULID
}

func (q *Queries) UpdateItemApi(ctx context.Context, arg UpdateItemApiParams) error {
	_, err := q.exec(ctx, q.updateItemApiStmt, updateItemApi,
		arg.CollectionID,
		arg.ParentID,
		arg.Name,
		arg.Url,
		arg.Method,
		arg.ID,
	)
	return err
}

const updateItemApiExample = `-- name: UpdateItemApiExample :exec
UPDATE item_api_example SET
name = ?, headers = ?, query = ?, body = ?
WHERE id = ?
`

type UpdateItemApiExampleParams struct {
	Name    string
	Headers mitemapiexample.Headers
	Query   mitemapiexample.Query
	Body    []byte
	ID      ulid.ULID
}

func (q *Queries) UpdateItemApiExample(ctx context.Context, arg UpdateItemApiExampleParams) error {
	_, err := q.exec(ctx, q.updateItemApiExampleStmt, updateItemApiExample,
		arg.Name,
		arg.Headers,
		arg.Query,
		arg.Body,
		arg.ID,
	)
	return err
}

const updateItemFolder = `-- name: UpdateItemFolder :exec
UPDATE item_folder
SET name = ?
WHERE id = ?
`

type UpdateItemFolderParams struct {
	Name string
	ID   ulid.ULID
}

func (q *Queries) UpdateItemFolder(ctx context.Context, arg UpdateItemFolderParams) error {
	_, err := q.exec(ctx, q.updateItemFolderStmt, updateItemFolder, arg.Name, arg.ID)
	return err
}

const updateResultApi = `-- name: UpdateResultApi :exec
UPDATE result_api SET name = ?, status = ?, time = ?, duration = ?, http_resp = ? WHERE id = ?
`

type UpdateResultApiParams struct {
	Name     string
	Status   string
	Time     time.Time
	Duration int64
	HttpResp mresultapi.HttpResp
	ID       ulid.ULID
}

func (q *Queries) UpdateResultApi(ctx context.Context, arg UpdateResultApiParams) error {
	_, err := q.exec(ctx, q.updateResultApiStmt, updateResultApi,
		arg.Name,
		arg.Status,
		arg.Time,
		arg.Duration,
		arg.HttpResp,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET email = ?,
password_hash = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Email        string
	PasswordHash []byte
	ID           ulid.ULID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser, arg.Email, arg.PasswordHash, arg.ID)
	return err
}

const updateWorkspace = `-- name: UpdateWorkspace :exec
UPDATE workspaces
SET name = ?
WHERE id = ?
`

type UpdateWorkspaceParams struct {
	Name string
	ID   ulid.ULID
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) error {
	_, err := q.exec(ctx, q.updateWorkspaceStmt, updateWorkspace, arg.Name, arg.ID)
	return err
}

const updateWorkspaceUser = `-- name: UpdateWorkspaceUser :exec
UPDATE workspaces_users
SET workspace_id = ?, user_id = ?, role = ?
WHERE id = ?
`

type UpdateWorkspaceUserParams struct {
	WorkspaceID ulid.ULID
	UserID      ulid.ULID
	Role        int8
	ID          ulid.ULID
}

func (q *Queries) UpdateWorkspaceUser(ctx context.Context, arg UpdateWorkspaceUserParams) error {
	_, err := q.exec(ctx, q.updateWorkspaceUserStmt, updateWorkspaceUser,
		arg.WorkspaceID,
		arg.UserID,
		arg.Role,
		arg.ID,
	)
	return err
}
