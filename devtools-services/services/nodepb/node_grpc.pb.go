// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: protos/node.proto

package nodepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	Run(ctx context.Context, in *SingleNodeRequest, opts ...grpc.CallOption) (*SingleNodeRespond, error)
	RunMulti(ctx context.Context, in *MultiNodeRequest, opts ...grpc.CallOption) (NodeService_RunMultiClient, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) Run(ctx context.Context, in *SingleNodeRequest, opts ...grpc.CallOption) (*SingleNodeRespond, error) {
	out := new(SingleNodeRespond)
	err := c.cc.Invoke(ctx, "/nodeproto.NodeService/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) RunMulti(ctx context.Context, in *MultiNodeRequest, opts ...grpc.CallOption) (NodeService_RunMultiClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[0], "/nodeproto.NodeService/RunMulti", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceRunMultiClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_RunMultiClient interface {
	Recv() (*MultiNodeStatusStream, error)
	grpc.ClientStream
}

type nodeServiceRunMultiClient struct {
	grpc.ClientStream
}

func (x *nodeServiceRunMultiClient) Recv() (*MultiNodeStatusStream, error) {
	m := new(MultiNodeStatusStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	Run(context.Context, *SingleNodeRequest) (*SingleNodeRespond, error)
	RunMulti(*MultiNodeRequest, NodeService_RunMultiServer) error
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) Run(context.Context, *SingleNodeRequest) (*SingleNodeRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedNodeServiceServer) RunMulti(*MultiNodeRequest, NodeService_RunMultiServer) error {
	return status.Errorf(codes.Unimplemented, "method RunMulti not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeproto.NodeService/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Run(ctx, req.(*SingleNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_RunMulti_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MultiNodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).RunMulti(m, &nodeServiceRunMultiServer{stream})
}

type NodeService_RunMultiServer interface {
	Send(*MultiNodeStatusStream) error
	grpc.ServerStream
}

type nodeServiceRunMultiServer struct {
	grpc.ServerStream
}

func (x *nodeServiceRunMultiServer) Send(m *MultiNodeStatusStream) error {
	return x.ServerStream.SendMsg(m)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeproto.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _NodeService_Run_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunMulti",
			Handler:       _NodeService_RunMulti_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/node.proto",
}
