// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkIFWorkspaceUserExistsStmt, err = db.PrepareContext(ctx, checkIFWorkspaceUserExists); err != nil {
		return nil, fmt.Errorf("error preparing query CheckIFWorkspaceUserExists: %w", err)
	}
	if q.createAssertStmt, err = db.PrepareContext(ctx, createAssert); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAssert: %w", err)
	}
	if q.createAssertResultStmt, err = db.PrepareContext(ctx, createAssertResult); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAssertResult: %w", err)
	}
	if q.createBodyFormStmt, err = db.PrepareContext(ctx, createBodyForm); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBodyForm: %w", err)
	}
	if q.createBodyFormBulkStmt, err = db.PrepareContext(ctx, createBodyFormBulk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBodyFormBulk: %w", err)
	}
	if q.createBodyRawStmt, err = db.PrepareContext(ctx, createBodyRaw); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBodyRaw: %w", err)
	}
	if q.createBodyRawBulkStmt, err = db.PrepareContext(ctx, createBodyRawBulk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBodyRawBulk: %w", err)
	}
	if q.createBodyUrlEncodedStmt, err = db.PrepareContext(ctx, createBodyUrlEncoded); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBodyUrlEncoded: %w", err)
	}
	if q.createBodyUrlEncodedBulkStmt, err = db.PrepareContext(ctx, createBodyUrlEncodedBulk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBodyUrlEncodedBulk: %w", err)
	}
	if q.createCollectionStmt, err = db.PrepareContext(ctx, createCollection); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCollection: %w", err)
	}
	if q.createEnvironmentStmt, err = db.PrepareContext(ctx, createEnvironment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEnvironment: %w", err)
	}
	if q.createExampleRespStmt, err = db.PrepareContext(ctx, createExampleResp); err != nil {
		return nil, fmt.Errorf("error preparing query CreateExampleResp: %w", err)
	}
	if q.createExampleRespHeaderStmt, err = db.PrepareContext(ctx, createExampleRespHeader); err != nil {
		return nil, fmt.Errorf("error preparing query CreateExampleRespHeader: %w", err)
	}
	if q.createHeaderStmt, err = db.PrepareContext(ctx, createHeader); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHeader: %w", err)
	}
	if q.createHeaderBulkStmt, err = db.PrepareContext(ctx, createHeaderBulk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHeaderBulk: %w", err)
	}
	if q.createItemApiStmt, err = db.PrepareContext(ctx, createItemApi); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemApi: %w", err)
	}
	if q.createItemApiBulkStmt, err = db.PrepareContext(ctx, createItemApiBulk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemApiBulk: %w", err)
	}
	if q.createItemApiExampleStmt, err = db.PrepareContext(ctx, createItemApiExample); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemApiExample: %w", err)
	}
	if q.createItemApiExampleBulkStmt, err = db.PrepareContext(ctx, createItemApiExampleBulk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemApiExampleBulk: %w", err)
	}
	if q.createItemFolderStmt, err = db.PrepareContext(ctx, createItemFolder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemFolder: %w", err)
	}
	if q.createItemFolderBulkStmt, err = db.PrepareContext(ctx, createItemFolderBulk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemFolderBulk: %w", err)
	}
	if q.createQueryStmt, err = db.PrepareContext(ctx, createQuery); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQuery: %w", err)
	}
	if q.createQueryBulkStmt, err = db.PrepareContext(ctx, createQueryBulk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQueryBulk: %w", err)
	}
	if q.createResultApiStmt, err = db.PrepareContext(ctx, createResultApi); err != nil {
		return nil, fmt.Errorf("error preparing query CreateResultApi: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createVariableStmt, err = db.PrepareContext(ctx, createVariable); err != nil {
		return nil, fmt.Errorf("error preparing query CreateVariable: %w", err)
	}
	if q.createVariableBulkStmt, err = db.PrepareContext(ctx, createVariableBulk); err != nil {
		return nil, fmt.Errorf("error preparing query CreateVariableBulk: %w", err)
	}
	if q.createWorkspaceStmt, err = db.PrepareContext(ctx, createWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWorkspace: %w", err)
	}
	if q.createWorkspaceUserStmt, err = db.PrepareContext(ctx, createWorkspaceUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWorkspaceUser: %w", err)
	}
	if q.deleteAssertStmt, err = db.PrepareContext(ctx, deleteAssert); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAssert: %w", err)
	}
	if q.deleteAssertResultStmt, err = db.PrepareContext(ctx, deleteAssertResult); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAssertResult: %w", err)
	}
	if q.deleteBodyFormStmt, err = db.PrepareContext(ctx, deleteBodyForm); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBodyForm: %w", err)
	}
	if q.deleteBodyRawStmt, err = db.PrepareContext(ctx, deleteBodyRaw); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBodyRaw: %w", err)
	}
	if q.deleteBodyURLEncodedStmt, err = db.PrepareContext(ctx, deleteBodyURLEncoded); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBodyURLEncoded: %w", err)
	}
	if q.deleteCollectionStmt, err = db.PrepareContext(ctx, deleteCollection); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCollection: %w", err)
	}
	if q.deleteEnvironmentStmt, err = db.PrepareContext(ctx, deleteEnvironment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEnvironment: %w", err)
	}
	if q.deleteExampleRespStmt, err = db.PrepareContext(ctx, deleteExampleResp); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExampleResp: %w", err)
	}
	if q.deleteExampleRespHeaderStmt, err = db.PrepareContext(ctx, deleteExampleRespHeader); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExampleRespHeader: %w", err)
	}
	if q.deleteHeaderStmt, err = db.PrepareContext(ctx, deleteHeader); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHeader: %w", err)
	}
	if q.deleteItemApiStmt, err = db.PrepareContext(ctx, deleteItemApi); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemApi: %w", err)
	}
	if q.deleteItemApiExampleStmt, err = db.PrepareContext(ctx, deleteItemApiExample); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemApiExample: %w", err)
	}
	if q.deleteItemFolderStmt, err = db.PrepareContext(ctx, deleteItemFolder); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemFolder: %w", err)
	}
	if q.deleteQueryStmt, err = db.PrepareContext(ctx, deleteQuery); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteQuery: %w", err)
	}
	if q.deleteResultApiStmt, err = db.PrepareContext(ctx, deleteResultApi); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteResultApi: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteVariableStmt, err = db.PrepareContext(ctx, deleteVariable); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteVariable: %w", err)
	}
	if q.deleteWorkspaceStmt, err = db.PrepareContext(ctx, deleteWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorkspace: %w", err)
	}
	if q.deleteWorkspaceUserStmt, err = db.PrepareContext(ctx, deleteWorkspaceUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorkspaceUser: %w", err)
	}
	if q.getActiveEnvironmentsByWorkspaceIDStmt, err = db.PrepareContext(ctx, getActiveEnvironmentsByWorkspaceID); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveEnvironmentsByWorkspaceID: %w", err)
	}
	if q.getAssertStmt, err = db.PrepareContext(ctx, getAssert); err != nil {
		return nil, fmt.Errorf("error preparing query GetAssert: %w", err)
	}
	if q.getAssertResultStmt, err = db.PrepareContext(ctx, getAssertResult); err != nil {
		return nil, fmt.Errorf("error preparing query GetAssertResult: %w", err)
	}
	if q.getAssertResultsByAssertIDStmt, err = db.PrepareContext(ctx, getAssertResultsByAssertID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAssertResultsByAssertID: %w", err)
	}
	if q.getAssertsByExampleIDStmt, err = db.PrepareContext(ctx, getAssertsByExampleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAssertsByExampleID: %w", err)
	}
	if q.getBodyFormStmt, err = db.PrepareContext(ctx, getBodyForm); err != nil {
		return nil, fmt.Errorf("error preparing query GetBodyForm: %w", err)
	}
	if q.getBodyFormsByExampleIDStmt, err = db.PrepareContext(ctx, getBodyFormsByExampleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetBodyFormsByExampleID: %w", err)
	}
	if q.getBodyRawStmt, err = db.PrepareContext(ctx, getBodyRaw); err != nil {
		return nil, fmt.Errorf("error preparing query GetBodyRaw: %w", err)
	}
	if q.getBodyRawsByExampleIDStmt, err = db.PrepareContext(ctx, getBodyRawsByExampleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetBodyRawsByExampleID: %w", err)
	}
	if q.getBodyUrlEncodedStmt, err = db.PrepareContext(ctx, getBodyUrlEncoded); err != nil {
		return nil, fmt.Errorf("error preparing query GetBodyUrlEncoded: %w", err)
	}
	if q.getBodyUrlEncodedsByExampleIDStmt, err = db.PrepareContext(ctx, getBodyUrlEncodedsByExampleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetBodyUrlEncodedsByExampleID: %w", err)
	}
	if q.getCollectionStmt, err = db.PrepareContext(ctx, getCollection); err != nil {
		return nil, fmt.Errorf("error preparing query GetCollection: %w", err)
	}
	if q.getCollectionByOwnerIDStmt, err = db.PrepareContext(ctx, getCollectionByOwnerID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCollectionByOwnerID: %w", err)
	}
	if q.getCollectionByPlatformIDandTypeStmt, err = db.PrepareContext(ctx, getCollectionByPlatformIDandType); err != nil {
		return nil, fmt.Errorf("error preparing query GetCollectionByPlatformIDandType: %w", err)
	}
	if q.getCollectionOwnerIDStmt, err = db.PrepareContext(ctx, getCollectionOwnerID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCollectionOwnerID: %w", err)
	}
	if q.getEnvironmentStmt, err = db.PrepareContext(ctx, getEnvironment); err != nil {
		return nil, fmt.Errorf("error preparing query GetEnvironment: %w", err)
	}
	if q.getEnvironmentsByWorkspaceIDStmt, err = db.PrepareContext(ctx, getEnvironmentsByWorkspaceID); err != nil {
		return nil, fmt.Errorf("error preparing query GetEnvironmentsByWorkspaceID: %w", err)
	}
	if q.getExampleRespStmt, err = db.PrepareContext(ctx, getExampleResp); err != nil {
		return nil, fmt.Errorf("error preparing query GetExampleResp: %w", err)
	}
	if q.getExampleRespHeaderStmt, err = db.PrepareContext(ctx, getExampleRespHeader); err != nil {
		return nil, fmt.Errorf("error preparing query GetExampleRespHeader: %w", err)
	}
	if q.getExampleRespHeadersByRespIDStmt, err = db.PrepareContext(ctx, getExampleRespHeadersByRespID); err != nil {
		return nil, fmt.Errorf("error preparing query GetExampleRespHeadersByRespID: %w", err)
	}
	if q.getExampleRespsByExampleIDStmt, err = db.PrepareContext(ctx, getExampleRespsByExampleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetExampleRespsByExampleID: %w", err)
	}
	if q.getHeaderStmt, err = db.PrepareContext(ctx, getHeader); err != nil {
		return nil, fmt.Errorf("error preparing query GetHeader: %w", err)
	}
	if q.getHeadersByExampleIDStmt, err = db.PrepareContext(ctx, getHeadersByExampleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetHeadersByExampleID: %w", err)
	}
	if q.getItemApiStmt, err = db.PrepareContext(ctx, getItemApi); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemApi: %w", err)
	}
	if q.getItemApiExampleStmt, err = db.PrepareContext(ctx, getItemApiExample); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemApiExample: %w", err)
	}
	if q.getItemApiExampleByCollectionIDStmt, err = db.PrepareContext(ctx, getItemApiExampleByCollectionID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemApiExampleByCollectionID: %w", err)
	}
	if q.getItemApiExampleDefaultStmt, err = db.PrepareContext(ctx, getItemApiExampleDefault); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemApiExampleDefault: %w", err)
	}
	if q.getItemApiExamplesStmt, err = db.PrepareContext(ctx, getItemApiExamples); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemApiExamples: %w", err)
	}
	if q.getItemApiOwnerIDStmt, err = db.PrepareContext(ctx, getItemApiOwnerID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemApiOwnerID: %w", err)
	}
	if q.getItemFolderStmt, err = db.PrepareContext(ctx, getItemFolder); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemFolder: %w", err)
	}
	if q.getItemFolderOwnerIDStmt, err = db.PrepareContext(ctx, getItemFolderOwnerID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemFolderOwnerID: %w", err)
	}
	if q.getItemFoldersByCollectionIDStmt, err = db.PrepareContext(ctx, getItemFoldersByCollectionID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemFoldersByCollectionID: %w", err)
	}
	if q.getItemsApiByCollectionIDStmt, err = db.PrepareContext(ctx, getItemsApiByCollectionID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemsApiByCollectionID: %w", err)
	}
	if q.getQueriesByExampleIDStmt, err = db.PrepareContext(ctx, getQueriesByExampleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetQueriesByExampleID: %w", err)
	}
	if q.getQueryStmt, err = db.PrepareContext(ctx, getQuery); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuery: %w", err)
	}
	if q.getResultApiStmt, err = db.PrepareContext(ctx, getResultApi); err != nil {
		return nil, fmt.Errorf("error preparing query GetResultApi: %w", err)
	}
	if q.getResultApiByTriggerByStmt, err = db.PrepareContext(ctx, getResultApiByTriggerBy); err != nil {
		return nil, fmt.Errorf("error preparing query GetResultApiByTriggerBy: %w", err)
	}
	if q.getResultApiByTriggerByAndTriggerTypeStmt, err = db.PrepareContext(ctx, getResultApiByTriggerByAndTriggerType); err != nil {
		return nil, fmt.Errorf("error preparing query GetResultApiByTriggerByAndTriggerType: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByEmailAndProviderTypeStmt, err = db.PrepareContext(ctx, getUserByEmailAndProviderType); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmailAndProviderType: %w", err)
	}
	if q.getUserByProviderIDandTypeStmt, err = db.PrepareContext(ctx, getUserByProviderIDandType); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByProviderIDandType: %w", err)
	}
	if q.getVariableStmt, err = db.PrepareContext(ctx, getVariable); err != nil {
		return nil, fmt.Errorf("error preparing query GetVariable: %w", err)
	}
	if q.getVariablesByEnvironmentIDStmt, err = db.PrepareContext(ctx, getVariablesByEnvironmentID); err != nil {
		return nil, fmt.Errorf("error preparing query GetVariablesByEnvironmentID: %w", err)
	}
	if q.getWorkspaceStmt, err = db.PrepareContext(ctx, getWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspace: %w", err)
	}
	if q.getWorkspaceByUserIDStmt, err = db.PrepareContext(ctx, getWorkspaceByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceByUserID: %w", err)
	}
	if q.getWorkspaceByUserIDandWorkspaceIDStmt, err = db.PrepareContext(ctx, getWorkspaceByUserIDandWorkspaceID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceByUserIDandWorkspaceID: %w", err)
	}
	if q.getWorkspaceUserStmt, err = db.PrepareContext(ctx, getWorkspaceUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceUser: %w", err)
	}
	if q.getWorkspaceUserByUserIDStmt, err = db.PrepareContext(ctx, getWorkspaceUserByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceUserByUserID: %w", err)
	}
	if q.getWorkspaceUserByWorkspaceIDStmt, err = db.PrepareContext(ctx, getWorkspaceUserByWorkspaceID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceUserByWorkspaceID: %w", err)
	}
	if q.getWorkspaceUserByWorkspaceIDAndUserIDStmt, err = db.PrepareContext(ctx, getWorkspaceUserByWorkspaceIDAndUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspaceUserByWorkspaceIDAndUserID: %w", err)
	}
	if q.getWorkspacesByUserIDStmt, err = db.PrepareContext(ctx, getWorkspacesByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkspacesByUserID: %w", err)
	}
	if q.setBodyFormEnableStmt, err = db.PrepareContext(ctx, setBodyFormEnable); err != nil {
		return nil, fmt.Errorf("error preparing query SetBodyFormEnable: %w", err)
	}
	if q.setHeaderEnableStmt, err = db.PrepareContext(ctx, setHeaderEnable); err != nil {
		return nil, fmt.Errorf("error preparing query SetHeaderEnable: %w", err)
	}
	if q.setQueryEnableStmt, err = db.PrepareContext(ctx, setQueryEnable); err != nil {
		return nil, fmt.Errorf("error preparing query SetQueryEnable: %w", err)
	}
	if q.updateAssertStmt, err = db.PrepareContext(ctx, updateAssert); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAssert: %w", err)
	}
	if q.updateAssertResultStmt, err = db.PrepareContext(ctx, updateAssertResult); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAssertResult: %w", err)
	}
	if q.updateBodyFormStmt, err = db.PrepareContext(ctx, updateBodyForm); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBodyForm: %w", err)
	}
	if q.updateBodyRawDataStmt, err = db.PrepareContext(ctx, updateBodyRawData); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBodyRawData: %w", err)
	}
	if q.updateBodyUrlEncodedStmt, err = db.PrepareContext(ctx, updateBodyUrlEncoded); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBodyUrlEncoded: %w", err)
	}
	if q.updateCollectionStmt, err = db.PrepareContext(ctx, updateCollection); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCollection: %w", err)
	}
	if q.updateEnvironmentStmt, err = db.PrepareContext(ctx, updateEnvironment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEnvironment: %w", err)
	}
	if q.updateExampleRespStmt, err = db.PrepareContext(ctx, updateExampleResp); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateExampleResp: %w", err)
	}
	if q.updateExampleRespHeaderStmt, err = db.PrepareContext(ctx, updateExampleRespHeader); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateExampleRespHeader: %w", err)
	}
	if q.updateHeaderStmt, err = db.PrepareContext(ctx, updateHeader); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHeader: %w", err)
	}
	if q.updateItemApiStmt, err = db.PrepareContext(ctx, updateItemApi); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemApi: %w", err)
	}
	if q.updateItemApiExampleStmt, err = db.PrepareContext(ctx, updateItemApiExample); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemApiExample: %w", err)
	}
	if q.updateItemFolderStmt, err = db.PrepareContext(ctx, updateItemFolder); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemFolder: %w", err)
	}
	if q.updateQueryStmt, err = db.PrepareContext(ctx, updateQuery); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateQuery: %w", err)
	}
	if q.updateResultApiStmt, err = db.PrepareContext(ctx, updateResultApi); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateResultApi: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateVariableStmt, err = db.PrepareContext(ctx, updateVariable); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateVariable: %w", err)
	}
	if q.updateVisualizeModeStmt, err = db.PrepareContext(ctx, updateVisualizeMode); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateVisualizeMode: %w", err)
	}
	if q.updateWorkspaceStmt, err = db.PrepareContext(ctx, updateWorkspace); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorkspace: %w", err)
	}
	if q.updateWorkspaceUserStmt, err = db.PrepareContext(ctx, updateWorkspaceUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorkspaceUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkIFWorkspaceUserExistsStmt != nil {
		if cerr := q.checkIFWorkspaceUserExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkIFWorkspaceUserExistsStmt: %w", cerr)
		}
	}
	if q.createAssertStmt != nil {
		if cerr := q.createAssertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAssertStmt: %w", cerr)
		}
	}
	if q.createAssertResultStmt != nil {
		if cerr := q.createAssertResultStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAssertResultStmt: %w", cerr)
		}
	}
	if q.createBodyFormStmt != nil {
		if cerr := q.createBodyFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBodyFormStmt: %w", cerr)
		}
	}
	if q.createBodyFormBulkStmt != nil {
		if cerr := q.createBodyFormBulkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBodyFormBulkStmt: %w", cerr)
		}
	}
	if q.createBodyRawStmt != nil {
		if cerr := q.createBodyRawStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBodyRawStmt: %w", cerr)
		}
	}
	if q.createBodyRawBulkStmt != nil {
		if cerr := q.createBodyRawBulkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBodyRawBulkStmt: %w", cerr)
		}
	}
	if q.createBodyUrlEncodedStmt != nil {
		if cerr := q.createBodyUrlEncodedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBodyUrlEncodedStmt: %w", cerr)
		}
	}
	if q.createBodyUrlEncodedBulkStmt != nil {
		if cerr := q.createBodyUrlEncodedBulkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBodyUrlEncodedBulkStmt: %w", cerr)
		}
	}
	if q.createCollectionStmt != nil {
		if cerr := q.createCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCollectionStmt: %w", cerr)
		}
	}
	if q.createEnvironmentStmt != nil {
		if cerr := q.createEnvironmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEnvironmentStmt: %w", cerr)
		}
	}
	if q.createExampleRespStmt != nil {
		if cerr := q.createExampleRespStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createExampleRespStmt: %w", cerr)
		}
	}
	if q.createExampleRespHeaderStmt != nil {
		if cerr := q.createExampleRespHeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createExampleRespHeaderStmt: %w", cerr)
		}
	}
	if q.createHeaderStmt != nil {
		if cerr := q.createHeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHeaderStmt: %w", cerr)
		}
	}
	if q.createHeaderBulkStmt != nil {
		if cerr := q.createHeaderBulkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHeaderBulkStmt: %w", cerr)
		}
	}
	if q.createItemApiStmt != nil {
		if cerr := q.createItemApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemApiStmt: %w", cerr)
		}
	}
	if q.createItemApiBulkStmt != nil {
		if cerr := q.createItemApiBulkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemApiBulkStmt: %w", cerr)
		}
	}
	if q.createItemApiExampleStmt != nil {
		if cerr := q.createItemApiExampleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemApiExampleStmt: %w", cerr)
		}
	}
	if q.createItemApiExampleBulkStmt != nil {
		if cerr := q.createItemApiExampleBulkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemApiExampleBulkStmt: %w", cerr)
		}
	}
	if q.createItemFolderStmt != nil {
		if cerr := q.createItemFolderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemFolderStmt: %w", cerr)
		}
	}
	if q.createItemFolderBulkStmt != nil {
		if cerr := q.createItemFolderBulkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemFolderBulkStmt: %w", cerr)
		}
	}
	if q.createQueryStmt != nil {
		if cerr := q.createQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQueryStmt: %w", cerr)
		}
	}
	if q.createQueryBulkStmt != nil {
		if cerr := q.createQueryBulkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQueryBulkStmt: %w", cerr)
		}
	}
	if q.createResultApiStmt != nil {
		if cerr := q.createResultApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createResultApiStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createVariableStmt != nil {
		if cerr := q.createVariableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createVariableStmt: %w", cerr)
		}
	}
	if q.createVariableBulkStmt != nil {
		if cerr := q.createVariableBulkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createVariableBulkStmt: %w", cerr)
		}
	}
	if q.createWorkspaceStmt != nil {
		if cerr := q.createWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWorkspaceStmt: %w", cerr)
		}
	}
	if q.createWorkspaceUserStmt != nil {
		if cerr := q.createWorkspaceUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWorkspaceUserStmt: %w", cerr)
		}
	}
	if q.deleteAssertStmt != nil {
		if cerr := q.deleteAssertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAssertStmt: %w", cerr)
		}
	}
	if q.deleteAssertResultStmt != nil {
		if cerr := q.deleteAssertResultStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAssertResultStmt: %w", cerr)
		}
	}
	if q.deleteBodyFormStmt != nil {
		if cerr := q.deleteBodyFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBodyFormStmt: %w", cerr)
		}
	}
	if q.deleteBodyRawStmt != nil {
		if cerr := q.deleteBodyRawStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBodyRawStmt: %w", cerr)
		}
	}
	if q.deleteBodyURLEncodedStmt != nil {
		if cerr := q.deleteBodyURLEncodedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBodyURLEncodedStmt: %w", cerr)
		}
	}
	if q.deleteCollectionStmt != nil {
		if cerr := q.deleteCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCollectionStmt: %w", cerr)
		}
	}
	if q.deleteEnvironmentStmt != nil {
		if cerr := q.deleteEnvironmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEnvironmentStmt: %w", cerr)
		}
	}
	if q.deleteExampleRespStmt != nil {
		if cerr := q.deleteExampleRespStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExampleRespStmt: %w", cerr)
		}
	}
	if q.deleteExampleRespHeaderStmt != nil {
		if cerr := q.deleteExampleRespHeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExampleRespHeaderStmt: %w", cerr)
		}
	}
	if q.deleteHeaderStmt != nil {
		if cerr := q.deleteHeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHeaderStmt: %w", cerr)
		}
	}
	if q.deleteItemApiStmt != nil {
		if cerr := q.deleteItemApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemApiStmt: %w", cerr)
		}
	}
	if q.deleteItemApiExampleStmt != nil {
		if cerr := q.deleteItemApiExampleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemApiExampleStmt: %w", cerr)
		}
	}
	if q.deleteItemFolderStmt != nil {
		if cerr := q.deleteItemFolderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemFolderStmt: %w", cerr)
		}
	}
	if q.deleteQueryStmt != nil {
		if cerr := q.deleteQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteQueryStmt: %w", cerr)
		}
	}
	if q.deleteResultApiStmt != nil {
		if cerr := q.deleteResultApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteResultApiStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteVariableStmt != nil {
		if cerr := q.deleteVariableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteVariableStmt: %w", cerr)
		}
	}
	if q.deleteWorkspaceStmt != nil {
		if cerr := q.deleteWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorkspaceStmt: %w", cerr)
		}
	}
	if q.deleteWorkspaceUserStmt != nil {
		if cerr := q.deleteWorkspaceUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorkspaceUserStmt: %w", cerr)
		}
	}
	if q.getActiveEnvironmentsByWorkspaceIDStmt != nil {
		if cerr := q.getActiveEnvironmentsByWorkspaceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveEnvironmentsByWorkspaceIDStmt: %w", cerr)
		}
	}
	if q.getAssertStmt != nil {
		if cerr := q.getAssertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAssertStmt: %w", cerr)
		}
	}
	if q.getAssertResultStmt != nil {
		if cerr := q.getAssertResultStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAssertResultStmt: %w", cerr)
		}
	}
	if q.getAssertResultsByAssertIDStmt != nil {
		if cerr := q.getAssertResultsByAssertIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAssertResultsByAssertIDStmt: %w", cerr)
		}
	}
	if q.getAssertsByExampleIDStmt != nil {
		if cerr := q.getAssertsByExampleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAssertsByExampleIDStmt: %w", cerr)
		}
	}
	if q.getBodyFormStmt != nil {
		if cerr := q.getBodyFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBodyFormStmt: %w", cerr)
		}
	}
	if q.getBodyFormsByExampleIDStmt != nil {
		if cerr := q.getBodyFormsByExampleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBodyFormsByExampleIDStmt: %w", cerr)
		}
	}
	if q.getBodyRawStmt != nil {
		if cerr := q.getBodyRawStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBodyRawStmt: %w", cerr)
		}
	}
	if q.getBodyRawsByExampleIDStmt != nil {
		if cerr := q.getBodyRawsByExampleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBodyRawsByExampleIDStmt: %w", cerr)
		}
	}
	if q.getBodyUrlEncodedStmt != nil {
		if cerr := q.getBodyUrlEncodedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBodyUrlEncodedStmt: %w", cerr)
		}
	}
	if q.getBodyUrlEncodedsByExampleIDStmt != nil {
		if cerr := q.getBodyUrlEncodedsByExampleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBodyUrlEncodedsByExampleIDStmt: %w", cerr)
		}
	}
	if q.getCollectionStmt != nil {
		if cerr := q.getCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCollectionStmt: %w", cerr)
		}
	}
	if q.getCollectionByOwnerIDStmt != nil {
		if cerr := q.getCollectionByOwnerIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCollectionByOwnerIDStmt: %w", cerr)
		}
	}
	if q.getCollectionByPlatformIDandTypeStmt != nil {
		if cerr := q.getCollectionByPlatformIDandTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCollectionByPlatformIDandTypeStmt: %w", cerr)
		}
	}
	if q.getCollectionOwnerIDStmt != nil {
		if cerr := q.getCollectionOwnerIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCollectionOwnerIDStmt: %w", cerr)
		}
	}
	if q.getEnvironmentStmt != nil {
		if cerr := q.getEnvironmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEnvironmentStmt: %w", cerr)
		}
	}
	if q.getEnvironmentsByWorkspaceIDStmt != nil {
		if cerr := q.getEnvironmentsByWorkspaceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEnvironmentsByWorkspaceIDStmt: %w", cerr)
		}
	}
	if q.getExampleRespStmt != nil {
		if cerr := q.getExampleRespStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExampleRespStmt: %w", cerr)
		}
	}
	if q.getExampleRespHeaderStmt != nil {
		if cerr := q.getExampleRespHeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExampleRespHeaderStmt: %w", cerr)
		}
	}
	if q.getExampleRespHeadersByRespIDStmt != nil {
		if cerr := q.getExampleRespHeadersByRespIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExampleRespHeadersByRespIDStmt: %w", cerr)
		}
	}
	if q.getExampleRespsByExampleIDStmt != nil {
		if cerr := q.getExampleRespsByExampleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExampleRespsByExampleIDStmt: %w", cerr)
		}
	}
	if q.getHeaderStmt != nil {
		if cerr := q.getHeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHeaderStmt: %w", cerr)
		}
	}
	if q.getHeadersByExampleIDStmt != nil {
		if cerr := q.getHeadersByExampleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHeadersByExampleIDStmt: %w", cerr)
		}
	}
	if q.getItemApiStmt != nil {
		if cerr := q.getItemApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemApiStmt: %w", cerr)
		}
	}
	if q.getItemApiExampleStmt != nil {
		if cerr := q.getItemApiExampleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemApiExampleStmt: %w", cerr)
		}
	}
	if q.getItemApiExampleByCollectionIDStmt != nil {
		if cerr := q.getItemApiExampleByCollectionIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemApiExampleByCollectionIDStmt: %w", cerr)
		}
	}
	if q.getItemApiExampleDefaultStmt != nil {
		if cerr := q.getItemApiExampleDefaultStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemApiExampleDefaultStmt: %w", cerr)
		}
	}
	if q.getItemApiExamplesStmt != nil {
		if cerr := q.getItemApiExamplesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemApiExamplesStmt: %w", cerr)
		}
	}
	if q.getItemApiOwnerIDStmt != nil {
		if cerr := q.getItemApiOwnerIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemApiOwnerIDStmt: %w", cerr)
		}
	}
	if q.getItemFolderStmt != nil {
		if cerr := q.getItemFolderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemFolderStmt: %w", cerr)
		}
	}
	if q.getItemFolderOwnerIDStmt != nil {
		if cerr := q.getItemFolderOwnerIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemFolderOwnerIDStmt: %w", cerr)
		}
	}
	if q.getItemFoldersByCollectionIDStmt != nil {
		if cerr := q.getItemFoldersByCollectionIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemFoldersByCollectionIDStmt: %w", cerr)
		}
	}
	if q.getItemsApiByCollectionIDStmt != nil {
		if cerr := q.getItemsApiByCollectionIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemsApiByCollectionIDStmt: %w", cerr)
		}
	}
	if q.getQueriesByExampleIDStmt != nil {
		if cerr := q.getQueriesByExampleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQueriesByExampleIDStmt: %w", cerr)
		}
	}
	if q.getQueryStmt != nil {
		if cerr := q.getQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQueryStmt: %w", cerr)
		}
	}
	if q.getResultApiStmt != nil {
		if cerr := q.getResultApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getResultApiStmt: %w", cerr)
		}
	}
	if q.getResultApiByTriggerByStmt != nil {
		if cerr := q.getResultApiByTriggerByStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getResultApiByTriggerByStmt: %w", cerr)
		}
	}
	if q.getResultApiByTriggerByAndTriggerTypeStmt != nil {
		if cerr := q.getResultApiByTriggerByAndTriggerTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getResultApiByTriggerByAndTriggerTypeStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByEmailAndProviderTypeStmt != nil {
		if cerr := q.getUserByEmailAndProviderTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailAndProviderTypeStmt: %w", cerr)
		}
	}
	if q.getUserByProviderIDandTypeStmt != nil {
		if cerr := q.getUserByProviderIDandTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByProviderIDandTypeStmt: %w", cerr)
		}
	}
	if q.getVariableStmt != nil {
		if cerr := q.getVariableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVariableStmt: %w", cerr)
		}
	}
	if q.getVariablesByEnvironmentIDStmt != nil {
		if cerr := q.getVariablesByEnvironmentIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVariablesByEnvironmentIDStmt: %w", cerr)
		}
	}
	if q.getWorkspaceStmt != nil {
		if cerr := q.getWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceStmt: %w", cerr)
		}
	}
	if q.getWorkspaceByUserIDStmt != nil {
		if cerr := q.getWorkspaceByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceByUserIDStmt: %w", cerr)
		}
	}
	if q.getWorkspaceByUserIDandWorkspaceIDStmt != nil {
		if cerr := q.getWorkspaceByUserIDandWorkspaceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceByUserIDandWorkspaceIDStmt: %w", cerr)
		}
	}
	if q.getWorkspaceUserStmt != nil {
		if cerr := q.getWorkspaceUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceUserStmt: %w", cerr)
		}
	}
	if q.getWorkspaceUserByUserIDStmt != nil {
		if cerr := q.getWorkspaceUserByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceUserByUserIDStmt: %w", cerr)
		}
	}
	if q.getWorkspaceUserByWorkspaceIDStmt != nil {
		if cerr := q.getWorkspaceUserByWorkspaceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceUserByWorkspaceIDStmt: %w", cerr)
		}
	}
	if q.getWorkspaceUserByWorkspaceIDAndUserIDStmt != nil {
		if cerr := q.getWorkspaceUserByWorkspaceIDAndUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspaceUserByWorkspaceIDAndUserIDStmt: %w", cerr)
		}
	}
	if q.getWorkspacesByUserIDStmt != nil {
		if cerr := q.getWorkspacesByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkspacesByUserIDStmt: %w", cerr)
		}
	}
	if q.setBodyFormEnableStmt != nil {
		if cerr := q.setBodyFormEnableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setBodyFormEnableStmt: %w", cerr)
		}
	}
	if q.setHeaderEnableStmt != nil {
		if cerr := q.setHeaderEnableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setHeaderEnableStmt: %w", cerr)
		}
	}
	if q.setQueryEnableStmt != nil {
		if cerr := q.setQueryEnableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setQueryEnableStmt: %w", cerr)
		}
	}
	if q.updateAssertStmt != nil {
		if cerr := q.updateAssertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAssertStmt: %w", cerr)
		}
	}
	if q.updateAssertResultStmt != nil {
		if cerr := q.updateAssertResultStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAssertResultStmt: %w", cerr)
		}
	}
	if q.updateBodyFormStmt != nil {
		if cerr := q.updateBodyFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBodyFormStmt: %w", cerr)
		}
	}
	if q.updateBodyRawDataStmt != nil {
		if cerr := q.updateBodyRawDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBodyRawDataStmt: %w", cerr)
		}
	}
	if q.updateBodyUrlEncodedStmt != nil {
		if cerr := q.updateBodyUrlEncodedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBodyUrlEncodedStmt: %w", cerr)
		}
	}
	if q.updateCollectionStmt != nil {
		if cerr := q.updateCollectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCollectionStmt: %w", cerr)
		}
	}
	if q.updateEnvironmentStmt != nil {
		if cerr := q.updateEnvironmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEnvironmentStmt: %w", cerr)
		}
	}
	if q.updateExampleRespStmt != nil {
		if cerr := q.updateExampleRespStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateExampleRespStmt: %w", cerr)
		}
	}
	if q.updateExampleRespHeaderStmt != nil {
		if cerr := q.updateExampleRespHeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateExampleRespHeaderStmt: %w", cerr)
		}
	}
	if q.updateHeaderStmt != nil {
		if cerr := q.updateHeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHeaderStmt: %w", cerr)
		}
	}
	if q.updateItemApiStmt != nil {
		if cerr := q.updateItemApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemApiStmt: %w", cerr)
		}
	}
	if q.updateItemApiExampleStmt != nil {
		if cerr := q.updateItemApiExampleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemApiExampleStmt: %w", cerr)
		}
	}
	if q.updateItemFolderStmt != nil {
		if cerr := q.updateItemFolderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemFolderStmt: %w", cerr)
		}
	}
	if q.updateQueryStmt != nil {
		if cerr := q.updateQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateQueryStmt: %w", cerr)
		}
	}
	if q.updateResultApiStmt != nil {
		if cerr := q.updateResultApiStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateResultApiStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateVariableStmt != nil {
		if cerr := q.updateVariableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateVariableStmt: %w", cerr)
		}
	}
	if q.updateVisualizeModeStmt != nil {
		if cerr := q.updateVisualizeModeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateVisualizeModeStmt: %w", cerr)
		}
	}
	if q.updateWorkspaceStmt != nil {
		if cerr := q.updateWorkspaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorkspaceStmt: %w", cerr)
		}
	}
	if q.updateWorkspaceUserStmt != nil {
		if cerr := q.updateWorkspaceUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorkspaceUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                         DBTX
	tx                                         *sql.Tx
	checkIFWorkspaceUserExistsStmt             *sql.Stmt
	createAssertStmt                           *sql.Stmt
	createAssertResultStmt                     *sql.Stmt
	createBodyFormStmt                         *sql.Stmt
	createBodyFormBulkStmt                     *sql.Stmt
	createBodyRawStmt                          *sql.Stmt
	createBodyRawBulkStmt                      *sql.Stmt
	createBodyUrlEncodedStmt                   *sql.Stmt
	createBodyUrlEncodedBulkStmt               *sql.Stmt
	createCollectionStmt                       *sql.Stmt
	createEnvironmentStmt                      *sql.Stmt
	createExampleRespStmt                      *sql.Stmt
	createExampleRespHeaderStmt                *sql.Stmt
	createHeaderStmt                           *sql.Stmt
	createHeaderBulkStmt                       *sql.Stmt
	createItemApiStmt                          *sql.Stmt
	createItemApiBulkStmt                      *sql.Stmt
	createItemApiExampleStmt                   *sql.Stmt
	createItemApiExampleBulkStmt               *sql.Stmt
	createItemFolderStmt                       *sql.Stmt
	createItemFolderBulkStmt                   *sql.Stmt
	createQueryStmt                            *sql.Stmt
	createQueryBulkStmt                        *sql.Stmt
	createResultApiStmt                        *sql.Stmt
	createUserStmt                             *sql.Stmt
	createVariableStmt                         *sql.Stmt
	createVariableBulkStmt                     *sql.Stmt
	createWorkspaceStmt                        *sql.Stmt
	createWorkspaceUserStmt                    *sql.Stmt
	deleteAssertStmt                           *sql.Stmt
	deleteAssertResultStmt                     *sql.Stmt
	deleteBodyFormStmt                         *sql.Stmt
	deleteBodyRawStmt                          *sql.Stmt
	deleteBodyURLEncodedStmt                   *sql.Stmt
	deleteCollectionStmt                       *sql.Stmt
	deleteEnvironmentStmt                      *sql.Stmt
	deleteExampleRespStmt                      *sql.Stmt
	deleteExampleRespHeaderStmt                *sql.Stmt
	deleteHeaderStmt                           *sql.Stmt
	deleteItemApiStmt                          *sql.Stmt
	deleteItemApiExampleStmt                   *sql.Stmt
	deleteItemFolderStmt                       *sql.Stmt
	deleteQueryStmt                            *sql.Stmt
	deleteResultApiStmt                        *sql.Stmt
	deleteUserStmt                             *sql.Stmt
	deleteVariableStmt                         *sql.Stmt
	deleteWorkspaceStmt                        *sql.Stmt
	deleteWorkspaceUserStmt                    *sql.Stmt
	getActiveEnvironmentsByWorkspaceIDStmt     *sql.Stmt
	getAssertStmt                              *sql.Stmt
	getAssertResultStmt                        *sql.Stmt
	getAssertResultsByAssertIDStmt             *sql.Stmt
	getAssertsByExampleIDStmt                  *sql.Stmt
	getBodyFormStmt                            *sql.Stmt
	getBodyFormsByExampleIDStmt                *sql.Stmt
	getBodyRawStmt                             *sql.Stmt
	getBodyRawsByExampleIDStmt                 *sql.Stmt
	getBodyUrlEncodedStmt                      *sql.Stmt
	getBodyUrlEncodedsByExampleIDStmt          *sql.Stmt
	getCollectionStmt                          *sql.Stmt
	getCollectionByOwnerIDStmt                 *sql.Stmt
	getCollectionByPlatformIDandTypeStmt       *sql.Stmt
	getCollectionOwnerIDStmt                   *sql.Stmt
	getEnvironmentStmt                         *sql.Stmt
	getEnvironmentsByWorkspaceIDStmt           *sql.Stmt
	getExampleRespStmt                         *sql.Stmt
	getExampleRespHeaderStmt                   *sql.Stmt
	getExampleRespHeadersByRespIDStmt          *sql.Stmt
	getExampleRespsByExampleIDStmt             *sql.Stmt
	getHeaderStmt                              *sql.Stmt
	getHeadersByExampleIDStmt                  *sql.Stmt
	getItemApiStmt                             *sql.Stmt
	getItemApiExampleStmt                      *sql.Stmt
	getItemApiExampleByCollectionIDStmt        *sql.Stmt
	getItemApiExampleDefaultStmt               *sql.Stmt
	getItemApiExamplesStmt                     *sql.Stmt
	getItemApiOwnerIDStmt                      *sql.Stmt
	getItemFolderStmt                          *sql.Stmt
	getItemFolderOwnerIDStmt                   *sql.Stmt
	getItemFoldersByCollectionIDStmt           *sql.Stmt
	getItemsApiByCollectionIDStmt              *sql.Stmt
	getQueriesByExampleIDStmt                  *sql.Stmt
	getQueryStmt                               *sql.Stmt
	getResultApiStmt                           *sql.Stmt
	getResultApiByTriggerByStmt                *sql.Stmt
	getResultApiByTriggerByAndTriggerTypeStmt  *sql.Stmt
	getUserStmt                                *sql.Stmt
	getUserByEmailStmt                         *sql.Stmt
	getUserByEmailAndProviderTypeStmt          *sql.Stmt
	getUserByProviderIDandTypeStmt             *sql.Stmt
	getVariableStmt                            *sql.Stmt
	getVariablesByEnvironmentIDStmt            *sql.Stmt
	getWorkspaceStmt                           *sql.Stmt
	getWorkspaceByUserIDStmt                   *sql.Stmt
	getWorkspaceByUserIDandWorkspaceIDStmt     *sql.Stmt
	getWorkspaceUserStmt                       *sql.Stmt
	getWorkspaceUserByUserIDStmt               *sql.Stmt
	getWorkspaceUserByWorkspaceIDStmt          *sql.Stmt
	getWorkspaceUserByWorkspaceIDAndUserIDStmt *sql.Stmt
	getWorkspacesByUserIDStmt                  *sql.Stmt
	setBodyFormEnableStmt                      *sql.Stmt
	setHeaderEnableStmt                        *sql.Stmt
	setQueryEnableStmt                         *sql.Stmt
	updateAssertStmt                           *sql.Stmt
	updateAssertResultStmt                     *sql.Stmt
	updateBodyFormStmt                         *sql.Stmt
	updateBodyRawDataStmt                      *sql.Stmt
	updateBodyUrlEncodedStmt                   *sql.Stmt
	updateCollectionStmt                       *sql.Stmt
	updateEnvironmentStmt                      *sql.Stmt
	updateExampleRespStmt                      *sql.Stmt
	updateExampleRespHeaderStmt                *sql.Stmt
	updateHeaderStmt                           *sql.Stmt
	updateItemApiStmt                          *sql.Stmt
	updateItemApiExampleStmt                   *sql.Stmt
	updateItemFolderStmt                       *sql.Stmt
	updateQueryStmt                            *sql.Stmt
	updateResultApiStmt                        *sql.Stmt
	updateUserStmt                             *sql.Stmt
	updateVariableStmt                         *sql.Stmt
	updateVisualizeModeStmt                    *sql.Stmt
	updateWorkspaceStmt                        *sql.Stmt
	updateWorkspaceUserStmt                    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                         tx,
		tx:                                         tx,
		checkIFWorkspaceUserExistsStmt:             q.checkIFWorkspaceUserExistsStmt,
		createAssertStmt:                           q.createAssertStmt,
		createAssertResultStmt:                     q.createAssertResultStmt,
		createBodyFormStmt:                         q.createBodyFormStmt,
		createBodyFormBulkStmt:                     q.createBodyFormBulkStmt,
		createBodyRawStmt:                          q.createBodyRawStmt,
		createBodyRawBulkStmt:                      q.createBodyRawBulkStmt,
		createBodyUrlEncodedStmt:                   q.createBodyUrlEncodedStmt,
		createBodyUrlEncodedBulkStmt:               q.createBodyUrlEncodedBulkStmt,
		createCollectionStmt:                       q.createCollectionStmt,
		createEnvironmentStmt:                      q.createEnvironmentStmt,
		createExampleRespStmt:                      q.createExampleRespStmt,
		createExampleRespHeaderStmt:                q.createExampleRespHeaderStmt,
		createHeaderStmt:                           q.createHeaderStmt,
		createHeaderBulkStmt:                       q.createHeaderBulkStmt,
		createItemApiStmt:                          q.createItemApiStmt,
		createItemApiBulkStmt:                      q.createItemApiBulkStmt,
		createItemApiExampleStmt:                   q.createItemApiExampleStmt,
		createItemApiExampleBulkStmt:               q.createItemApiExampleBulkStmt,
		createItemFolderStmt:                       q.createItemFolderStmt,
		createItemFolderBulkStmt:                   q.createItemFolderBulkStmt,
		createQueryStmt:                            q.createQueryStmt,
		createQueryBulkStmt:                        q.createQueryBulkStmt,
		createResultApiStmt:                        q.createResultApiStmt,
		createUserStmt:                             q.createUserStmt,
		createVariableStmt:                         q.createVariableStmt,
		createVariableBulkStmt:                     q.createVariableBulkStmt,
		createWorkspaceStmt:                        q.createWorkspaceStmt,
		createWorkspaceUserStmt:                    q.createWorkspaceUserStmt,
		deleteAssertStmt:                           q.deleteAssertStmt,
		deleteAssertResultStmt:                     q.deleteAssertResultStmt,
		deleteBodyFormStmt:                         q.deleteBodyFormStmt,
		deleteBodyRawStmt:                          q.deleteBodyRawStmt,
		deleteBodyURLEncodedStmt:                   q.deleteBodyURLEncodedStmt,
		deleteCollectionStmt:                       q.deleteCollectionStmt,
		deleteEnvironmentStmt:                      q.deleteEnvironmentStmt,
		deleteExampleRespStmt:                      q.deleteExampleRespStmt,
		deleteExampleRespHeaderStmt:                q.deleteExampleRespHeaderStmt,
		deleteHeaderStmt:                           q.deleteHeaderStmt,
		deleteItemApiStmt:                          q.deleteItemApiStmt,
		deleteItemApiExampleStmt:                   q.deleteItemApiExampleStmt,
		deleteItemFolderStmt:                       q.deleteItemFolderStmt,
		deleteQueryStmt:                            q.deleteQueryStmt,
		deleteResultApiStmt:                        q.deleteResultApiStmt,
		deleteUserStmt:                             q.deleteUserStmt,
		deleteVariableStmt:                         q.deleteVariableStmt,
		deleteWorkspaceStmt:                        q.deleteWorkspaceStmt,
		deleteWorkspaceUserStmt:                    q.deleteWorkspaceUserStmt,
		getActiveEnvironmentsByWorkspaceIDStmt:     q.getActiveEnvironmentsByWorkspaceIDStmt,
		getAssertStmt:                              q.getAssertStmt,
		getAssertResultStmt:                        q.getAssertResultStmt,
		getAssertResultsByAssertIDStmt:             q.getAssertResultsByAssertIDStmt,
		getAssertsByExampleIDStmt:                  q.getAssertsByExampleIDStmt,
		getBodyFormStmt:                            q.getBodyFormStmt,
		getBodyFormsByExampleIDStmt:                q.getBodyFormsByExampleIDStmt,
		getBodyRawStmt:                             q.getBodyRawStmt,
		getBodyRawsByExampleIDStmt:                 q.getBodyRawsByExampleIDStmt,
		getBodyUrlEncodedStmt:                      q.getBodyUrlEncodedStmt,
		getBodyUrlEncodedsByExampleIDStmt:          q.getBodyUrlEncodedsByExampleIDStmt,
		getCollectionStmt:                          q.getCollectionStmt,
		getCollectionByOwnerIDStmt:                 q.getCollectionByOwnerIDStmt,
		getCollectionByPlatformIDandTypeStmt:       q.getCollectionByPlatformIDandTypeStmt,
		getCollectionOwnerIDStmt:                   q.getCollectionOwnerIDStmt,
		getEnvironmentStmt:                         q.getEnvironmentStmt,
		getEnvironmentsByWorkspaceIDStmt:           q.getEnvironmentsByWorkspaceIDStmt,
		getExampleRespStmt:                         q.getExampleRespStmt,
		getExampleRespHeaderStmt:                   q.getExampleRespHeaderStmt,
		getExampleRespHeadersByRespIDStmt:          q.getExampleRespHeadersByRespIDStmt,
		getExampleRespsByExampleIDStmt:             q.getExampleRespsByExampleIDStmt,
		getHeaderStmt:                              q.getHeaderStmt,
		getHeadersByExampleIDStmt:                  q.getHeadersByExampleIDStmt,
		getItemApiStmt:                             q.getItemApiStmt,
		getItemApiExampleStmt:                      q.getItemApiExampleStmt,
		getItemApiExampleByCollectionIDStmt:        q.getItemApiExampleByCollectionIDStmt,
		getItemApiExampleDefaultStmt:               q.getItemApiExampleDefaultStmt,
		getItemApiExamplesStmt:                     q.getItemApiExamplesStmt,
		getItemApiOwnerIDStmt:                      q.getItemApiOwnerIDStmt,
		getItemFolderStmt:                          q.getItemFolderStmt,
		getItemFolderOwnerIDStmt:                   q.getItemFolderOwnerIDStmt,
		getItemFoldersByCollectionIDStmt:           q.getItemFoldersByCollectionIDStmt,
		getItemsApiByCollectionIDStmt:              q.getItemsApiByCollectionIDStmt,
		getQueriesByExampleIDStmt:                  q.getQueriesByExampleIDStmt,
		getQueryStmt:                               q.getQueryStmt,
		getResultApiStmt:                           q.getResultApiStmt,
		getResultApiByTriggerByStmt:                q.getResultApiByTriggerByStmt,
		getResultApiByTriggerByAndTriggerTypeStmt:  q.getResultApiByTriggerByAndTriggerTypeStmt,
		getUserStmt:                                q.getUserStmt,
		getUserByEmailStmt:                         q.getUserByEmailStmt,
		getUserByEmailAndProviderTypeStmt:          q.getUserByEmailAndProviderTypeStmt,
		getUserByProviderIDandTypeStmt:             q.getUserByProviderIDandTypeStmt,
		getVariableStmt:                            q.getVariableStmt,
		getVariablesByEnvironmentIDStmt:            q.getVariablesByEnvironmentIDStmt,
		getWorkspaceStmt:                           q.getWorkspaceStmt,
		getWorkspaceByUserIDStmt:                   q.getWorkspaceByUserIDStmt,
		getWorkspaceByUserIDandWorkspaceIDStmt:     q.getWorkspaceByUserIDandWorkspaceIDStmt,
		getWorkspaceUserStmt:                       q.getWorkspaceUserStmt,
		getWorkspaceUserByUserIDStmt:               q.getWorkspaceUserByUserIDStmt,
		getWorkspaceUserByWorkspaceIDStmt:          q.getWorkspaceUserByWorkspaceIDStmt,
		getWorkspaceUserByWorkspaceIDAndUserIDStmt: q.getWorkspaceUserByWorkspaceIDAndUserIDStmt,
		getWorkspacesByUserIDStmt:                  q.getWorkspacesByUserIDStmt,
		setBodyFormEnableStmt:                      q.setBodyFormEnableStmt,
		setHeaderEnableStmt:                        q.setHeaderEnableStmt,
		setQueryEnableStmt:                         q.setQueryEnableStmt,
		updateAssertStmt:                           q.updateAssertStmt,
		updateAssertResultStmt:                     q.updateAssertResultStmt,
		updateBodyFormStmt:                         q.updateBodyFormStmt,
		updateBodyRawDataStmt:                      q.updateBodyRawDataStmt,
		updateBodyUrlEncodedStmt:                   q.updateBodyUrlEncodedStmt,
		updateCollectionStmt:                       q.updateCollectionStmt,
		updateEnvironmentStmt:                      q.updateEnvironmentStmt,
		updateExampleRespStmt:                      q.updateExampleRespStmt,
		updateExampleRespHeaderStmt:                q.updateExampleRespHeaderStmt,
		updateHeaderStmt:                           q.updateHeaderStmt,
		updateItemApiStmt:                          q.updateItemApiStmt,
		updateItemApiExampleStmt:                   q.updateItemApiExampleStmt,
		updateItemFolderStmt:                       q.updateItemFolderStmt,
		updateQueryStmt:                            q.updateQueryStmt,
		updateResultApiStmt:                        q.updateResultApiStmt,
		updateUserStmt:                             q.updateUserStmt,
		updateVariableStmt:                         q.updateVariableStmt,
		updateVisualizeModeStmt:                    q.updateVisualizeModeStmt,
		updateWorkspaceStmt:                        q.updateWorkspaceStmt,
		updateWorkspaceUserStmt:                    q.updateWorkspaceUserStmt,
	}
}
