// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: itemfolder/v1/itemfolder.proto

package itemfolderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-services/gen/itemfolder/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ItemFolderServiceName is the fully-qualified name of the ItemFolderService service.
	ItemFolderServiceName = "itemfolder.v1.ItemFolderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ItemFolderServiceCreateFolderProcedure is the fully-qualified name of the ItemFolderService's
	// CreateFolder RPC.
	ItemFolderServiceCreateFolderProcedure = "/itemfolder.v1.ItemFolderService/CreateFolder"
	// ItemFolderServiceGetFolderProcedure is the fully-qualified name of the ItemFolderService's
	// GetFolder RPC.
	ItemFolderServiceGetFolderProcedure = "/itemfolder.v1.ItemFolderService/GetFolder"
	// ItemFolderServiceUpdateFolderProcedure is the fully-qualified name of the ItemFolderService's
	// UpdateFolder RPC.
	ItemFolderServiceUpdateFolderProcedure = "/itemfolder.v1.ItemFolderService/UpdateFolder"
	// ItemFolderServiceDeleteFolderProcedure is the fully-qualified name of the ItemFolderService's
	// DeleteFolder RPC.
	ItemFolderServiceDeleteFolderProcedure = "/itemfolder.v1.ItemFolderService/DeleteFolder"
	// ItemFolderServiceMoveFolderProcedure is the fully-qualified name of the ItemFolderService's
	// MoveFolder RPC.
	ItemFolderServiceMoveFolderProcedure = "/itemfolder.v1.ItemFolderService/MoveFolder"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	itemFolderServiceServiceDescriptor            = v1.File_itemfolder_v1_itemfolder_proto.Services().ByName("ItemFolderService")
	itemFolderServiceCreateFolderMethodDescriptor = itemFolderServiceServiceDescriptor.Methods().ByName("CreateFolder")
	itemFolderServiceGetFolderMethodDescriptor    = itemFolderServiceServiceDescriptor.Methods().ByName("GetFolder")
	itemFolderServiceUpdateFolderMethodDescriptor = itemFolderServiceServiceDescriptor.Methods().ByName("UpdateFolder")
	itemFolderServiceDeleteFolderMethodDescriptor = itemFolderServiceServiceDescriptor.Methods().ByName("DeleteFolder")
	itemFolderServiceMoveFolderMethodDescriptor   = itemFolderServiceServiceDescriptor.Methods().ByName("MoveFolder")
)

// ItemFolderServiceClient is a client for the itemfolder.v1.ItemFolderService service.
type ItemFolderServiceClient interface {
	CreateFolder(context.Context, *connect.Request[v1.CreateFolderRequest]) (*connect.Response[v1.CreateFolderResponse], error)
	GetFolder(context.Context, *connect.Request[v1.GetFolderRequest]) (*connect.Response[v1.GetFolderResponse], error)
	UpdateFolder(context.Context, *connect.Request[v1.UpdateFolderRequest]) (*connect.Response[v1.UpdateFolderResponse], error)
	DeleteFolder(context.Context, *connect.Request[v1.DeleteFolderRequest]) (*connect.Response[v1.DeleteFolderResponse], error)
	MoveFolder(context.Context, *connect.Request[v1.MoveFolderRequest]) (*connect.Response[v1.MoveFolderResponse], error)
}

// NewItemFolderServiceClient constructs a client for the itemfolder.v1.ItemFolderService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewItemFolderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ItemFolderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &itemFolderServiceClient{
		createFolder: connect.NewClient[v1.CreateFolderRequest, v1.CreateFolderResponse](
			httpClient,
			baseURL+ItemFolderServiceCreateFolderProcedure,
			connect.WithSchema(itemFolderServiceCreateFolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFolder: connect.NewClient[v1.GetFolderRequest, v1.GetFolderResponse](
			httpClient,
			baseURL+ItemFolderServiceGetFolderProcedure,
			connect.WithSchema(itemFolderServiceGetFolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFolder: connect.NewClient[v1.UpdateFolderRequest, v1.UpdateFolderResponse](
			httpClient,
			baseURL+ItemFolderServiceUpdateFolderProcedure,
			connect.WithSchema(itemFolderServiceUpdateFolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFolder: connect.NewClient[v1.DeleteFolderRequest, v1.DeleteFolderResponse](
			httpClient,
			baseURL+ItemFolderServiceDeleteFolderProcedure,
			connect.WithSchema(itemFolderServiceDeleteFolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		moveFolder: connect.NewClient[v1.MoveFolderRequest, v1.MoveFolderResponse](
			httpClient,
			baseURL+ItemFolderServiceMoveFolderProcedure,
			connect.WithSchema(itemFolderServiceMoveFolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// itemFolderServiceClient implements ItemFolderServiceClient.
type itemFolderServiceClient struct {
	createFolder *connect.Client[v1.CreateFolderRequest, v1.CreateFolderResponse]
	getFolder    *connect.Client[v1.GetFolderRequest, v1.GetFolderResponse]
	updateFolder *connect.Client[v1.UpdateFolderRequest, v1.UpdateFolderResponse]
	deleteFolder *connect.Client[v1.DeleteFolderRequest, v1.DeleteFolderResponse]
	moveFolder   *connect.Client[v1.MoveFolderRequest, v1.MoveFolderResponse]
}

// CreateFolder calls itemfolder.v1.ItemFolderService.CreateFolder.
func (c *itemFolderServiceClient) CreateFolder(ctx context.Context, req *connect.Request[v1.CreateFolderRequest]) (*connect.Response[v1.CreateFolderResponse], error) {
	return c.createFolder.CallUnary(ctx, req)
}

// GetFolder calls itemfolder.v1.ItemFolderService.GetFolder.
func (c *itemFolderServiceClient) GetFolder(ctx context.Context, req *connect.Request[v1.GetFolderRequest]) (*connect.Response[v1.GetFolderResponse], error) {
	return c.getFolder.CallUnary(ctx, req)
}

// UpdateFolder calls itemfolder.v1.ItemFolderService.UpdateFolder.
func (c *itemFolderServiceClient) UpdateFolder(ctx context.Context, req *connect.Request[v1.UpdateFolderRequest]) (*connect.Response[v1.UpdateFolderResponse], error) {
	return c.updateFolder.CallUnary(ctx, req)
}

// DeleteFolder calls itemfolder.v1.ItemFolderService.DeleteFolder.
func (c *itemFolderServiceClient) DeleteFolder(ctx context.Context, req *connect.Request[v1.DeleteFolderRequest]) (*connect.Response[v1.DeleteFolderResponse], error) {
	return c.deleteFolder.CallUnary(ctx, req)
}

// MoveFolder calls itemfolder.v1.ItemFolderService.MoveFolder.
func (c *itemFolderServiceClient) MoveFolder(ctx context.Context, req *connect.Request[v1.MoveFolderRequest]) (*connect.Response[v1.MoveFolderResponse], error) {
	return c.moveFolder.CallUnary(ctx, req)
}

// ItemFolderServiceHandler is an implementation of the itemfolder.v1.ItemFolderService service.
type ItemFolderServiceHandler interface {
	CreateFolder(context.Context, *connect.Request[v1.CreateFolderRequest]) (*connect.Response[v1.CreateFolderResponse], error)
	GetFolder(context.Context, *connect.Request[v1.GetFolderRequest]) (*connect.Response[v1.GetFolderResponse], error)
	UpdateFolder(context.Context, *connect.Request[v1.UpdateFolderRequest]) (*connect.Response[v1.UpdateFolderResponse], error)
	DeleteFolder(context.Context, *connect.Request[v1.DeleteFolderRequest]) (*connect.Response[v1.DeleteFolderResponse], error)
	MoveFolder(context.Context, *connect.Request[v1.MoveFolderRequest]) (*connect.Response[v1.MoveFolderResponse], error)
}

// NewItemFolderServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewItemFolderServiceHandler(svc ItemFolderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	itemFolderServiceCreateFolderHandler := connect.NewUnaryHandler(
		ItemFolderServiceCreateFolderProcedure,
		svc.CreateFolder,
		connect.WithSchema(itemFolderServiceCreateFolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemFolderServiceGetFolderHandler := connect.NewUnaryHandler(
		ItemFolderServiceGetFolderProcedure,
		svc.GetFolder,
		connect.WithSchema(itemFolderServiceGetFolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemFolderServiceUpdateFolderHandler := connect.NewUnaryHandler(
		ItemFolderServiceUpdateFolderProcedure,
		svc.UpdateFolder,
		connect.WithSchema(itemFolderServiceUpdateFolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemFolderServiceDeleteFolderHandler := connect.NewUnaryHandler(
		ItemFolderServiceDeleteFolderProcedure,
		svc.DeleteFolder,
		connect.WithSchema(itemFolderServiceDeleteFolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	itemFolderServiceMoveFolderHandler := connect.NewUnaryHandler(
		ItemFolderServiceMoveFolderProcedure,
		svc.MoveFolder,
		connect.WithSchema(itemFolderServiceMoveFolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/itemfolder.v1.ItemFolderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ItemFolderServiceCreateFolderProcedure:
			itemFolderServiceCreateFolderHandler.ServeHTTP(w, r)
		case ItemFolderServiceGetFolderProcedure:
			itemFolderServiceGetFolderHandler.ServeHTTP(w, r)
		case ItemFolderServiceUpdateFolderProcedure:
			itemFolderServiceUpdateFolderHandler.ServeHTTP(w, r)
		case ItemFolderServiceDeleteFolderProcedure:
			itemFolderServiceDeleteFolderHandler.ServeHTTP(w, r)
		case ItemFolderServiceMoveFolderProcedure:
			itemFolderServiceMoveFolderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedItemFolderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedItemFolderServiceHandler struct{}

func (UnimplementedItemFolderServiceHandler) CreateFolder(context.Context, *connect.Request[v1.CreateFolderRequest]) (*connect.Response[v1.CreateFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemfolder.v1.ItemFolderService.CreateFolder is not implemented"))
}

func (UnimplementedItemFolderServiceHandler) GetFolder(context.Context, *connect.Request[v1.GetFolderRequest]) (*connect.Response[v1.GetFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemfolder.v1.ItemFolderService.GetFolder is not implemented"))
}

func (UnimplementedItemFolderServiceHandler) UpdateFolder(context.Context, *connect.Request[v1.UpdateFolderRequest]) (*connect.Response[v1.UpdateFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemfolder.v1.ItemFolderService.UpdateFolder is not implemented"))
}

func (UnimplementedItemFolderServiceHandler) DeleteFolder(context.Context, *connect.Request[v1.DeleteFolderRequest]) (*connect.Response[v1.DeleteFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemfolder.v1.ItemFolderService.DeleteFolder is not implemented"))
}

func (UnimplementedItemFolderServiceHandler) MoveFolder(context.Context, *connect.Request[v1.MoveFolderRequest]) (*connect.Response[v1.MoveFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("itemfolder.v1.ItemFolderService.MoveFolder is not implemented"))
}
