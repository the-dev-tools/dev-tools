// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: collection/v1/collection.proto

package collectionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-services/gen/collection/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectionServiceName is the fully-qualified name of the CollectionService service.
	CollectionServiceName = "collection.v1.CollectionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectionServiceListCollectionsProcedure is the fully-qualified name of the CollectionService's
	// ListCollections RPC.
	CollectionServiceListCollectionsProcedure = "/collection.v1.CollectionService/ListCollections"
	// CollectionServiceCreateCollectionProcedure is the fully-qualified name of the CollectionService's
	// CreateCollection RPC.
	CollectionServiceCreateCollectionProcedure = "/collection.v1.CollectionService/CreateCollection"
	// CollectionServiceGetCollectionProcedure is the fully-qualified name of the CollectionService's
	// GetCollection RPC.
	CollectionServiceGetCollectionProcedure = "/collection.v1.CollectionService/GetCollection"
	// CollectionServiceUpdateCollectionProcedure is the fully-qualified name of the CollectionService's
	// UpdateCollection RPC.
	CollectionServiceUpdateCollectionProcedure = "/collection.v1.CollectionService/UpdateCollection"
	// CollectionServiceDeleteCollectionProcedure is the fully-qualified name of the CollectionService's
	// DeleteCollection RPC.
	CollectionServiceDeleteCollectionProcedure = "/collection.v1.CollectionService/DeleteCollection"
	// CollectionServiceImportPostmanProcedure is the fully-qualified name of the CollectionService's
	// ImportPostman RPC.
	CollectionServiceImportPostmanProcedure = "/collection.v1.CollectionService/ImportPostman"
	// CollectionServiceCreateFolderProcedure is the fully-qualified name of the CollectionService's
	// CreateFolder RPC.
	CollectionServiceCreateFolderProcedure = "/collection.v1.CollectionService/CreateFolder"
	// CollectionServiceCreateApiCallProcedure is the fully-qualified name of the CollectionService's
	// CreateApiCall RPC.
	CollectionServiceCreateApiCallProcedure = "/collection.v1.CollectionService/CreateApiCall"
	// CollectionServiceGetFolderProcedure is the fully-qualified name of the CollectionService's
	// GetFolder RPC.
	CollectionServiceGetFolderProcedure = "/collection.v1.CollectionService/GetFolder"
	// CollectionServiceGetApiCallProcedure is the fully-qualified name of the CollectionService's
	// GetApiCall RPC.
	CollectionServiceGetApiCallProcedure = "/collection.v1.CollectionService/GetApiCall"
	// CollectionServiceUpdateFolderProcedure is the fully-qualified name of the CollectionService's
	// UpdateFolder RPC.
	CollectionServiceUpdateFolderProcedure = "/collection.v1.CollectionService/UpdateFolder"
	// CollectionServiceUpdateApiCallProcedure is the fully-qualified name of the CollectionService's
	// UpdateApiCall RPC.
	CollectionServiceUpdateApiCallProcedure = "/collection.v1.CollectionService/UpdateApiCall"
	// CollectionServiceDeleteFolderProcedure is the fully-qualified name of the CollectionService's
	// DeleteFolder RPC.
	CollectionServiceDeleteFolderProcedure = "/collection.v1.CollectionService/DeleteFolder"
	// CollectionServiceDeleteApiCallProcedure is the fully-qualified name of the CollectionService's
	// DeleteApiCall RPC.
	CollectionServiceDeleteApiCallProcedure = "/collection.v1.CollectionService/DeleteApiCall"
	// CollectionServiceRunApiCallProcedure is the fully-qualified name of the CollectionService's
	// RunApiCall RPC.
	CollectionServiceRunApiCallProcedure = "/collection.v1.CollectionService/RunApiCall"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	collectionServiceServiceDescriptor                = v1.File_collection_v1_collection_proto.Services().ByName("CollectionService")
	collectionServiceListCollectionsMethodDescriptor  = collectionServiceServiceDescriptor.Methods().ByName("ListCollections")
	collectionServiceCreateCollectionMethodDescriptor = collectionServiceServiceDescriptor.Methods().ByName("CreateCollection")
	collectionServiceGetCollectionMethodDescriptor    = collectionServiceServiceDescriptor.Methods().ByName("GetCollection")
	collectionServiceUpdateCollectionMethodDescriptor = collectionServiceServiceDescriptor.Methods().ByName("UpdateCollection")
	collectionServiceDeleteCollectionMethodDescriptor = collectionServiceServiceDescriptor.Methods().ByName("DeleteCollection")
	collectionServiceImportPostmanMethodDescriptor    = collectionServiceServiceDescriptor.Methods().ByName("ImportPostman")
	collectionServiceCreateFolderMethodDescriptor     = collectionServiceServiceDescriptor.Methods().ByName("CreateFolder")
	collectionServiceCreateApiCallMethodDescriptor    = collectionServiceServiceDescriptor.Methods().ByName("CreateApiCall")
	collectionServiceGetFolderMethodDescriptor        = collectionServiceServiceDescriptor.Methods().ByName("GetFolder")
	collectionServiceGetApiCallMethodDescriptor       = collectionServiceServiceDescriptor.Methods().ByName("GetApiCall")
	collectionServiceUpdateFolderMethodDescriptor     = collectionServiceServiceDescriptor.Methods().ByName("UpdateFolder")
	collectionServiceUpdateApiCallMethodDescriptor    = collectionServiceServiceDescriptor.Methods().ByName("UpdateApiCall")
	collectionServiceDeleteFolderMethodDescriptor     = collectionServiceServiceDescriptor.Methods().ByName("DeleteFolder")
	collectionServiceDeleteApiCallMethodDescriptor    = collectionServiceServiceDescriptor.Methods().ByName("DeleteApiCall")
	collectionServiceRunApiCallMethodDescriptor       = collectionServiceServiceDescriptor.Methods().ByName("RunApiCall")
)

// CollectionServiceClient is a client for the collection.v1.CollectionService service.
type CollectionServiceClient interface {
	// Collection operations
	ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error)
	CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error)
	GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error)
	UpdateCollection(context.Context, *connect.Request[v1.UpdateCollectionRequest]) (*connect.Response[v1.UpdateCollectionResponse], error)
	DeleteCollection(context.Context, *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error)
	// Helper rpcs
	// // Postman
	ImportPostman(context.Context, *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error)
	// Specific operations per Item Type
	// // Create
	CreateFolder(context.Context, *connect.Request[v1.CreateFolderRequest]) (*connect.Response[v1.CreateFolderResponse], error)
	CreateApiCall(context.Context, *connect.Request[v1.CreateApiCallRequest]) (*connect.Response[v1.CreateApiCallResponse], error)
	// // Get
	GetFolder(context.Context, *connect.Request[v1.GetFolderRequest]) (*connect.Response[v1.GetFolderResponse], error)
	GetApiCall(context.Context, *connect.Request[v1.GetApiCallRequest]) (*connect.Response[v1.GetApiCallResponse], error)
	// // Update
	UpdateFolder(context.Context, *connect.Request[v1.UpdateFolderRequest]) (*connect.Response[v1.UpdateFolderResponse], error)
	UpdateApiCall(context.Context, *connect.Request[v1.UpdateApiCallRequest]) (*connect.Response[v1.UpdateApiCallResponse], error)
	// // Delete
	DeleteFolder(context.Context, *connect.Request[v1.DeleteFolderRequest]) (*connect.Response[v1.DeleteFolderResponse], error)
	DeleteApiCall(context.Context, *connect.Request[v1.DeleteApiCallRequest]) (*connect.Response[v1.DeleteApiCallResponse], error)
	// // Run
	RunApiCall(context.Context, *connect.Request[v1.RunApiCallRequest]) (*connect.Response[v1.RunApiCallResponse], error)
}

// NewCollectionServiceClient constructs a client for the collection.v1.CollectionService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &collectionServiceClient{
		listCollections: connect.NewClient[v1.ListCollectionsRequest, v1.ListCollectionsResponse](
			httpClient,
			baseURL+CollectionServiceListCollectionsProcedure,
			connect.WithSchema(collectionServiceListCollectionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCollection: connect.NewClient[v1.CreateCollectionRequest, v1.CreateCollectionResponse](
			httpClient,
			baseURL+CollectionServiceCreateCollectionProcedure,
			connect.WithSchema(collectionServiceCreateCollectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCollection: connect.NewClient[v1.GetCollectionRequest, v1.GetCollectionResponse](
			httpClient,
			baseURL+CollectionServiceGetCollectionProcedure,
			connect.WithSchema(collectionServiceGetCollectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCollection: connect.NewClient[v1.UpdateCollectionRequest, v1.UpdateCollectionResponse](
			httpClient,
			baseURL+CollectionServiceUpdateCollectionProcedure,
			connect.WithSchema(collectionServiceUpdateCollectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCollection: connect.NewClient[v1.DeleteCollectionRequest, v1.DeleteCollectionResponse](
			httpClient,
			baseURL+CollectionServiceDeleteCollectionProcedure,
			connect.WithSchema(collectionServiceDeleteCollectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		importPostman: connect.NewClient[v1.ImportPostmanRequest, v1.ImportPostmanResponse](
			httpClient,
			baseURL+CollectionServiceImportPostmanProcedure,
			connect.WithSchema(collectionServiceImportPostmanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createFolder: connect.NewClient[v1.CreateFolderRequest, v1.CreateFolderResponse](
			httpClient,
			baseURL+CollectionServiceCreateFolderProcedure,
			connect.WithSchema(collectionServiceCreateFolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createApiCall: connect.NewClient[v1.CreateApiCallRequest, v1.CreateApiCallResponse](
			httpClient,
			baseURL+CollectionServiceCreateApiCallProcedure,
			connect.WithSchema(collectionServiceCreateApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFolder: connect.NewClient[v1.GetFolderRequest, v1.GetFolderResponse](
			httpClient,
			baseURL+CollectionServiceGetFolderProcedure,
			connect.WithSchema(collectionServiceGetFolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getApiCall: connect.NewClient[v1.GetApiCallRequest, v1.GetApiCallResponse](
			httpClient,
			baseURL+CollectionServiceGetApiCallProcedure,
			connect.WithSchema(collectionServiceGetApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateFolder: connect.NewClient[v1.UpdateFolderRequest, v1.UpdateFolderResponse](
			httpClient,
			baseURL+CollectionServiceUpdateFolderProcedure,
			connect.WithSchema(collectionServiceUpdateFolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateApiCall: connect.NewClient[v1.UpdateApiCallRequest, v1.UpdateApiCallResponse](
			httpClient,
			baseURL+CollectionServiceUpdateApiCallProcedure,
			connect.WithSchema(collectionServiceUpdateApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFolder: connect.NewClient[v1.DeleteFolderRequest, v1.DeleteFolderResponse](
			httpClient,
			baseURL+CollectionServiceDeleteFolderProcedure,
			connect.WithSchema(collectionServiceDeleteFolderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteApiCall: connect.NewClient[v1.DeleteApiCallRequest, v1.DeleteApiCallResponse](
			httpClient,
			baseURL+CollectionServiceDeleteApiCallProcedure,
			connect.WithSchema(collectionServiceDeleteApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		runApiCall: connect.NewClient[v1.RunApiCallRequest, v1.RunApiCallResponse](
			httpClient,
			baseURL+CollectionServiceRunApiCallProcedure,
			connect.WithSchema(collectionServiceRunApiCallMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectionServiceClient implements CollectionServiceClient.
type collectionServiceClient struct {
	listCollections  *connect.Client[v1.ListCollectionsRequest, v1.ListCollectionsResponse]
	createCollection *connect.Client[v1.CreateCollectionRequest, v1.CreateCollectionResponse]
	getCollection    *connect.Client[v1.GetCollectionRequest, v1.GetCollectionResponse]
	updateCollection *connect.Client[v1.UpdateCollectionRequest, v1.UpdateCollectionResponse]
	deleteCollection *connect.Client[v1.DeleteCollectionRequest, v1.DeleteCollectionResponse]
	importPostman    *connect.Client[v1.ImportPostmanRequest, v1.ImportPostmanResponse]
	createFolder     *connect.Client[v1.CreateFolderRequest, v1.CreateFolderResponse]
	createApiCall    *connect.Client[v1.CreateApiCallRequest, v1.CreateApiCallResponse]
	getFolder        *connect.Client[v1.GetFolderRequest, v1.GetFolderResponse]
	getApiCall       *connect.Client[v1.GetApiCallRequest, v1.GetApiCallResponse]
	updateFolder     *connect.Client[v1.UpdateFolderRequest, v1.UpdateFolderResponse]
	updateApiCall    *connect.Client[v1.UpdateApiCallRequest, v1.UpdateApiCallResponse]
	deleteFolder     *connect.Client[v1.DeleteFolderRequest, v1.DeleteFolderResponse]
	deleteApiCall    *connect.Client[v1.DeleteApiCallRequest, v1.DeleteApiCallResponse]
	runApiCall       *connect.Client[v1.RunApiCallRequest, v1.RunApiCallResponse]
}

// ListCollections calls collection.v1.CollectionService.ListCollections.
func (c *collectionServiceClient) ListCollections(ctx context.Context, req *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error) {
	return c.listCollections.CallUnary(ctx, req)
}

// CreateCollection calls collection.v1.CollectionService.CreateCollection.
func (c *collectionServiceClient) CreateCollection(ctx context.Context, req *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error) {
	return c.createCollection.CallUnary(ctx, req)
}

// GetCollection calls collection.v1.CollectionService.GetCollection.
func (c *collectionServiceClient) GetCollection(ctx context.Context, req *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error) {
	return c.getCollection.CallUnary(ctx, req)
}

// UpdateCollection calls collection.v1.CollectionService.UpdateCollection.
func (c *collectionServiceClient) UpdateCollection(ctx context.Context, req *connect.Request[v1.UpdateCollectionRequest]) (*connect.Response[v1.UpdateCollectionResponse], error) {
	return c.updateCollection.CallUnary(ctx, req)
}

// DeleteCollection calls collection.v1.CollectionService.DeleteCollection.
func (c *collectionServiceClient) DeleteCollection(ctx context.Context, req *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error) {
	return c.deleteCollection.CallUnary(ctx, req)
}

// ImportPostman calls collection.v1.CollectionService.ImportPostman.
func (c *collectionServiceClient) ImportPostman(ctx context.Context, req *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error) {
	return c.importPostman.CallUnary(ctx, req)
}

// CreateFolder calls collection.v1.CollectionService.CreateFolder.
func (c *collectionServiceClient) CreateFolder(ctx context.Context, req *connect.Request[v1.CreateFolderRequest]) (*connect.Response[v1.CreateFolderResponse], error) {
	return c.createFolder.CallUnary(ctx, req)
}

// CreateApiCall calls collection.v1.CollectionService.CreateApiCall.
func (c *collectionServiceClient) CreateApiCall(ctx context.Context, req *connect.Request[v1.CreateApiCallRequest]) (*connect.Response[v1.CreateApiCallResponse], error) {
	return c.createApiCall.CallUnary(ctx, req)
}

// GetFolder calls collection.v1.CollectionService.GetFolder.
func (c *collectionServiceClient) GetFolder(ctx context.Context, req *connect.Request[v1.GetFolderRequest]) (*connect.Response[v1.GetFolderResponse], error) {
	return c.getFolder.CallUnary(ctx, req)
}

// GetApiCall calls collection.v1.CollectionService.GetApiCall.
func (c *collectionServiceClient) GetApiCall(ctx context.Context, req *connect.Request[v1.GetApiCallRequest]) (*connect.Response[v1.GetApiCallResponse], error) {
	return c.getApiCall.CallUnary(ctx, req)
}

// UpdateFolder calls collection.v1.CollectionService.UpdateFolder.
func (c *collectionServiceClient) UpdateFolder(ctx context.Context, req *connect.Request[v1.UpdateFolderRequest]) (*connect.Response[v1.UpdateFolderResponse], error) {
	return c.updateFolder.CallUnary(ctx, req)
}

// UpdateApiCall calls collection.v1.CollectionService.UpdateApiCall.
func (c *collectionServiceClient) UpdateApiCall(ctx context.Context, req *connect.Request[v1.UpdateApiCallRequest]) (*connect.Response[v1.UpdateApiCallResponse], error) {
	return c.updateApiCall.CallUnary(ctx, req)
}

// DeleteFolder calls collection.v1.CollectionService.DeleteFolder.
func (c *collectionServiceClient) DeleteFolder(ctx context.Context, req *connect.Request[v1.DeleteFolderRequest]) (*connect.Response[v1.DeleteFolderResponse], error) {
	return c.deleteFolder.CallUnary(ctx, req)
}

// DeleteApiCall calls collection.v1.CollectionService.DeleteApiCall.
func (c *collectionServiceClient) DeleteApiCall(ctx context.Context, req *connect.Request[v1.DeleteApiCallRequest]) (*connect.Response[v1.DeleteApiCallResponse], error) {
	return c.deleteApiCall.CallUnary(ctx, req)
}

// RunApiCall calls collection.v1.CollectionService.RunApiCall.
func (c *collectionServiceClient) RunApiCall(ctx context.Context, req *connect.Request[v1.RunApiCallRequest]) (*connect.Response[v1.RunApiCallResponse], error) {
	return c.runApiCall.CallUnary(ctx, req)
}

// CollectionServiceHandler is an implementation of the collection.v1.CollectionService service.
type CollectionServiceHandler interface {
	// Collection operations
	ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error)
	CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error)
	GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error)
	UpdateCollection(context.Context, *connect.Request[v1.UpdateCollectionRequest]) (*connect.Response[v1.UpdateCollectionResponse], error)
	DeleteCollection(context.Context, *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error)
	// Helper rpcs
	// // Postman
	ImportPostman(context.Context, *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error)
	// Specific operations per Item Type
	// // Create
	CreateFolder(context.Context, *connect.Request[v1.CreateFolderRequest]) (*connect.Response[v1.CreateFolderResponse], error)
	CreateApiCall(context.Context, *connect.Request[v1.CreateApiCallRequest]) (*connect.Response[v1.CreateApiCallResponse], error)
	// // Get
	GetFolder(context.Context, *connect.Request[v1.GetFolderRequest]) (*connect.Response[v1.GetFolderResponse], error)
	GetApiCall(context.Context, *connect.Request[v1.GetApiCallRequest]) (*connect.Response[v1.GetApiCallResponse], error)
	// // Update
	UpdateFolder(context.Context, *connect.Request[v1.UpdateFolderRequest]) (*connect.Response[v1.UpdateFolderResponse], error)
	UpdateApiCall(context.Context, *connect.Request[v1.UpdateApiCallRequest]) (*connect.Response[v1.UpdateApiCallResponse], error)
	// // Delete
	DeleteFolder(context.Context, *connect.Request[v1.DeleteFolderRequest]) (*connect.Response[v1.DeleteFolderResponse], error)
	DeleteApiCall(context.Context, *connect.Request[v1.DeleteApiCallRequest]) (*connect.Response[v1.DeleteApiCallResponse], error)
	// // Run
	RunApiCall(context.Context, *connect.Request[v1.RunApiCallRequest]) (*connect.Response[v1.RunApiCallResponse], error)
}

// NewCollectionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectionServiceHandler(svc CollectionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectionServiceListCollectionsHandler := connect.NewUnaryHandler(
		CollectionServiceListCollectionsProcedure,
		svc.ListCollections,
		connect.WithSchema(collectionServiceListCollectionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCreateCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceCreateCollectionProcedure,
		svc.CreateCollection,
		connect.WithSchema(collectionServiceCreateCollectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceGetCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceGetCollectionProcedure,
		svc.GetCollection,
		connect.WithSchema(collectionServiceGetCollectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceUpdateCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceUpdateCollectionProcedure,
		svc.UpdateCollection,
		connect.WithSchema(collectionServiceUpdateCollectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceDeleteCollectionHandler := connect.NewUnaryHandler(
		CollectionServiceDeleteCollectionProcedure,
		svc.DeleteCollection,
		connect.WithSchema(collectionServiceDeleteCollectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceImportPostmanHandler := connect.NewUnaryHandler(
		CollectionServiceImportPostmanProcedure,
		svc.ImportPostman,
		connect.WithSchema(collectionServiceImportPostmanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCreateFolderHandler := connect.NewUnaryHandler(
		CollectionServiceCreateFolderProcedure,
		svc.CreateFolder,
		connect.WithSchema(collectionServiceCreateFolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceCreateApiCallHandler := connect.NewUnaryHandler(
		CollectionServiceCreateApiCallProcedure,
		svc.CreateApiCall,
		connect.WithSchema(collectionServiceCreateApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceGetFolderHandler := connect.NewUnaryHandler(
		CollectionServiceGetFolderProcedure,
		svc.GetFolder,
		connect.WithSchema(collectionServiceGetFolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceGetApiCallHandler := connect.NewUnaryHandler(
		CollectionServiceGetApiCallProcedure,
		svc.GetApiCall,
		connect.WithSchema(collectionServiceGetApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceUpdateFolderHandler := connect.NewUnaryHandler(
		CollectionServiceUpdateFolderProcedure,
		svc.UpdateFolder,
		connect.WithSchema(collectionServiceUpdateFolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceUpdateApiCallHandler := connect.NewUnaryHandler(
		CollectionServiceUpdateApiCallProcedure,
		svc.UpdateApiCall,
		connect.WithSchema(collectionServiceUpdateApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceDeleteFolderHandler := connect.NewUnaryHandler(
		CollectionServiceDeleteFolderProcedure,
		svc.DeleteFolder,
		connect.WithSchema(collectionServiceDeleteFolderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceDeleteApiCallHandler := connect.NewUnaryHandler(
		CollectionServiceDeleteApiCallProcedure,
		svc.DeleteApiCall,
		connect.WithSchema(collectionServiceDeleteApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceRunApiCallHandler := connect.NewUnaryHandler(
		CollectionServiceRunApiCallProcedure,
		svc.RunApiCall,
		connect.WithSchema(collectionServiceRunApiCallMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/collection.v1.CollectionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectionServiceListCollectionsProcedure:
			collectionServiceListCollectionsHandler.ServeHTTP(w, r)
		case CollectionServiceCreateCollectionProcedure:
			collectionServiceCreateCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceGetCollectionProcedure:
			collectionServiceGetCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceUpdateCollectionProcedure:
			collectionServiceUpdateCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceDeleteCollectionProcedure:
			collectionServiceDeleteCollectionHandler.ServeHTTP(w, r)
		case CollectionServiceImportPostmanProcedure:
			collectionServiceImportPostmanHandler.ServeHTTP(w, r)
		case CollectionServiceCreateFolderProcedure:
			collectionServiceCreateFolderHandler.ServeHTTP(w, r)
		case CollectionServiceCreateApiCallProcedure:
			collectionServiceCreateApiCallHandler.ServeHTTP(w, r)
		case CollectionServiceGetFolderProcedure:
			collectionServiceGetFolderHandler.ServeHTTP(w, r)
		case CollectionServiceGetApiCallProcedure:
			collectionServiceGetApiCallHandler.ServeHTTP(w, r)
		case CollectionServiceUpdateFolderProcedure:
			collectionServiceUpdateFolderHandler.ServeHTTP(w, r)
		case CollectionServiceUpdateApiCallProcedure:
			collectionServiceUpdateApiCallHandler.ServeHTTP(w, r)
		case CollectionServiceDeleteFolderProcedure:
			collectionServiceDeleteFolderHandler.ServeHTTP(w, r)
		case CollectionServiceDeleteApiCallProcedure:
			collectionServiceDeleteApiCallHandler.ServeHTTP(w, r)
		case CollectionServiceRunApiCallProcedure:
			collectionServiceRunApiCallHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectionServiceHandler struct{}

func (UnimplementedCollectionServiceHandler) ListCollections(context.Context, *connect.Request[v1.ListCollectionsRequest]) (*connect.Response[v1.ListCollectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.ListCollections is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CreateCollection(context.Context, *connect.Request[v1.CreateCollectionRequest]) (*connect.Response[v1.CreateCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CreateCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) GetCollection(context.Context, *connect.Request[v1.GetCollectionRequest]) (*connect.Response[v1.GetCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.GetCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) UpdateCollection(context.Context, *connect.Request[v1.UpdateCollectionRequest]) (*connect.Response[v1.UpdateCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.UpdateCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) DeleteCollection(context.Context, *connect.Request[v1.DeleteCollectionRequest]) (*connect.Response[v1.DeleteCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.DeleteCollection is not implemented"))
}

func (UnimplementedCollectionServiceHandler) ImportPostman(context.Context, *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.ImportPostman is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CreateFolder(context.Context, *connect.Request[v1.CreateFolderRequest]) (*connect.Response[v1.CreateFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CreateFolder is not implemented"))
}

func (UnimplementedCollectionServiceHandler) CreateApiCall(context.Context, *connect.Request[v1.CreateApiCallRequest]) (*connect.Response[v1.CreateApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.CreateApiCall is not implemented"))
}

func (UnimplementedCollectionServiceHandler) GetFolder(context.Context, *connect.Request[v1.GetFolderRequest]) (*connect.Response[v1.GetFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.GetFolder is not implemented"))
}

func (UnimplementedCollectionServiceHandler) GetApiCall(context.Context, *connect.Request[v1.GetApiCallRequest]) (*connect.Response[v1.GetApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.GetApiCall is not implemented"))
}

func (UnimplementedCollectionServiceHandler) UpdateFolder(context.Context, *connect.Request[v1.UpdateFolderRequest]) (*connect.Response[v1.UpdateFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.UpdateFolder is not implemented"))
}

func (UnimplementedCollectionServiceHandler) UpdateApiCall(context.Context, *connect.Request[v1.UpdateApiCallRequest]) (*connect.Response[v1.UpdateApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.UpdateApiCall is not implemented"))
}

func (UnimplementedCollectionServiceHandler) DeleteFolder(context.Context, *connect.Request[v1.DeleteFolderRequest]) (*connect.Response[v1.DeleteFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.DeleteFolder is not implemented"))
}

func (UnimplementedCollectionServiceHandler) DeleteApiCall(context.Context, *connect.Request[v1.DeleteApiCallRequest]) (*connect.Response[v1.DeleteApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.DeleteApiCall is not implemented"))
}

func (UnimplementedCollectionServiceHandler) RunApiCall(context.Context, *connect.Request[v1.RunApiCallRequest]) (*connect.Response[v1.RunApiCallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.RunApiCall is not implemented"))
}
