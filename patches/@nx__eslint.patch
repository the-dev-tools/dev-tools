diff --git a/src/plugins/plugin.d.ts b/src/plugins/plugin.d.ts
--- a/src/plugins/plugin.d.ts
+++ b/src/plugins/plugin.d.ts
@@ -2,6 +2,7 @@ import { CreateNodes, CreateNodesV2 } from '@nx/devkit';
 export interface EslintPluginOptions {
     targetName?: string;
     extensions?: string[];
+    flags?: string[];
 }
 export declare const createNodesV2: CreateNodesV2<EslintPluginOptions>;
 export declare const createNodes: CreateNodes<EslintPluginOptions>;
diff --git a/src/plugins/plugin.js b/src/plugins/plugin.js
--- a/src/plugins/plugin.js
+++ b/src/plugins/plugin.js
@@ -79,6 +79,7 @@ const internalCreateNodes = async (configFilePath, options, context, projectsCac
         }
         const eslint = new ESLint({
             cwd: (0, posix_1.join)(context.workspaceRoot, childProjectRoot),
+            flags: options.flags,
         });
         let hasNonIgnoredLintableFiles = false;
         for (const file of lintableFiles) {
@@ -122,6 +123,7 @@ const internalCreateNodesV2 = async (ESLint, configFilePath, options, context, p
         if (configDir !== projectRoot || projectRoot === '.') {
             const eslint = new ESLint({
                 cwd: (0, posix_1.join)(context.workspaceRoot, projectRoot),
+                flags: options.flags,
             });
             for (const file of lintableFilesPerProjectRoot.get(projectRoot) ?? []) {
                 if (!(await eslint.isPathIgnored((0, posix_1.join)(context.workspaceRoot, file)))) {
@@ -263,9 +265,6 @@ function getProjectUsingESLintConfig(configFilePath, projectRoot, eslintVersion,
             standaloneSrcPath = 'lib';
         }
     }
-    if (projectRoot === '.' && !standaloneSrcPath) {
-        return null;
-    }
     const eslintConfigs = [configFilePath];
     if (rootEslintConfig && !eslintConfigs.includes(rootEslintConfig)) {
         eslintConfigs.unshift(rootEslintConfig);
@@ -277,8 +276,9 @@ function getProjectUsingESLintConfig(configFilePath, projectRoot, eslintVersion,
 function buildEslintTargets(eslintConfigs, eslintVersion, projectRoot, workspaceRoot, options, standaloneSrcPath) {
     const isRootProject = projectRoot === '.';
     const targets = {};
+    const args = options.flags.map(_ => `--flag ${_}`).join(' ');
     const targetConfig = {
-        command: `eslint ${isRootProject && standaloneSrcPath ? `./${standaloneSrcPath}` : '.'}`,
+        command: `eslint ${args} ${isRootProject && standaloneSrcPath ? `./${standaloneSrcPath}` : '.'}`,
         cache: true,
         options: {
             cwd: projectRoot,
@@ -323,6 +323,7 @@ function buildEslintTargets(eslintConfigs, eslintVersion, projectRoot, workspace
 function normalizeOptions(options) {
     const normalizedOptions = {
         targetName: options?.targetName ?? 'lint',
+        flags: options?.flags ?? [],
     };
     // Normalize user input for extensions (strip leading . characters)
     if (Array.isArray(options?.extensions)) {
diff --git a/src/utils/flat-config.js b/src/utils/flat-config.js
--- a/src/utils/flat-config.js
+++ b/src/utils/flat-config.js
@@ -8,6 +8,9 @@ exports.eslintFlatConfigFilenames = [
     'eslint.config.cjs',
     'eslint.config.js',
     'eslint.config.mjs',
+    'eslint.config.ts',
+    'eslint.config.mts',
+    'eslint.config.cts',
 ];
 exports.baseEslintConfigFilenames = [
     'eslint.base.js',
