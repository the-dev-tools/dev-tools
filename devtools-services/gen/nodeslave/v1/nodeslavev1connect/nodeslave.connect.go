// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: nodeslave/v1/nodeslave.proto

package nodeslavev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "devtools-services/gen/nodeslave/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeSlaveServiceName is the fully-qualified name of the NodeSlaveService service.
	NodeSlaveServiceName = "nodeslave.v1.NodeSlaveService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeSlaveServiceRunProcedure is the fully-qualified name of the NodeSlaveService's Run RPC.
	NodeSlaveServiceRunProcedure = "/nodeslave.v1.NodeSlaveService/Run"
	// NodeSlaveServiceRunMultiProcedure is the fully-qualified name of the NodeSlaveService's RunMulti
	// RPC.
	NodeSlaveServiceRunMultiProcedure = "/nodeslave.v1.NodeSlaveService/RunMulti"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	nodeSlaveServiceServiceDescriptor        = v1.File_nodeslave_v1_nodeslave_proto.Services().ByName("NodeSlaveService")
	nodeSlaveServiceRunMethodDescriptor      = nodeSlaveServiceServiceDescriptor.Methods().ByName("Run")
	nodeSlaveServiceRunMultiMethodDescriptor = nodeSlaveServiceServiceDescriptor.Methods().ByName("RunMulti")
)

// NodeSlaveServiceClient is a client for the nodeslave.v1.NodeSlaveService service.
type NodeSlaveServiceClient interface {
	Run(context.Context, *connect.Request[v1.NodeSlaveServiceRunRequest]) (*connect.Response[v1.NodeSlaveServiceRunResponse], error)
	RunMulti(context.Context, *connect.Request[v1.NodeSlaveServiceRunMultiRequest]) (*connect.ServerStreamForClient[v1.NodeSlaveServiceRunMultiResponse], error)
}

// NewNodeSlaveServiceClient constructs a client for the nodeslave.v1.NodeSlaveService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeSlaveServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeSlaveServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &nodeSlaveServiceClient{
		run: connect.NewClient[v1.NodeSlaveServiceRunRequest, v1.NodeSlaveServiceRunResponse](
			httpClient,
			baseURL+NodeSlaveServiceRunProcedure,
			connect.WithSchema(nodeSlaveServiceRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		runMulti: connect.NewClient[v1.NodeSlaveServiceRunMultiRequest, v1.NodeSlaveServiceRunMultiResponse](
			httpClient,
			baseURL+NodeSlaveServiceRunMultiProcedure,
			connect.WithSchema(nodeSlaveServiceRunMultiMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeSlaveServiceClient implements NodeSlaveServiceClient.
type nodeSlaveServiceClient struct {
	run      *connect.Client[v1.NodeSlaveServiceRunRequest, v1.NodeSlaveServiceRunResponse]
	runMulti *connect.Client[v1.NodeSlaveServiceRunMultiRequest, v1.NodeSlaveServiceRunMultiResponse]
}

// Run calls nodeslave.v1.NodeSlaveService.Run.
func (c *nodeSlaveServiceClient) Run(ctx context.Context, req *connect.Request[v1.NodeSlaveServiceRunRequest]) (*connect.Response[v1.NodeSlaveServiceRunResponse], error) {
	return c.run.CallUnary(ctx, req)
}

// RunMulti calls nodeslave.v1.NodeSlaveService.RunMulti.
func (c *nodeSlaveServiceClient) RunMulti(ctx context.Context, req *connect.Request[v1.NodeSlaveServiceRunMultiRequest]) (*connect.ServerStreamForClient[v1.NodeSlaveServiceRunMultiResponse], error) {
	return c.runMulti.CallServerStream(ctx, req)
}

// NodeSlaveServiceHandler is an implementation of the nodeslave.v1.NodeSlaveService service.
type NodeSlaveServiceHandler interface {
	Run(context.Context, *connect.Request[v1.NodeSlaveServiceRunRequest]) (*connect.Response[v1.NodeSlaveServiceRunResponse], error)
	RunMulti(context.Context, *connect.Request[v1.NodeSlaveServiceRunMultiRequest], *connect.ServerStream[v1.NodeSlaveServiceRunMultiResponse]) error
}

// NewNodeSlaveServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeSlaveServiceHandler(svc NodeSlaveServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeSlaveServiceRunHandler := connect.NewUnaryHandler(
		NodeSlaveServiceRunProcedure,
		svc.Run,
		connect.WithSchema(nodeSlaveServiceRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	nodeSlaveServiceRunMultiHandler := connect.NewServerStreamHandler(
		NodeSlaveServiceRunMultiProcedure,
		svc.RunMulti,
		connect.WithSchema(nodeSlaveServiceRunMultiMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/nodeslave.v1.NodeSlaveService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeSlaveServiceRunProcedure:
			nodeSlaveServiceRunHandler.ServeHTTP(w, r)
		case NodeSlaveServiceRunMultiProcedure:
			nodeSlaveServiceRunMultiHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeSlaveServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeSlaveServiceHandler struct{}

func (UnimplementedNodeSlaveServiceHandler) Run(context.Context, *connect.Request[v1.NodeSlaveServiceRunRequest]) (*connect.Response[v1.NodeSlaveServiceRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("nodeslave.v1.NodeSlaveService.Run is not implemented"))
}

func (UnimplementedNodeSlaveServiceHandler) RunMulti(context.Context, *connect.Request[v1.NodeSlaveServiceRunMultiRequest], *connect.ServerStream[v1.NodeSlaveServiceRunMultiResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("nodeslave.v1.NodeSlaveService.RunMulti is not implemented"))
}
