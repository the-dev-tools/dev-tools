// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: collection/v1/collection.proto

package collectionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "devtools-services/gen/collection/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectionServiceName is the fully-qualified name of the CollectionService service.
	CollectionServiceName = "collection.v1.CollectionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectionServiceCreateProcedure is the fully-qualified name of the CollectionService's Create
	// RPC.
	CollectionServiceCreateProcedure = "/collection.v1.CollectionService/Create"
	// CollectionServiceSaveProcedure is the fully-qualified name of the CollectionService's Save RPC.
	CollectionServiceSaveProcedure = "/collection.v1.CollectionService/Save"
	// CollectionServiceLoadProcedure is the fully-qualified name of the CollectionService's Load RPC.
	CollectionServiceLoadProcedure = "/collection.v1.CollectionService/Load"
	// CollectionServiceDeleteProcedure is the fully-qualified name of the CollectionService's Delete
	// RPC.
	CollectionServiceDeleteProcedure = "/collection.v1.CollectionService/Delete"
	// CollectionServiceListProcedure is the fully-qualified name of the CollectionService's List RPC.
	CollectionServiceListProcedure = "/collection.v1.CollectionService/List"
	// CollectionServiceImportPostmanProcedure is the fully-qualified name of the CollectionService's
	// ImportPostman RPC.
	CollectionServiceImportPostmanProcedure = "/collection.v1.CollectionService/ImportPostman"
	// CollectionServiceMoveProcedure is the fully-qualified name of the CollectionService's Move RPC.
	CollectionServiceMoveProcedure = "/collection.v1.CollectionService/Move"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	collectionServiceServiceDescriptor             = v1.File_collection_v1_collection_proto.Services().ByName("CollectionService")
	collectionServiceCreateMethodDescriptor        = collectionServiceServiceDescriptor.Methods().ByName("Create")
	collectionServiceSaveMethodDescriptor          = collectionServiceServiceDescriptor.Methods().ByName("Save")
	collectionServiceLoadMethodDescriptor          = collectionServiceServiceDescriptor.Methods().ByName("Load")
	collectionServiceDeleteMethodDescriptor        = collectionServiceServiceDescriptor.Methods().ByName("Delete")
	collectionServiceListMethodDescriptor          = collectionServiceServiceDescriptor.Methods().ByName("List")
	collectionServiceImportPostmanMethodDescriptor = collectionServiceServiceDescriptor.Methods().ByName("ImportPostman")
	collectionServiceMoveMethodDescriptor          = collectionServiceServiceDescriptor.Methods().ByName("Move")
)

// CollectionServiceClient is a client for the collection.v1.CollectionService service.
type CollectionServiceClient interface {
	// CRUD operations
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Save(context.Context, *connect.Request[v1.SaveRequest]) (*connect.Response[v1.SaveResponse], error)
	Load(context.Context, *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	// // Helper rpcs
	// // // postman
	ImportPostman(context.Context, *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error)
	// // // Move node to another parent
	Move(context.Context, *connect.Request[v1.MoveRequest]) (*connect.Response[v1.MoveResponse], error)
}

// NewCollectionServiceClient constructs a client for the collection.v1.CollectionService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &collectionServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+CollectionServiceCreateProcedure,
			connect.WithSchema(collectionServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		save: connect.NewClient[v1.SaveRequest, v1.SaveResponse](
			httpClient,
			baseURL+CollectionServiceSaveProcedure,
			connect.WithSchema(collectionServiceSaveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		load: connect.NewClient[v1.LoadRequest, v1.LoadResponse](
			httpClient,
			baseURL+CollectionServiceLoadProcedure,
			connect.WithSchema(collectionServiceLoadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+CollectionServiceDeleteProcedure,
			connect.WithSchema(collectionServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+CollectionServiceListProcedure,
			connect.WithSchema(collectionServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		importPostman: connect.NewClient[v1.ImportPostmanRequest, v1.ImportPostmanResponse](
			httpClient,
			baseURL+CollectionServiceImportPostmanProcedure,
			connect.WithSchema(collectionServiceImportPostmanMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		move: connect.NewClient[v1.MoveRequest, v1.MoveResponse](
			httpClient,
			baseURL+CollectionServiceMoveProcedure,
			connect.WithSchema(collectionServiceMoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectionServiceClient implements CollectionServiceClient.
type collectionServiceClient struct {
	create        *connect.Client[v1.CreateRequest, v1.CreateResponse]
	save          *connect.Client[v1.SaveRequest, v1.SaveResponse]
	load          *connect.Client[v1.LoadRequest, v1.LoadResponse]
	delete        *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	list          *connect.Client[v1.ListRequest, v1.ListResponse]
	importPostman *connect.Client[v1.ImportPostmanRequest, v1.ImportPostmanResponse]
	move          *connect.Client[v1.MoveRequest, v1.MoveResponse]
}

// Create calls collection.v1.CollectionService.Create.
func (c *collectionServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Save calls collection.v1.CollectionService.Save.
func (c *collectionServiceClient) Save(ctx context.Context, req *connect.Request[v1.SaveRequest]) (*connect.Response[v1.SaveResponse], error) {
	return c.save.CallUnary(ctx, req)
}

// Load calls collection.v1.CollectionService.Load.
func (c *collectionServiceClient) Load(ctx context.Context, req *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error) {
	return c.load.CallUnary(ctx, req)
}

// Delete calls collection.v1.CollectionService.Delete.
func (c *collectionServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// List calls collection.v1.CollectionService.List.
func (c *collectionServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// ImportPostman calls collection.v1.CollectionService.ImportPostman.
func (c *collectionServiceClient) ImportPostman(ctx context.Context, req *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error) {
	return c.importPostman.CallUnary(ctx, req)
}

// Move calls collection.v1.CollectionService.Move.
func (c *collectionServiceClient) Move(ctx context.Context, req *connect.Request[v1.MoveRequest]) (*connect.Response[v1.MoveResponse], error) {
	return c.move.CallUnary(ctx, req)
}

// CollectionServiceHandler is an implementation of the collection.v1.CollectionService service.
type CollectionServiceHandler interface {
	// CRUD operations
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Save(context.Context, *connect.Request[v1.SaveRequest]) (*connect.Response[v1.SaveResponse], error)
	Load(context.Context, *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	// // Helper rpcs
	// // // postman
	ImportPostman(context.Context, *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error)
	// // // Move node to another parent
	Move(context.Context, *connect.Request[v1.MoveRequest]) (*connect.Response[v1.MoveResponse], error)
}

// NewCollectionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectionServiceHandler(svc CollectionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectionServiceCreateHandler := connect.NewUnaryHandler(
		CollectionServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(collectionServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceSaveHandler := connect.NewUnaryHandler(
		CollectionServiceSaveProcedure,
		svc.Save,
		connect.WithSchema(collectionServiceSaveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceLoadHandler := connect.NewUnaryHandler(
		CollectionServiceLoadProcedure,
		svc.Load,
		connect.WithSchema(collectionServiceLoadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceDeleteHandler := connect.NewUnaryHandler(
		CollectionServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(collectionServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceListHandler := connect.NewUnaryHandler(
		CollectionServiceListProcedure,
		svc.List,
		connect.WithSchema(collectionServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceImportPostmanHandler := connect.NewUnaryHandler(
		CollectionServiceImportPostmanProcedure,
		svc.ImportPostman,
		connect.WithSchema(collectionServiceImportPostmanMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectionServiceMoveHandler := connect.NewUnaryHandler(
		CollectionServiceMoveProcedure,
		svc.Move,
		connect.WithSchema(collectionServiceMoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/collection.v1.CollectionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectionServiceCreateProcedure:
			collectionServiceCreateHandler.ServeHTTP(w, r)
		case CollectionServiceSaveProcedure:
			collectionServiceSaveHandler.ServeHTTP(w, r)
		case CollectionServiceLoadProcedure:
			collectionServiceLoadHandler.ServeHTTP(w, r)
		case CollectionServiceDeleteProcedure:
			collectionServiceDeleteHandler.ServeHTTP(w, r)
		case CollectionServiceListProcedure:
			collectionServiceListHandler.ServeHTTP(w, r)
		case CollectionServiceImportPostmanProcedure:
			collectionServiceImportPostmanHandler.ServeHTTP(w, r)
		case CollectionServiceMoveProcedure:
			collectionServiceMoveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectionServiceHandler struct{}

func (UnimplementedCollectionServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.Create is not implemented"))
}

func (UnimplementedCollectionServiceHandler) Save(context.Context, *connect.Request[v1.SaveRequest]) (*connect.Response[v1.SaveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.Save is not implemented"))
}

func (UnimplementedCollectionServiceHandler) Load(context.Context, *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.Load is not implemented"))
}

func (UnimplementedCollectionServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.Delete is not implemented"))
}

func (UnimplementedCollectionServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.List is not implemented"))
}

func (UnimplementedCollectionServiceHandler) ImportPostman(context.Context, *connect.Request[v1.ImportPostmanRequest]) (*connect.Response[v1.ImportPostmanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.ImportPostman is not implemented"))
}

func (UnimplementedCollectionServiceHandler) Move(context.Context, *connect.Request[v1.MoveRequest]) (*connect.Response[v1.MoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.v1.CollectionService.Move is not implemented"))
}
