// Generated by Microsoft TypeSpec

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: collection/item/response/v1/responsev1.proto

package responsev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-spec/dist/buf/go/collection/item/response/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ResponseServiceName is the fully-qualified name of the ResponseService service.
	ResponseServiceName = "collection.item.response.v1.responsev1.ResponseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ResponseServiceResponseGetProcedure is the fully-qualified name of the ResponseService's
	// ResponseGet RPC.
	ResponseServiceResponseGetProcedure = "/collection.item.response.v1.responsev1.ResponseService/ResponseGet"
	// ResponseServiceResponseHeaderListProcedure is the fully-qualified name of the ResponseService's
	// ResponseHeaderList RPC.
	ResponseServiceResponseHeaderListProcedure = "/collection.item.response.v1.responsev1.ResponseService/ResponseHeaderList"
	// ResponseServiceResponseAssertListProcedure is the fully-qualified name of the ResponseService's
	// ResponseAssertList RPC.
	ResponseServiceResponseAssertListProcedure = "/collection.item.response.v1.responsev1.ResponseService/ResponseAssertList"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	responseServiceServiceDescriptor                  = v1.File_collection_item_response_v1_responsev1_proto.Services().ByName("ResponseService")
	responseServiceResponseGetMethodDescriptor        = responseServiceServiceDescriptor.Methods().ByName("ResponseGet")
	responseServiceResponseHeaderListMethodDescriptor = responseServiceServiceDescriptor.Methods().ByName("ResponseHeaderList")
	responseServiceResponseAssertListMethodDescriptor = responseServiceServiceDescriptor.Methods().ByName("ResponseAssertList")
)

// ResponseServiceClient is a client for the collection.item.response.v1.responsev1.ResponseService
// service.
type ResponseServiceClient interface {
	ResponseGet(context.Context, *connect.Request[v1.ResponseGetRequest]) (*connect.Response[v1.ResponseGetResponse], error)
	ResponseHeaderList(context.Context, *connect.Request[v1.ResponseHeaderListRequest]) (*connect.Response[v1.ResponseHeaderListResponse], error)
	ResponseAssertList(context.Context, *connect.Request[v1.ResponseAssertListRequest]) (*connect.Response[v1.ResponseAssertListResponse], error)
}

// NewResponseServiceClient constructs a client for the
// collection.item.response.v1.responsev1.ResponseService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewResponseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ResponseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &responseServiceClient{
		responseGet: connect.NewClient[v1.ResponseGetRequest, v1.ResponseGetResponse](
			httpClient,
			baseURL+ResponseServiceResponseGetProcedure,
			connect.WithSchema(responseServiceResponseGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		responseHeaderList: connect.NewClient[v1.ResponseHeaderListRequest, v1.ResponseHeaderListResponse](
			httpClient,
			baseURL+ResponseServiceResponseHeaderListProcedure,
			connect.WithSchema(responseServiceResponseHeaderListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		responseAssertList: connect.NewClient[v1.ResponseAssertListRequest, v1.ResponseAssertListResponse](
			httpClient,
			baseURL+ResponseServiceResponseAssertListProcedure,
			connect.WithSchema(responseServiceResponseAssertListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// responseServiceClient implements ResponseServiceClient.
type responseServiceClient struct {
	responseGet        *connect.Client[v1.ResponseGetRequest, v1.ResponseGetResponse]
	responseHeaderList *connect.Client[v1.ResponseHeaderListRequest, v1.ResponseHeaderListResponse]
	responseAssertList *connect.Client[v1.ResponseAssertListRequest, v1.ResponseAssertListResponse]
}

// ResponseGet calls collection.item.response.v1.responsev1.ResponseService.ResponseGet.
func (c *responseServiceClient) ResponseGet(ctx context.Context, req *connect.Request[v1.ResponseGetRequest]) (*connect.Response[v1.ResponseGetResponse], error) {
	return c.responseGet.CallUnary(ctx, req)
}

// ResponseHeaderList calls
// collection.item.response.v1.responsev1.ResponseService.ResponseHeaderList.
func (c *responseServiceClient) ResponseHeaderList(ctx context.Context, req *connect.Request[v1.ResponseHeaderListRequest]) (*connect.Response[v1.ResponseHeaderListResponse], error) {
	return c.responseHeaderList.CallUnary(ctx, req)
}

// ResponseAssertList calls
// collection.item.response.v1.responsev1.ResponseService.ResponseAssertList.
func (c *responseServiceClient) ResponseAssertList(ctx context.Context, req *connect.Request[v1.ResponseAssertListRequest]) (*connect.Response[v1.ResponseAssertListResponse], error) {
	return c.responseAssertList.CallUnary(ctx, req)
}

// ResponseServiceHandler is an implementation of the
// collection.item.response.v1.responsev1.ResponseService service.
type ResponseServiceHandler interface {
	ResponseGet(context.Context, *connect.Request[v1.ResponseGetRequest]) (*connect.Response[v1.ResponseGetResponse], error)
	ResponseHeaderList(context.Context, *connect.Request[v1.ResponseHeaderListRequest]) (*connect.Response[v1.ResponseHeaderListResponse], error)
	ResponseAssertList(context.Context, *connect.Request[v1.ResponseAssertListRequest]) (*connect.Response[v1.ResponseAssertListResponse], error)
}

// NewResponseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewResponseServiceHandler(svc ResponseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	responseServiceResponseGetHandler := connect.NewUnaryHandler(
		ResponseServiceResponseGetProcedure,
		svc.ResponseGet,
		connect.WithSchema(responseServiceResponseGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	responseServiceResponseHeaderListHandler := connect.NewUnaryHandler(
		ResponseServiceResponseHeaderListProcedure,
		svc.ResponseHeaderList,
		connect.WithSchema(responseServiceResponseHeaderListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	responseServiceResponseAssertListHandler := connect.NewUnaryHandler(
		ResponseServiceResponseAssertListProcedure,
		svc.ResponseAssertList,
		connect.WithSchema(responseServiceResponseAssertListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/collection.item.response.v1.responsev1.ResponseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ResponseServiceResponseGetProcedure:
			responseServiceResponseGetHandler.ServeHTTP(w, r)
		case ResponseServiceResponseHeaderListProcedure:
			responseServiceResponseHeaderListHandler.ServeHTTP(w, r)
		case ResponseServiceResponseAssertListProcedure:
			responseServiceResponseAssertListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedResponseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedResponseServiceHandler struct{}

func (UnimplementedResponseServiceHandler) ResponseGet(context.Context, *connect.Request[v1.ResponseGetRequest]) (*connect.Response[v1.ResponseGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.response.v1.responsev1.ResponseService.ResponseGet is not implemented"))
}

func (UnimplementedResponseServiceHandler) ResponseHeaderList(context.Context, *connect.Request[v1.ResponseHeaderListRequest]) (*connect.Response[v1.ResponseHeaderListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.response.v1.responsev1.ResponseService.ResponseHeaderList is not implemented"))
}

func (UnimplementedResponseServiceHandler) ResponseAssertList(context.Context, *connect.Request[v1.ResponseAssertListRequest]) (*connect.Response[v1.ResponseAssertListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collection.item.response.v1.responsev1.ResponseService.ResponseAssertList is not implemented"))
}
