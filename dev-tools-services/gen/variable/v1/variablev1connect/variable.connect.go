// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: variable/v1/variable.proto

package variablev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "dev-tools-services/gen/variable/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VariableServiceName is the fully-qualified name of the VariableService service.
	VariableServiceName = "variable.v1.VariableService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VariableServiceCreateVariableProcedure is the fully-qualified name of the VariableService's
	// CreateVariable RPC.
	VariableServiceCreateVariableProcedure = "/variable.v1.VariableService/CreateVariable"
	// VariableServiceGetVariableProcedure is the fully-qualified name of the VariableService's
	// GetVariable RPC.
	VariableServiceGetVariableProcedure = "/variable.v1.VariableService/GetVariable"
	// VariableServiceGetVariablesProcedure is the fully-qualified name of the VariableService's
	// GetVariables RPC.
	VariableServiceGetVariablesProcedure = "/variable.v1.VariableService/GetVariables"
	// VariableServiceUpdateVariableProcedure is the fully-qualified name of the VariableService's
	// UpdateVariable RPC.
	VariableServiceUpdateVariableProcedure = "/variable.v1.VariableService/UpdateVariable"
	// VariableServiceDeleteVariableProcedure is the fully-qualified name of the VariableService's
	// DeleteVariable RPC.
	VariableServiceDeleteVariableProcedure = "/variable.v1.VariableService/DeleteVariable"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	variableServiceServiceDescriptor              = v1.File_variable_v1_variable_proto.Services().ByName("VariableService")
	variableServiceCreateVariableMethodDescriptor = variableServiceServiceDescriptor.Methods().ByName("CreateVariable")
	variableServiceGetVariableMethodDescriptor    = variableServiceServiceDescriptor.Methods().ByName("GetVariable")
	variableServiceGetVariablesMethodDescriptor   = variableServiceServiceDescriptor.Methods().ByName("GetVariables")
	variableServiceUpdateVariableMethodDescriptor = variableServiceServiceDescriptor.Methods().ByName("UpdateVariable")
	variableServiceDeleteVariableMethodDescriptor = variableServiceServiceDescriptor.Methods().ByName("DeleteVariable")
)

// VariableServiceClient is a client for the variable.v1.VariableService service.
type VariableServiceClient interface {
	CreateVariable(context.Context, *connect.Request[v1.CreateVariableRequest]) (*connect.Response[v1.CreateVariableResponse], error)
	GetVariable(context.Context, *connect.Request[v1.GetVariableRequest]) (*connect.Response[v1.GetVariableResponse], error)
	GetVariables(context.Context, *connect.Request[v1.GetVariablesRequest]) (*connect.Response[v1.GetVariablesResponse], error)
	UpdateVariable(context.Context, *connect.Request[v1.UpdateVariableRequest]) (*connect.Response[v1.UpdateVariableResponse], error)
	DeleteVariable(context.Context, *connect.Request[v1.DeleteVariableRequest]) (*connect.Response[v1.DeleteVariableResponse], error)
}

// NewVariableServiceClient constructs a client for the variable.v1.VariableService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVariableServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VariableServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &variableServiceClient{
		createVariable: connect.NewClient[v1.CreateVariableRequest, v1.CreateVariableResponse](
			httpClient,
			baseURL+VariableServiceCreateVariableProcedure,
			connect.WithSchema(variableServiceCreateVariableMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVariable: connect.NewClient[v1.GetVariableRequest, v1.GetVariableResponse](
			httpClient,
			baseURL+VariableServiceGetVariableProcedure,
			connect.WithSchema(variableServiceGetVariableMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVariables: connect.NewClient[v1.GetVariablesRequest, v1.GetVariablesResponse](
			httpClient,
			baseURL+VariableServiceGetVariablesProcedure,
			connect.WithSchema(variableServiceGetVariablesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateVariable: connect.NewClient[v1.UpdateVariableRequest, v1.UpdateVariableResponse](
			httpClient,
			baseURL+VariableServiceUpdateVariableProcedure,
			connect.WithSchema(variableServiceUpdateVariableMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteVariable: connect.NewClient[v1.DeleteVariableRequest, v1.DeleteVariableResponse](
			httpClient,
			baseURL+VariableServiceDeleteVariableProcedure,
			connect.WithSchema(variableServiceDeleteVariableMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// variableServiceClient implements VariableServiceClient.
type variableServiceClient struct {
	createVariable *connect.Client[v1.CreateVariableRequest, v1.CreateVariableResponse]
	getVariable    *connect.Client[v1.GetVariableRequest, v1.GetVariableResponse]
	getVariables   *connect.Client[v1.GetVariablesRequest, v1.GetVariablesResponse]
	updateVariable *connect.Client[v1.UpdateVariableRequest, v1.UpdateVariableResponse]
	deleteVariable *connect.Client[v1.DeleteVariableRequest, v1.DeleteVariableResponse]
}

// CreateVariable calls variable.v1.VariableService.CreateVariable.
func (c *variableServiceClient) CreateVariable(ctx context.Context, req *connect.Request[v1.CreateVariableRequest]) (*connect.Response[v1.CreateVariableResponse], error) {
	return c.createVariable.CallUnary(ctx, req)
}

// GetVariable calls variable.v1.VariableService.GetVariable.
func (c *variableServiceClient) GetVariable(ctx context.Context, req *connect.Request[v1.GetVariableRequest]) (*connect.Response[v1.GetVariableResponse], error) {
	return c.getVariable.CallUnary(ctx, req)
}

// GetVariables calls variable.v1.VariableService.GetVariables.
func (c *variableServiceClient) GetVariables(ctx context.Context, req *connect.Request[v1.GetVariablesRequest]) (*connect.Response[v1.GetVariablesResponse], error) {
	return c.getVariables.CallUnary(ctx, req)
}

// UpdateVariable calls variable.v1.VariableService.UpdateVariable.
func (c *variableServiceClient) UpdateVariable(ctx context.Context, req *connect.Request[v1.UpdateVariableRequest]) (*connect.Response[v1.UpdateVariableResponse], error) {
	return c.updateVariable.CallUnary(ctx, req)
}

// DeleteVariable calls variable.v1.VariableService.DeleteVariable.
func (c *variableServiceClient) DeleteVariable(ctx context.Context, req *connect.Request[v1.DeleteVariableRequest]) (*connect.Response[v1.DeleteVariableResponse], error) {
	return c.deleteVariable.CallUnary(ctx, req)
}

// VariableServiceHandler is an implementation of the variable.v1.VariableService service.
type VariableServiceHandler interface {
	CreateVariable(context.Context, *connect.Request[v1.CreateVariableRequest]) (*connect.Response[v1.CreateVariableResponse], error)
	GetVariable(context.Context, *connect.Request[v1.GetVariableRequest]) (*connect.Response[v1.GetVariableResponse], error)
	GetVariables(context.Context, *connect.Request[v1.GetVariablesRequest]) (*connect.Response[v1.GetVariablesResponse], error)
	UpdateVariable(context.Context, *connect.Request[v1.UpdateVariableRequest]) (*connect.Response[v1.UpdateVariableResponse], error)
	DeleteVariable(context.Context, *connect.Request[v1.DeleteVariableRequest]) (*connect.Response[v1.DeleteVariableResponse], error)
}

// NewVariableServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVariableServiceHandler(svc VariableServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	variableServiceCreateVariableHandler := connect.NewUnaryHandler(
		VariableServiceCreateVariableProcedure,
		svc.CreateVariable,
		connect.WithSchema(variableServiceCreateVariableMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	variableServiceGetVariableHandler := connect.NewUnaryHandler(
		VariableServiceGetVariableProcedure,
		svc.GetVariable,
		connect.WithSchema(variableServiceGetVariableMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	variableServiceGetVariablesHandler := connect.NewUnaryHandler(
		VariableServiceGetVariablesProcedure,
		svc.GetVariables,
		connect.WithSchema(variableServiceGetVariablesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	variableServiceUpdateVariableHandler := connect.NewUnaryHandler(
		VariableServiceUpdateVariableProcedure,
		svc.UpdateVariable,
		connect.WithSchema(variableServiceUpdateVariableMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	variableServiceDeleteVariableHandler := connect.NewUnaryHandler(
		VariableServiceDeleteVariableProcedure,
		svc.DeleteVariable,
		connect.WithSchema(variableServiceDeleteVariableMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/variable.v1.VariableService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VariableServiceCreateVariableProcedure:
			variableServiceCreateVariableHandler.ServeHTTP(w, r)
		case VariableServiceGetVariableProcedure:
			variableServiceGetVariableHandler.ServeHTTP(w, r)
		case VariableServiceGetVariablesProcedure:
			variableServiceGetVariablesHandler.ServeHTTP(w, r)
		case VariableServiceUpdateVariableProcedure:
			variableServiceUpdateVariableHandler.ServeHTTP(w, r)
		case VariableServiceDeleteVariableProcedure:
			variableServiceDeleteVariableHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVariableServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVariableServiceHandler struct{}

func (UnimplementedVariableServiceHandler) CreateVariable(context.Context, *connect.Request[v1.CreateVariableRequest]) (*connect.Response[v1.CreateVariableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("variable.v1.VariableService.CreateVariable is not implemented"))
}

func (UnimplementedVariableServiceHandler) GetVariable(context.Context, *connect.Request[v1.GetVariableRequest]) (*connect.Response[v1.GetVariableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("variable.v1.VariableService.GetVariable is not implemented"))
}

func (UnimplementedVariableServiceHandler) GetVariables(context.Context, *connect.Request[v1.GetVariablesRequest]) (*connect.Response[v1.GetVariablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("variable.v1.VariableService.GetVariables is not implemented"))
}

func (UnimplementedVariableServiceHandler) UpdateVariable(context.Context, *connect.Request[v1.UpdateVariableRequest]) (*connect.Response[v1.UpdateVariableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("variable.v1.VariableService.UpdateVariable is not implemented"))
}

func (UnimplementedVariableServiceHandler) DeleteVariable(context.Context, *connect.Request[v1.DeleteVariableRequest]) (*connect.Response[v1.DeleteVariableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("variable.v1.VariableService.DeleteVariable is not implemented"))
}
