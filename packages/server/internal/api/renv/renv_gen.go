// Code generated by @the-dev-tools/spec-lib/tanstack-db-go. DO NOT EDIT.

package renv

import (
	"fmt"

	idwrap "the-dev-tools/server/pkg/idwrap"
	environmentv1 "the-dev-tools/spec/dist/buf/go/api/environment/v1"
)

type EnvironmentCreateInput struct {
	WorkspaceID idwrap.IDWrap
	Name        string
	Description string
}

func DecodeEnvironmentCreateItems(items []*environmentv1.EnvironmentCreate) ([]EnvironmentCreateInput, error) {
	result := make([]EnvironmentCreateInput, len(items))
	for i, item := range items {
		workspaceID, err := idwrap.NewFromBytes(item.GetWorkspaceId())
		if err != nil {
			return nil, fmt.Errorf("environment[%d]: invalid workspace_id: %w", i, err)
		}

		result[i] = EnvironmentCreateInput{
			WorkspaceID: workspaceID,
			Name:        item.GetName(),
			Description: item.GetDescription(),
		}
	}

	return result, nil
}

type EnvironmentUpdateInput struct {
	EnvironmentID idwrap.IDWrap
	Name          *string
	Description   *string
}

func DecodeEnvironmentUpdateItems(items []*environmentv1.EnvironmentUpdate) ([]EnvironmentUpdateInput, error) {
	result := make([]EnvironmentUpdateInput, len(items))
	for i, item := range items {
		environmentID, err := idwrap.NewFromBytes(item.GetEnvironmentId())
		if err != nil {
			return nil, fmt.Errorf("environment[%d]: invalid environment_id: %w", i, err)
		}

		result[i] = EnvironmentUpdateInput{
			EnvironmentID: environmentID,
			Name:          item.Name,
			Description:   item.Description,
		}
	}

	return result, nil
}

type EnvironmentDeleteInput struct {
	EnvironmentID idwrap.IDWrap
}

func DecodeEnvironmentDeleteItems(items []*environmentv1.EnvironmentDelete) ([]EnvironmentDeleteInput, error) {
	result := make([]EnvironmentDeleteInput, len(items))
	for i, item := range items {
		environmentID, err := idwrap.NewFromBytes(item.GetEnvironmentId())
		if err != nil {
			return nil, fmt.Errorf("environment[%d]: invalid environment_id: %w", i, err)
		}

		result[i] = EnvironmentDeleteInput{
			EnvironmentID: environmentID,
		}
	}

	return result, nil
}
